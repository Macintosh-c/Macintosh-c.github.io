<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>macintosh-c&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/aec2ea475468bef1ef6aafb32d76a922</icon>
  <subtitle>当你的才华撑不起你的野心时，就应该静下心来好好学习。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://macintosh-c.coding.me/"/>
  <updated>2019-09-25T04:37:45.994Z</updated>
  <id>http://macintosh-c.coding.me/</id>
  
  <author>
    <name>Macintosh-c</name>
    <email>657582163@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ansible详解(一)</title>
    <link href="http://macintosh-c.coding.me/2019/09/25/Ansible/ansible%E8%AF%A6%E8%A7%A3%E4%B8%80/"/>
    <id>http://macintosh-c.coding.me/2019/09/25/Ansible/ansible详解一/</id>
    <published>2019-09-25T02:45:56.000Z</published>
    <updated>2019-09-25T04:37:45.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ansible-简介"><a href="#ansible-简介" class="headerlink" title="ansible 简介"></a>ansible 简介</h3><h4 id="ansible-是什么？"><a href="#ansible-是什么？" class="headerlink" title="ansible 是什么？"></a>ansible 是什么？</h4><p>ansible是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（puppet、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。<br>ansible是基于 paramiko 开发的,并且基于模块化工作，本身没有批量部署的能力。真正具有批量部署的是ansible所运行的模块，ansible只是提供一种框架。ansible不需要在远程主机上安装client/agents，因为它们是基于ssh来和远程主机通讯的。ansible目前已经已经被红帽官方收购，是自动化运维工具中大家认可度最高的，并且上手容易，学习简单。是每位运维工程师必须掌握的技能之一。</p><h4 id="ansible-特点"><a href="#ansible-特点" class="headerlink" title="ansible 特点"></a>ansible 特点</h4><ol><li>部署简单，只需在主控端部署Ansible环境，被控端无需做任何操作；</li><li>默认使用SSH协议对设备进行管理；</li><li>有大量常规运维操作模块，可实现日常绝大部分操作；</li><li>配置简单、功能强大、扩展性强；</li><li>支持API及自定义模块，可通过Python轻松扩展；</li><li>通过Playbooks来定制强大的配置、状态管理；</li><li>轻量级，无需在客户端安装agent，更新时，只需在操作机上进行一次更新即可；</li><li>提供一个功能强大、操作性强的Web管理界面和REST API接口——AWX平台。</li></ol><h4 id="ansible-架构图"><a href="#ansible-架构图" class="headerlink" title="ansible 架构图"></a>ansible 架构图</h4><p><img src="/img/Ansible/ansible-1.png" alt="image"><br>上图中我们看到的主要模块如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Ansible：Ansible核心程序。</span><br><span class="line">HostInventory：记录由Ansible管理的主机信息，包括端口、密码、ip等。</span><br><span class="line">Playbooks：“剧本”YAML格式文件，多个任务定义在一个文件中，定义主机需要调用哪些模块来完成的功能。</span><br><span class="line">CoreModules：核心模块，主要操作是通过调用核心模块来完成管理任务。</span><br><span class="line">CustomModules：自定义模块，完成核心模块无法完成的功能，支持多种语言。</span><br><span class="line">ConnectionPlugins：连接插件，Ansible和Host通信使用</span><br></pre></td></tr></table></figure></p><h3 id="ansible-任务执行"><a href="#ansible-任务执行" class="headerlink" title="ansible 任务执行"></a>ansible 任务执行</h3><h4 id="ansible-任务执行模式"><a href="#ansible-任务执行模式" class="headerlink" title="ansible 任务执行模式"></a>ansible 任务执行模式</h4><p>Ansible 系统由控制主机对被管节点的操作方式可分为两类，即adhoc和playbook：</p><h5 id="ad-hoc模式-点对点模式"><a href="#ad-hoc模式-点对点模式" class="headerlink" title="ad-hoc模式(点对点模式)"></a>ad-hoc模式(点对点模式)</h5><p>使用单个模块，支持批量执行单条命令。ad-hoc 命令是一种可以快速输入的命令，而且不需要保存起来的命令。就相当于bash中的一句话shell。</p><h5 id="playbook模式-剧本模式"><a href="#playbook模式-剧本模式" class="headerlink" title="playbook模式(剧本模式)"></a>playbook模式(剧本模式)</h5><p>是Ansible主要管理方式，也是Ansible功能强大的关键所在。playbook通过多个task集合完成一类功能，如Web服务的安装部署、数据库服务器的批量备份等。可以简单地把playbook理解为通过组合多条ad-hoc操作的配置文件。<br>简单理解就是Ansible在运行时， 首先读取ansible.cfg中的配置， 根据规则获取Inventory中的管理主机列表， 并行的在这些主机中执行配置的任务， 最后等待执行返回的结果。　　</p><h4 id="ansible-命令执行过程"><a href="#ansible-命令执行过程" class="headerlink" title="ansible 命令执行过程　"></a>ansible 命令执行过程　</h4><ol><li>加载自己的配置文件，默认/etc/ansible/ansible.cfg；</li><li>查找对应的主机配置文件，找到要执行的主机或者组；</li><li>加载自己对应的模块文件，如 command；</li><li>通过ansible将模块或命令生成对应的临时py文件(python脚本)， 并将该文件传输至远程服务器；</li><li>对应执行用户的家目录的.ansible/tmp/XXX/XXX.PY文件；</li><li>给文件 +x 执行权限；</li><li>执行并返回结果；</li><li>删除临时py文件，sleep 0退出；</li></ol><h3 id="ansible-配置详解"><a href="#ansible-配置详解" class="headerlink" title="ansible 配置详解"></a>ansible 配置详解</h3><h4 id="ansible-安装方式"><a href="#ansible-安装方式" class="headerlink" title="ansible 安装方式"></a>ansible 安装方式</h4><p>ansible安装常用两种方式，yum安装和pip程序安装。下面我们来详细介绍一下这两种安装方式。</p><h5 id="使用-pip（python的包管理模块）安装"><a href="#使用-pip（python的包管理模块）安装" class="headerlink" title="使用 pip（python的包管理模块）安装"></a>使用 pip（python的包管理模块）安装</h5><p>首先，我们需要安装一个python-pip包，安装完成以后，则直接使用pip命令来安装我们的包，具体操作过程如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install python-pip</span><br><span class="line">pip install ansible</span><br></pre></td></tr></table></figure></p><h5 id="使用-yum-安装"><a href="#使用-yum-安装" class="headerlink" title="使用 yum 安装"></a>使用 yum 安装</h5><p>yum 安装是我们很熟悉的安装方式了。我们需要先安装一个epel-release包，然后再安装我们的 ansible 即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum install ansible –y</span><br></pre></td></tr></table></figure></p><h4 id="ansible-程序结构"><a href="#ansible-程序结构" class="headerlink" title="ansible 程序结构"></a>ansible 程序结构</h4><p>安装目录如下(yum安装)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　配置文件目录：/etc/ansible/</span><br><span class="line">　　执行文件目录：/usr/bin/</span><br><span class="line">　　Lib库依赖目录：/usr/lib/pythonX.X/site-packages/ansible/</span><br><span class="line">　　Help文档目录：/usr/share/doc/ansible-X.X.X/</span><br><span class="line">　　Man文档目录：/usr/share/man/man1/</span><br></pre></td></tr></table></figure></p><h4 id="ansible配置文件查找顺序"><a href="#ansible配置文件查找顺序" class="headerlink" title="ansible配置文件查找顺序"></a>ansible配置文件查找顺序</h4><p>ansible与我们其他的服务在这一点上有很大不同，这里的配置文件查找是从多个地方找的，顺序如下：</p><ol><li>检查环境变量ANSIBLE_CONFIG指向的路径文件(export ANSIBLE_CONFIG=/etc/ansible.cfg)；</li><li>~/.ansible.cfg，检查当前目录下的ansible.cfg配置文件；</li><li>/etc/ansible.cfg检查etc目录的配置文件。</li></ol><h4 id="ansible配置文件"><a href="#ansible配置文件" class="headerlink" title="ansible配置文件"></a>ansible配置文件</h4><p>ansible 的配置文件为/etc/ansible/ansible.cfg，ansible 有许多参数，下面我们列出一些常见的参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">inventory = /etc/ansible/hosts      #这个参数表示资源清单inventory文件的位置</span><br><span class="line">library = /usr/share/ansible        #指向存放Ansible模块的目录，支持多个目录方式，只要用冒号（：）隔开就可以</span><br><span class="line">forks = 5       #并发连接数，默认为5</span><br><span class="line">sudo_user = root        #设置默认执行命令的用户</span><br><span class="line">remote_port = 22        #指定连接被管节点的管理端口，默认为22端口，建议修改，能够更加安全</span><br><span class="line">host_key_checking = False       #设置是否检查SSH主机的密钥，值为True/False。关闭后第一次连接不会提示配置实例</span><br><span class="line">timeout = 60        #设置SSH连接的超时时间，单位为秒</span><br><span class="line">log_path = /var/log/ansible.log     #指定一个存储ansible日志的文件（默认不记录日志）</span><br></pre></td></tr></table></figure></p><h4 id="ansuble主机清单"><a href="#ansuble主机清单" class="headerlink" title="ansuble主机清单"></a>ansuble主机清单</h4><p>在配置文件中，我们提到了资源清单，这个清单就是我们的主机清单，里面保存的是一些 ansible 需要连接管理的主机列表。我们可以来看看他的定义方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、 直接指明主机地址或主机名：</span><br><span class="line">    ## green.example.com#</span><br><span class="line">    # blue.example.com#</span><br><span class="line">    # 192.168.100.1</span><br><span class="line">    # 192.168.100.10</span><br><span class="line">2、 定义一个主机组[组名]把地址或主机名加进去</span><br><span class="line">    [mysql_test]</span><br><span class="line">    192.168.253.159</span><br><span class="line">    192.168.253.160</span><br><span class="line">    192.168.253.153</span><br></pre></td></tr></table></figure></p><p>需要注意的是，这里的组成员可以使用通配符来匹配，这样对于一些标准化的管理来说就很轻松方便了。我们可以根据实际情况来配置我们的主机列表，具体操作如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">　　[root@server ~]# vim /etc/ansible/hosts</span><br><span class="line">[web]</span><br><span class="line">192.168.37.122</span><br><span class="line">192.168.37.133</span><br></pre></td></tr></table></figure></p><h3 id="ansible-常用命令"><a href="#ansible-常用命令" class="headerlink" title="ansible 常用命令"></a>ansible 常用命令</h3><h4 id="ansible-命令集"><a href="#ansible-命令集" class="headerlink" title="ansible 命令集"></a>ansible 命令集</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ansible　　Ansibe AD-Hoc 临时命令执行工具，常用于临时命令的执行</span><br><span class="line">/usr/bin/ansible-doc 　　Ansible 模块功能查看工具</span><br><span class="line">/usr/bin/ansible-galaxy　　下载/上传优秀代码或Roles模块 的官网平台，基于网络的</span><br><span class="line">/usr/bin/ansible-playbook　　Ansible 定制自动化的任务集编排工具</span><br><span class="line">/usr/bin/ansible-pull　　Ansible远程执行命令的工具，拉取配置而非推送配置（使用较少，海量机器时使用，对运维的架构能力要求较高）</span><br><span class="line">/usr/bin/ansible-vault　　Ansible 文件加密工具</span><br><span class="line">/usr/bin/ansible-console　　Ansible基于Linux Consoble界面可与用户交互的命令执行工具</span><br></pre></td></tr></table></figure><p>其中，我们比较常用的是/usr/bin/ansible和/usr/bin/ansible-playbook。</p><h4 id="ansible-doc-命令"><a href="#ansible-doc-命令" class="headerlink" title="ansible-doc 命令"></a>ansible-doc 命令</h4><p>ansible-doc 命令常用于获取模块信息及其使用帮助，一般用法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible-doc -l              #获取全部模块的信息</span><br><span class="line">ansible-doc -s MOD_NAME     #获取指定模块的使用帮助</span><br></pre></td></tr></table></figure></p><p>我们也可以查看一下ansible-doc的全部用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# ansible-doc</span><br><span class="line">Usage: ansible-doc [options] [module...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -h, --help  show this help message and exit　　# 显示命令参数API文档</span><br><span class="line">  -l, --list  List available modules　　#列出可用的模块</span><br><span class="line">  -M MODULE_PATH, --module-path=MODULE_PATH　　#指定模块的路径</span><br><span class="line">              specify path(s) to module library (default=None)</span><br><span class="line">  -s, --snippet  Show playbook snippet for specified module(s)　　#显示playbook制定模块的用法</span><br><span class="line">  -v, --verbose  verbose mode (-vvv for more, -vvvv to enable　　# 显示ansible-doc的版本号查看模块列表：connection debugging)</span><br><span class="line">  --version   show program&apos;s version number and exit</span><br></pre></td></tr></table></figure></p><h4 id="ansible-命令详解"><a href="#ansible-命令详解" class="headerlink" title="ansible 命令详解"></a>ansible 命令详解</h4><p>命令的具体格式如下：ansible <host-pattern> [-f forks] [-m module_name] [-a args]<br>也可以通过ansible -h来查看帮助，下面我们列出一些比较常用的选项，并解释其含义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-a MODULE_ARGS　#模块的参数，如果执行默认COMMAND的模块，即是命令参数，如： “date”，“pwd”等等</span><br><span class="line">-k，--ask-pass #ask for SSH password。登录密码，提示输入SSH密码而不是假设基于密钥的验证</span><br><span class="line">--ask-su-pass #ask for su password。su切换密码</span><br><span class="line">-K，--ask-sudo-pass #ask for sudo password。提示密码使用sudo，sudo表示提权操作</span><br><span class="line">--ask-vault-pass #ask for vault password。假设我们设定了加密的密码，则用该选项进行访问</span><br><span class="line">-B SECONDS #后台运行超时时间</span><br><span class="line">-C #模拟运行环境并进行预运行，可以进行查错测试</span><br><span class="line">-c CONNECTION #连接类型使用</span><br><span class="line">-f FORKS #并行任务数，默认为5</span><br><span class="line">-i INVENTORY #指定主机清单的路径，默认为/etc/ansible/hosts</span><br><span class="line">--list-hosts #查看有哪些主机组</span><br><span class="line">-m MODULE_NAME #执行模块的名字，默认使用 command 模块，所以如果是只执行单一命令可以不用 -m参数</span><br><span class="line">-o #压缩输出，尝试将所有结果在一行输出，一般针对收集工具使用</span><br><span class="line">-S #用 su 命令</span><br><span class="line">-R SU_USER #指定 su 的用户，默认为 root 用户</span><br><span class="line">-s #用 sudo 命令</span><br><span class="line">-U SUDO_USER #指定 sudo 到哪个用户，默认为 root 用户</span><br><span class="line">-T TIMEOUT #指定 ssh 默认超时时间，默认为10s，也可在配置文件中修改</span><br><span class="line">-u REMOTE_USER #远程用户，默认为 root 用户</span><br><span class="line">-v #查看详细信息，同时支持-vvv，-vvvv可查看更详细信息</span><br></pre></td></tr></table></figure></host-pattern></p><h4 id="ansible-配置公私钥"><a href="#ansible-配置公私钥" class="headerlink" title="ansible 配置公私钥"></a>ansible 配置公私钥</h4><p>上面我们已经提到过 ansible 是基于 ssh 协议实现的，所以其配置公私钥的方式与 ssh 协议的方式相同，具体操作步骤如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#1.生成私钥</span><br><span class="line">[root@server ~]# ssh-keygen </span><br><span class="line">#2.向主机分发私钥</span><br><span class="line">[root@server ~]# ssh-copy-id root@192.168.37.122</span><br><span class="line">[root@server ~]# ssh-copy-id root@192.168.37.133</span><br></pre></td></tr></table></figure></p><p>这样的话，就可以实现无密码登录，我们的实验过程也会顺畅很多。注意，如果出现了一下报错：<br>　　-bash: ssh-copy-id: command not found<br>那么就证明我们需要安装一个包：yum -y install openssh-clientsansible,把包安装上即可。</p><h3 id="ansible-常用模块"><a href="#ansible-常用模块" class="headerlink" title="ansible 常用模块"></a>ansible 常用模块</h3><p>ansible 常用模块</p><h4 id="1）主机连通性测试"><a href="#1）主机连通性测试" class="headerlink" title="1）主机连通性测试"></a>1）主机连通性测试</h4><p>我们使用ansible web -m ping命令来进行主机连通性测试</p><h4 id="2）command-模块"><a href="#2）command-模块" class="headerlink" title="2）command 模块"></a>2）command 模块</h4><p>这个模块可以直接在远程主机上执行命令，并将结果返回本主机。<br>命令模块接受命令名称，后面是空格分隔的列表参数。给定的命令将在所有选定的节点上执行。它不会通过shell进行处理，比如$HOME和操作如”&lt;”，”&gt;”，”|”，”;”，”&amp;” 工作（需要使用（shell）模块实现这些功能）。注意，该命令不支持| 管道命令。<br>下面来看一看该模块下常用的几个命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chdir　　　　　　 # 在执行命令之前，先切换到该目录</span><br><span class="line">executable # 切换shell来执行命令，需要使用命令的绝对路径</span><br><span class="line">free_form 　 # 要执行的Linux指令，一般使用Ansible的-a参数代替。</span><br><span class="line">creates 　# 一个文件名，当这个文件存在，则该命令不执行,可以</span><br><span class="line">用来做判断</span><br><span class="line">removes # 一个文件名，这个文件不存在，则该命令不执行</span><br></pre></td></tr></table></figure></p><p>例：ansible web -m command -a ‘chdir=/data/ ls’    #先切换到/data/ 目录，再执行“ls”命令</p><h4 id="3）shell-模块"><a href="#3）shell-模块" class="headerlink" title="3）shell 模块"></a>3）shell 模块</h4><p>shell模块可以在远程主机上调用shell解释器运行命令，支持shell的各种功能，例如管道等。<br>例：ansible web -m shell -a ‘cat /etc/passwd |grep “keer”‘</p><h4 id="4）copy-模块"><a href="#4）copy-模块" class="headerlink" title="4）copy 模块"></a>4）copy 模块</h4><p>这个模块用于将文件复制到远程主机，同时支持给定内容生成文件和修改权限等。<br>其相关选项如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src　　　　#被复制到远程主机的本地文件。可以是绝对路径，也可以是相对路径。如果路径是一个目录，则会递归复制，用法类似于&quot;rsync&quot;</span><br><span class="line">content　　　#用于替换&quot;src&quot;，可以直接指定文件的值</span><br><span class="line">dest　　　　#必选项，将源文件复制到的远程主机的绝对路径</span><br><span class="line">backup　　　#当文件内容发生改变后，在覆盖之前把源文件备份，备份文件包含时间信息</span><br><span class="line">directory_mode　　　　#递归设定目录的权限，默认为系统默认权限</span><br><span class="line">force　　　　#当目标主机包含该文件，但内容不同时，设为&quot;yes&quot;，表示强制覆盖；设为&quot;no&quot;，表示目标主机的目标位置不存在该文件才复制。默认为&quot;yes&quot;</span><br><span class="line">others　　　　#所有的 file 模块中的选项可以在这里使用</span><br></pre></td></tr></table></figure></p><p>例：ansible web -m copy -a ‘src=~/hello dest=/data/hello’ </p><h4 id="5）file-模块"><a href="#5）file-模块" class="headerlink" title="5）file 模块"></a>5）file 模块</h4><p>该模块主要用于设置文件的属性，比如创建文件、创建链接文件、删除文件等。<br>　　下面是一些常见的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">force　　#需要在两种情况下强制创建软链接，一种是源文件不存在，但之后会建立的情况下；另一种是目标软链接已存在，需要先取消之前的软链，然后创建新的软链，有两个选项：yes|no</span><br><span class="line">group　　#定义文件/目录的属组。后面可以加上mode：定义文件/目录的权限</span><br><span class="line">owner　　#定义文件/目录的属主。后面必须跟上path：定义文件/目录的路径</span><br><span class="line">recurse　　#递归设置文件的属性，只对目录有效，后面跟上src：被链接的源文件路径，只应用于state=link的情况</span><br><span class="line">dest　　#被链接到的路径，只应用于state=link的情况</span><br><span class="line">state　　#状态，有以下选项：</span><br><span class="line">directory：如果目录不存在，就创建目录</span><br><span class="line">file：即使文件不存在，也不会被创建</span><br><span class="line">link：创建软链接</span><br><span class="line">hard：创建硬链接</span><br><span class="line">touch：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间</span><br><span class="line">absent：删除目录、文件或者取消链接文件</span><br></pre></td></tr></table></figure></p><p>例：ansible web -m file -a ‘path=/data/app state=directory’</p><h4 id="6）fetch-模块"><a href="#6）fetch-模块" class="headerlink" title="6）fetch 模块"></a>6）fetch 模块</h4><p>该模块用于从远程某主机获取（复制）文件到本地。<br>　　有两个选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dest：用来存放文件的目录</span><br><span class="line">src：在远程拉取的文件，并且必须是一个file，不能是目录</span><br></pre></td></tr></table></figure></p><p>例：ansible web -m fetch -a ‘src=/data/hello dest=/data’</p><h4 id="7）cron-模块"><a href="#7）cron-模块" class="headerlink" title="7）cron 模块"></a>7）cron 模块</h4><p>该模块适用于管理cron计划任务的。<br>　　其使用的语法跟我们的crontab文件中的语法一致，同时，可以指定以下选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">day= #日应该运行的工作( 1-31, , /2, )</span><br><span class="line">hour= # 小时 ( 0-23, , /2, )</span><br><span class="line">minute= #分钟( 0-59, , /2, )</span><br><span class="line">month= # 月( 1-12, *, /2, )</span><br><span class="line">weekday= # 周 ( 0-6 for Sunday-Saturday,, )</span><br><span class="line">job= #指明运行的命令是什么</span><br><span class="line">name= #定时任务描述</span><br><span class="line">reboot # 任务在重启时运行，不建议使用，建议使用special_time</span><br><span class="line">special_time #特殊的时间范围，参数：reboot（重启时），annually（每年），monthly（每月），weekly（每周），daily（每天），hourly（每小时）</span><br><span class="line">state #指定状态，present表示添加定时任务，也是默认设置，absent表示删除定时任务</span><br><span class="line">user # 以哪个用户的身份执行</span><br></pre></td></tr></table></figure></p><p>例：ansible web -m cron -a ‘name=”ntp update every 5 min” minute=*/5 job=”/sbin/ntpdate 172.17.0.1 &amp;&gt; /dev/null”‘</p><h4 id="8）yum-模块"><a href="#8）yum-模块" class="headerlink" title="8）yum 模块"></a>8）yum 模块</h4><p>顾名思义，该模块主要用于软件的安装。<br>　　其选项如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name=　　#所安装的包的名称</span><br><span class="line">state=　　#present---&gt;安装， latest---&gt;安装最新的, absent---&gt; 卸载软件。</span><br><span class="line">update_cache　　#强制更新yum的缓存</span><br><span class="line">conf_file　　#指定远程yum安装时所依赖的配置文件（安装本地已有的包）。</span><br><span class="line">disable_pgp_check　　#是否禁止GPG checking，只用于presentor latest。</span><br><span class="line">disablerepo　　#临时禁止使用yum库。 只用于安装或更新时。</span><br><span class="line">enablerepo　　#临时使用的yum库。只用于安装或更新时。</span><br></pre></td></tr></table></figure></p><p>例：ansible web -m yum -a ‘name=htop state=present’</p><h4 id="9）service-模块"><a href="#9）service-模块" class="headerlink" title="9）service 模块"></a>9）service 模块</h4><p>该模块用于服务程序的管理。<br>　　其主要选项如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arguments #命令行提供额外的参数</span><br><span class="line">enabled #设置开机启动。</span><br><span class="line">name= #服务名称</span><br><span class="line">runlevel #开机启动的级别，一般不用指定。</span><br><span class="line">sleep #在重启服务的过程中，是否等待。如在服务关闭以后等待2秒再启动。(定义在剧本中。)</span><br><span class="line">state #有四种状态，分别为：started---&gt;启动服务， stopped---&gt;停止服务， restarted---&gt;重启服务， reloaded---&gt;重载配置</span><br></pre></td></tr></table></figure></p><p>例：ansible web -m service -a ‘name=nginx state=started enabled=true’</p><h4 id="10）user-模块"><a href="#10）user-模块" class="headerlink" title="10）user 模块"></a>10）user 模块</h4><p>该模块主要是用来管理用户账号。<br>　　其主要选项如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">comment　　# 用户的描述信息</span><br><span class="line">createhome　　# 是否创建家目录</span><br><span class="line">force　　# 在使用state=absent时, 行为与userdel –force一致.</span><br><span class="line">group　　# 指定基本组</span><br><span class="line">groups　　# 指定附加组，如果指定为(groups=)表示删除所有组</span><br><span class="line">home　　# 指定用户家目录</span><br><span class="line">move_home　　# 如果设置为home=时, 试图将用户主目录移动到指定的目录</span><br><span class="line">name　　# 指定用户名</span><br><span class="line">non_unique　　# 该选项允许改变非唯一的用户ID值</span><br><span class="line">password　　# 指定用户密码</span><br><span class="line">remove　　# 在使用state=absent时, 行为是与userdel –remove一致</span><br><span class="line">shell　　# 指定默认shell</span><br><span class="line">state　　# 设置帐号状态，不指定为创建，指定值为absent表示删除</span><br><span class="line">system　　# 当创建一个用户，设置这个用户是系统用户。这个设置不能更改现有用户</span><br><span class="line">uid　　# 指定用户的uid</span><br></pre></td></tr></table></figure></p><p>例：ansible web -m user -a ‘name=keer uid=11111’</p><h4 id="11）group-模块"><a href="#11）group-模块" class="headerlink" title="11）group 模块"></a>11）group 模块</h4><p>该模块主要用于添加或删除组。<br>　　常用的选项如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gid=　　#设置组的GID号</span><br><span class="line">name=　　#指定组的名称</span><br><span class="line">state=　　#指定组的状态，默认为创建，设置值为absent为删除</span><br><span class="line">system=　　#设置值为yes，表示创建为系统组</span><br></pre></td></tr></table></figure></p><p>例：ansible web -m group -a ‘name=sanguo gid=12222’</p><h4 id="12）script-模块"><a href="#12）script-模块" class="headerlink" title="12）script 模块"></a>12）script 模块</h4><p>该模块用于将本机的脚本在被管理端的机器上运行。<br>　　该模块直接指定脚本的路径即可，我们通过例子来看一看到底如何使用的：<br>　　首先，我们写一个脚本，并给其加上执行权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# vim /tmp/df.sh</span><br><span class="line">    #!/bin/bash</span><br><span class="line"></span><br><span class="line">    date &gt;&gt; /tmp/disk_total.log</span><br><span class="line">    df -lh &gt;&gt; /tmp/disk_total.log </span><br><span class="line">[root@server ~]# chmod +x /tmp/df.sh</span><br></pre></td></tr></table></figure></p><p>然后，我们直接运行命令来实现在被管理端执行该脚本：<br>例：ansible web -m script -a ‘/tmp/df.sh’</p><h4 id="13）setup-模块"><a href="#13）setup-模块" class="headerlink" title="13）setup 模块"></a>13）setup 模块</h4><p>该模块主要用于收集信息，是通过调用facts组件来实现的。<br>　　facts组件是Ansible用于采集被管机器设备信息的一个功能，我们可以使用setup模块查机器的所有facts信息，可以使用filter来查看指定信息。整个facts信息被包装在一个JSON格式的数据结构中，ansible_facts是最上层的值。<br>　　facts就是变量，内建变量 。每个主机的各种信息，cpu颗数、内存大小等。会存在facts中的某个变量中。调用后返回很多对应主机的信息，在后面的操作中可以根据不同的信息来做不同的操作。如redhat系列用yum安装，而debian系列用apt来安装软件。<br>例：ansible web -m setup -a ‘filter=”<em>mem</em>“‘   #查看内存</p><p>各模块具体的使用及详细返回案例见转载出处。</p><p>本文章转载自：<a href="https://www.cnblogs.com/keerya/p/7987886.html" target="_blank" rel="noopener">自动化运维工具——ansible详解(一)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ansible-简介&quot;&gt;&lt;a href=&quot;#ansible-简介&quot; class=&quot;headerlink&quot; title=&quot;ansible 简介&quot;&gt;&lt;/a&gt;ansible 简介&lt;/h3&gt;&lt;h4 id=&quot;ansible-是什么？&quot;&gt;&lt;a href=&quot;#ansible-是
      
    
    </summary>
    
      <category term="Ansible" scheme="http://macintosh-c.coding.me/categories/Ansible/"/>
    
    
      <category term="ansible详解" scheme="http://macintosh-c.coding.me/tags/ansible%E8%AF%A6%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>centos安装docker</title>
    <link href="http://macintosh-c.coding.me/2019/09/24/Docker/docker%E5%AE%89%E8%A3%85/"/>
    <id>http://macintosh-c.coding.me/2019/09/24/Docker/docker安装/</id>
    <published>2019-09-24T05:45:56.000Z</published>
    <updated>2019-09-24T06:18:16.500Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看一些关于cicd方面的资料时，看到一些不错的博文，适当记录，加深理解。这篇是关于Docker的，顺便记录下docker的安装。</p><h3 id="Docker-简介"><a href="#Docker-简介" class="headerlink" title="Docker 简介"></a>Docker 简介</h3><p>docker 是一种容器技术，作用是用来快速部署服务。</p><p><strong>为什么说 docker 是快速部署</strong></p><p>我们做一个项目，最不想面对的不是开发，也不是调试，而是部署！！！！<br>比如你这个机器上的环境是 python3 你用另一个机器上却是 python2 或者压根就没有 python 环境。<br>好了，这个时候你怎么解决呢。 对，只要去新机器上你就要部署 python。<br>嗯~ 好吧， 部署 python 就 python，但是你的项目里面还要用到 MySQL，好的没问题， 你又要去用 pip 去安装 python 的 mysql 模块。 哦对了， 我记我们的项目里面还有 redis， 两种非对称加密，还有三方队列， 哦， 还有阿里云的接口，对对对对对对哦。 乱七八糟的东西真的好多，搞完了几个小时没有了，遇到网络卡了，那就更没有谱了。</p><p><strong>好了， 我们进化到，快速1.0 时代</strong></p><p>我们把要安装的东西全都放进离线安装包里面，再写个 bash 脚本<br>对，这种事情真的有过。 部署全靠一个 bash 脚本，毕竟不用手动了么。 可是就是苦了写脚本的人，我就写过一个脚本写了好久。</p><p><strong>于是， 我们又进化了， 快速2.0时代</strong></p><p>我们把整个系统做成了镜像，存在了光盘里面，每当要架设的时候赶快用镜像做出一个新的系统！<br>可能经历过的自然会懂，还特么要做镜像啊，离机房远咋办啊！！我们做游戏，开服快，更新更快！我们版本更新过快怎么办啊！！我们还要刻刻刻么？ 我们的 tornado 又更新了，我去，我们客户端的 protobuf 也更新了，可是我们有100台服务器啊，为了这一点小小的东西更新么？西八！</p><p><strong>于是，我们再次加入光荣的进化， 快速3.0时代</strong></p><p>我们把服务装进了 docker 中<br>我们把做好的镜像，一个命令 pull 了下来，嗯，蛮快又一个命令 docker start XXXXXX 服务起来了。哦，你说多服务？好吧那就写个docker-compose.file吧。 嗯哼？ 你说集群部署 来来来， 有Kubernetes、Mesos，Fleet和Swarm 任君挑选，不好用不要钱。</p><p>docker 是部署的最佳辅助，即使你烂成渣渣，docker 也可以扶你上王者。<br>那Docker由什么组成呢， 包括三个基本概念:</p><ul><li>仓库(Repository)</li><li>镜像(Image)</li><li>容器(Container)</li></ul><p>1，其中Registry是Docker用于存放镜像文件的仓库，Docker 仓库的概念跟Git 类似.<br>2，所谓镜像就是构建容器的源代码，是一个只读的模板，由一层一层的文件系统组成的，类似于虚拟机的镜像.<br>3，那么容器就是由Docker镜像创建的运行实例，类似于虚拟机，容器之间是相互隔离的，包含特定的应用及其所需的依赖文件.</p><h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><p>如下命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">yum install docker-ce</span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br><span class="line">docker version</span><br></pre></td></tr></table></figure></p><p>1安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的。<br>2设置yum源。<br>3安装Docker，命令：yum install docker-ce-版本号，版本号可以通过yum list docker-ce –showduplicates | sort -r查看，我这边不带版本号用的是默认最新。<br>4启动Docker。<br>5加入开机启动。<br>6验证安装是否成功(有client和service两部分表示docker安装启动都成功了)。</p><h3 id="常用Docker命令"><a href="#常用Docker命令" class="headerlink" title="常用Docker命令"></a>常用Docker命令</h3><ol><li>docker ps 查看当前正在运行的容器</li><li>docker ps -a 查看所有容器的状态</li><li>docker start/stop id/name 启动/停止某个容器</li><li>docker attach id 进入某个容器(使用exit退出后容器也跟着停止运行)</li><li>docker exec -ti id /bin/bash启动一个伪终端以交互式的方式进入某个容器（使用exit退出后容器不停止运行）</li><li>docker images 查看本地镜像</li><li>docker rm id/name 删除某个容器</li><li>docker rmi id/name 删除某个镜像</li><li>docker run –name test -ti ubuntu /bin/bash  复制ubuntu容器并且重命名为test且运行，然后以伪终端交互式方式进入容器，运行bash</li><li>docker build -t soar/centos:7.1 .  通过当前目录下的Dockerfile创建一个名为soar/centos:7.1的镜像</li><li>docker run -d -p 2222:22 –name test soar/centos:7.1  以镜像soar/centos:7.1创建名为test的容器，并以后台模式运行，并做端口映射到宿主机2222端口，P参数重启容器宿主机端口会发生改变</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在看一些关于cicd方面的资料时，看到一些不错的博文，适当记录，加深理解。这篇是关于Docker的，顺便记录下docker的安装。&lt;/p&gt;
&lt;h3 id=&quot;Docker-简介&quot;&gt;&lt;a href=&quot;#Docker-简介&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Docker" scheme="http://macintosh-c.coding.me/categories/Docker/"/>
    
    
      <category term="docker安装" scheme="http://macintosh-c.coding.me/tags/docker%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Mac下安装Memcached</title>
    <link href="http://macintosh-c.coding.me/2019/09/18/Databases/memcached/Mac%E4%B8%8B%E5%AE%89%E8%A3%85memcached/"/>
    <id>http://macintosh-c.coding.me/2019/09/18/Databases/memcached/Mac下安装memcached/</id>
    <published>2019-09-18T14:20:29.000Z</published>
    <updated>2019-09-18T14:42:14.676Z</updated>
    
    <content type="html"><![CDATA[<p>临时用到Memcached，本地安装了个调试，安装过程记录如下，后续使用学习，再另起笔记</p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>使用homebrew，方便快捷：（今天接收新项目，新安装了许多组件，感觉到了brew的强大，神器）<br>brew install memcached</p><p>安装完成后，透过安装日记提示可以看到启动方式<br>To have launchd start memcached now and restart at login:<br>  brew services start memcached<br>Or, if you don’t want/need a background service you can just run:<br>  /usr/local/opt/memcached/bin/memcached</p><p>提示了后台和非后台启动的两种方式</p><h2 id="启动memcached"><a href="#启动memcached" class="headerlink" title="启动memcached"></a>启动memcached</h2><p>上述的brew启动指令即可，也可使用如下：<br>输入命令：memcached -d -p 11211 -u nobody -c 1024 -m 64</p><p>启动命令说明：<br>memcached -p 11211 -m 64m -d -vv<br>memcached启动选项如下：<br>-p  使用的TCP端口，默认为11211<br>-m  最大内存大小默认为64m<br>-vv 用very verbose模式启动，调试信息和错误输出到控制台<br>-d  作为daemon在后台启动</p><h2 id="连接到memcached"><a href="#连接到memcached" class="headerlink" title="连接到memcached"></a>连接到memcached</h2><p>直接使用telnet连接到memcached端口，输入命令即可：telnet localhost 11211<br>Trying 127.0.0.1…<br>Connected to localhost.<br>Escape character is ‘^]’.</p><p>mac如果不支持telnet指令，需要安装，使用brew直接安装很快捷：brew install telnet，是不是很神器 </p><p>结束telnet，输入telnet退出命令：quit命令退出。</p><h2 id="简单测试指令"><a href="#简单测试指令" class="headerlink" title="简单测试指令"></a>简单测试指令</h2><p>保存数据，输入命令：<br>set foo 0 0 3<br>bar<br>显示STORED 表示成功。</p><p>数据读取，输入命令：get foo<br>得到输出：<br>VALUE foo 0 3<br>bar<br>END</p><p>这样基本就安装ok了，代码上做好地址调整，即可连接到本地的memcached上。更复杂的指令，学习后续具体用到再笔记。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;临时用到Memcached，本地安装了个调试，安装过程记录如下，后续使用学习，再另起笔记&lt;/p&gt;
&lt;h2 id=&quot;下载安装&quot;&gt;&lt;a href=&quot;#下载安装&quot; class=&quot;headerlink&quot; title=&quot;下载安装&quot;&gt;&lt;/a&gt;下载安装&lt;/h2&gt;&lt;p&gt;使用homebrew
      
    
    </summary>
    
      <category term="Database" scheme="http://macintosh-c.coding.me/categories/Database/"/>
    
    
      <category term="Memcached安装" scheme="http://macintosh-c.coding.me/tags/Memcached%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Mac下安装Postgre</title>
    <link href="http://macintosh-c.coding.me/2019/09/18/Databases/postgre/Mac%E4%B8%8B%E5%AE%89%E8%A3%85Postgre/"/>
    <id>http://macintosh-c.coding.me/2019/09/18/Databases/postgre/Mac下安装Postgre/</id>
    <published>2019-09-18T04:20:29.000Z</published>
    <updated>2019-09-18T04:30:01.011Z</updated>
    
    <content type="html"><![CDATA[<p>项目上用到PostgreSQL，所以在本地搭建环境，记录过程如下，方便查找</p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>使用homebrew，方便快捷：<br>brew install postgresql</p><p>安装完成后，透过安装日记提示可以看到启动方式<br>To have launchd start postgresql now and restart at login:<br>  brew services start postgresql<br>Or, if you don’t want/need a background service you can just run:<br>  pg_ctl -D /usr/local/var/postgres start</p><p>提示了后台和非后台启动的两种方式</p><h2 id="创建数据库和账户"><a href="#创建数据库和账户" class="headerlink" title="创建数据库和账户"></a>创建数据库和账户</h2><p>mac安装postgresql后不会创建用户名数据库，执行命令：createdb</p><p>然后登录PostgreSQL控制台：psql</p><p>使用\l命令列出所有的数据库，看到已存在用户同名数据库、postgres数据库，但是postgres数据库的所有者是当前用户，没有postgres用户。按:q退出查看<br>之后需要做以下几件事：</p><p>创建postgres用户：CREATE USER postgres WITH PASSWORD ‘password’;<br>删除默认生成的postgres数据库：DROP DATABASE postgres;<br>创建属于postgres用户的postgres数据库：CREATE DATABASE postgres OWNER postgres;<br>将数据库所有权限赋予postgres用户：GRANT ALL PRIVILEGES ON DATABASE postgres to postgres;<br>给postgres用户添加创建数据库的属性：ALTER ROLE postgres CREATEDB;<br>这样就可以使用postgres作为数据库的登录用户了，并可以使用该用户管理数据库</p><h2 id="登录控制台指令"><a href="#登录控制台指令" class="headerlink" title="登录控制台指令"></a>登录控制台指令</h2><p>psql -U [user] -d [database] -h [host] -p [post]<br>-U指定用户，-d指定数据库，-h指定服务器，-p指定端口<br>上方直接使用psql登录控制台，实际上使用的是缺省数据</p><p>user：当前mac用户<br>database：用户同名数据库<br>主机：localhost<br>端口号：5432，postgresql的默认端口是5432</p><p>完整的登录命令，比如使用postgres用户登录：<br>psql -U postgres -d postgres</p><h2 id="常用控制台命令"><a href="#常用控制台命令" class="headerlink" title="常用控制台命令"></a>常用控制台命令</h2><p>\password：设置当前登录用户的密码<br>\h：查看SQL命令的解释，比如\h select。<br>\?：查看psql命令列表。<br>\l：列出所有数据库。<br>\c [database_name]：连接其他数据库。<br>\d：列出当前数据库的所有表格。<br>\d [table_name]：列出某一张表格的结构。<br>\du：列出所有用户。<br>\e：打开文本编辑器。<br>\conninfo：列出当前数据库和连接的信息。<br>\password [user]: 修改用户密码<br>\q：退出</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目上用到PostgreSQL，所以在本地搭建环境，记录过程如下，方便查找&lt;/p&gt;
&lt;h2 id=&quot;下载安装&quot;&gt;&lt;a href=&quot;#下载安装&quot; class=&quot;headerlink&quot; title=&quot;下载安装&quot;&gt;&lt;/a&gt;下载安装&lt;/h2&gt;&lt;p&gt;使用homebrew，方便快捷：&lt;
      
    
    </summary>
    
      <category term="Database" scheme="http://macintosh-c.coding.me/categories/Database/"/>
    
    
      <category term="Postgre安装" scheme="http://macintosh-c.coding.me/tags/Postgre%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Spring cloud</title>
    <link href="http://macintosh-c.coding.me/2019/09/16/spring/SpringCloud/springcloud%E5%B0%9D%E8%AF%95/"/>
    <id>http://macintosh-c.coding.me/2019/09/16/spring/SpringCloud/springcloud尝试/</id>
    <published>2019-09-15T20:37:05.000Z</published>
    <updated>2019-09-18T04:40:59.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h2><p>近期把springcloud整体又体验了一把，亲手搭建demo，此处记录一些过程中遇到的细节点。简单描述，便于自己今后理解，具体搭建细节，见下面的学习资源。<br>学习的资源来自：<a href="https://blog.csdn.net/forezp/article/details/70148833" target="_blank" rel="noopener">史上最简单的 SpringCloud 教程</a>，感谢分享<br>本人学习的代码仓库：<a href="https://github.com/Macintosh-c/springcloudstudy" target="_blank" rel="noopener">springcloudstudy</a></p><p>版本：<br>Spring Cloud Finchley; Spring Boot 2.0.3</p><h4 id="1-服务的注册与发现：Eureka以及高可用Eureka"><a href="#1-服务的注册与发现：Eureka以及高可用Eureka" class="headerlink" title="1.服务的注册与发现：Eureka以及高可用Eureka"></a>1.服务的注册与发现：Eureka以及高可用Eureka</h4><p>单机的eureka service创建没有什么难的，利用maven引入spring-cloud-starter-netflix-eureka-server依赖，做好相关的配置，启动项目即可。<br>客户端注册引入spring-cloud-starter-netflix-eureka-client依赖，做好eureka的service地址配置。<br>这里注意两个配置：<br>eureka.client.register-with-eureka: 由于该应用为注册中心，所以设置 为 false, 代表不向注册中心注册自己。<br>eureka.client.fetchRegistry: 由于注册中心的职责就是维护服务实例，它并不需要去检索服务， 所以也设置为 false。<br>高可用的情况下，设为默认true。</p><p>高可用的eureka在配置方面相对复杂一点，尤其是对于eureka.instance.hostname，prefer-ip-address的理解，这里推荐链接<a href="https://blog.csdn.net/wangfei0904306/article/details/79056083" target="_blank" rel="noopener">构建高可用Eureka注册中心</a></p><p>内容如下：<br>1)许多高可用的Eureka配置里都要设置hosts文件，它是必须的吗？<br>不是必须的，配置hosts文件的目的是使各个Eureka的eureka.instance.hostname不同。<br>Eureka互相注册要求各个Eureka实例的eureka.instance.hostname不同，如果相同，则会被Eureka标记为unavailable-replicas。我们最终把eureka.instance.hostname取了${spring.cloud.client.ipAddress}的值，这个值取的是当前启动Eureka的机器的IP，这样虽然配置一样但却自动区分了每台机器的Eureka，这时我们再取prefer-ip-address: true，就可以确保机器优先使用IP而不是到hosts解析域名。</p><p>2)prefer-ip-address是做什么用的？<br>直观来说，如果点击下面注册中心的可用实例列表中的地址，访问结果会分以下几个情况：<br>hostname和prefer-ip-address都没有配置，则访问 主机名:服务名:端口号，如：<a href="http://desktop-1fkok7b:8761/info" target="_blank" rel="noopener">http://desktop-1fkok7b:8761/info</a><br>配置了hostname而没有配置prefer-ip-address，则访问 hostname:服务名:端口号，如：<a href="http://myhostname:8761/info" target="_blank" rel="noopener">http://myhostname:8761/info</a><br>一旦配置了prefer-ip-address，则访问 ipAddress:服务名:端口号，如：<a href="http://172.20.10.3:8761/info" target="_blank" rel="noopener">http://172.20.10.3:8761/info</a><br>在最终方案里我们已经把hostname设置为当前机器IP（${spring.cloud.client.ipAddress}），可以想见prefer-ip-address并不是必须的，但是合理使用它可以避免因为访问主机名而请求不到服务的情况，当然或许还节约了地址解析的损耗（虽然比较小）</p><p>3)为什么把hostname设置为当前机器IP？<br>(这一段的前提是微服务规模在几十个以内)当然也可以设置为域名，但是你要配置hosts(如果配置到所有Docker镜像中显然庞大不够灵活),或者搭建内网DNS服务器（为高可用增加了一层负担），而随着统一配置中心的到来，或许直接使用IP倒是一个相当不错的选择。另外，如果你配置了hostname，那么其它服务注册到你的时候，其它服务的defaultZone要填写defaultZone: <a href="http://yourhostname:8761/eureka/" target="_blank" rel="noopener">http://yourhostname:8761/eureka/</a> 以确保没有问题，但如果你的hostname配置的就是IP，那其它服务的defaultZone里直接填写IP就可以，如defaultZone:<a href="http://172.20.10.3:8761/eureka/" target="_blank" rel="noopener">http://172.20.10.3:8761/eureka/</a> 。</p><p>4)上面说的都是在不同机器上启动Eureka，能在同一台机器上启动多个Eureka吗？<br>当然可以，但是一定要保证各个Eureka的hostname不同，一种办法是常用的配置hosts文件，还有一种，是使用当前机器IP、127.0.0.1和localhost分别作为三个Eureka的hostname，事实证明也是可以的，在文末的Github的项目的no_hosts分支里有相应的实现。但是如果你使用127.0.0.1或localhost，注意一定要设置prefer-ip-address: false 。</p><p>5)我在同一台机器上配置hosts，启动三个Eureka实例并设置prefer-ip-address: true，为什么显示unavailable-replicas?<br>一种原因是，你设置了prefer-ip-address: true，其它服务注册你时应该使用defaultZone:<a href="http://yourIP:8761/eureka/，图中使用的仍然是hostname名，导致错误发生。" target="_blank" rel="noopener">http://yourIP:8761/eureka/，图中使用的仍然是hostname名，导致错误发生。</a><br>另一种原因是，三个Eureka都设置了prefer-ip-address: true，导致最后解析出来的hostname都是相同的IP，使副本不可用。这也是4中为什么要设置prefer-ip-address: false的原因。</p><h4 id="2-服务消费，负载均衡：rest-ribbon或者Feign"><a href="#2-服务消费，负载均衡：rest-ribbon或者Feign" class="headerlink" title="2.服务消费，负载均衡：rest+ribbon或者Feign"></a>2.服务消费，负载均衡：rest+ribbon或者Feign</h4><p>springcloud用的是一种客户端负责均衡的模式，即调用方做了负载均衡的配置，ribbon具有负载均衡的能力。<br>rest+ribbon:引入spring-cloud-starter-netflix-ribbon，通过在restTemplate的Bean上加上@LoadBalanced即可实现负载均衡的效果。<br>Feign:引入spring-cloud-starter-openfeign依赖，声明式的伪Http客户端，它使得写Http客户端变得更简单，同时具备ribbon负载均衡。</p><h4 id="3-断路器：Hystrix，断路器监控：Hystrix-Dashboard，断路器聚合监控：Hystrix-Turbine"><a href="#3-断路器：Hystrix，断路器监控：Hystrix-Dashboard，断路器聚合监控：Hystrix-Turbine" class="headerlink" title="3.断路器：Hystrix，断路器监控：Hystrix Dashboard，断路器聚合监控：Hystrix Turbine"></a>3.断路器：Hystrix，断路器监控：Hystrix Dashboard，断路器聚合监控：Hystrix Turbine</h4><h4 id="4-路由网关：zuul和Spring-Cloud-Gateway"><a href="#4-路由网关：zuul和Spring-Cloud-Gateway" class="headerlink" title="4.路由网关：zuul和Spring Cloud Gateway"></a>4.路由网关：zuul和Spring Cloud Gateway</h4><h4 id="5-分布式配置中心：Spring-Cloud-Config以及其高可用"><a href="#5-分布式配置中心：Spring-Cloud-Config以及其高可用" class="headerlink" title="5.分布式配置中心：Spring Cloud Config以及其高可用"></a>5.分布式配置中心：Spring Cloud Config以及其高可用</h4><p>引入spring-cloud-config-server依赖</p><p>其大体的实现理解是这样的，通过springboot为其指定外部配置文件的加载位置来取代jar包之内的配置内容实现，将需要的配置文件存于特定的git上便于管理，config service启动读取该仓库指定分支，指定项目，指定环境的配置信息供其他的微服务加载配置。结合Spring Cloud Bus可以实现动态的更新微服务配置信息，而不需要重启服务。</p><h4 id="6-消息总线：Spring-Cloud-Bus"><a href="#6-消息总线：Spring-Cloud-Bus" class="headerlink" title="6.消息总线：Spring Cloud Bus"></a>6.消息总线：Spring Cloud Bus</h4><p>Spring Cloud Bus 将分布式的节点用轻量的消息代理连接起来。它可以用于广播配置文件的更改或者服务之间的通讯，也可以用于监控。引入：spring-cloud-starter-bus-amqp</p><p>目前实践的主要作用是实现通知微服务架构的配置文件的更改，其他什么场景下还可以使用该功能，还缺少认知。</p><p>总之其大概作用理解是，通过消息中间件rabbitmq，实现在多服务的情况下，发送一同请求通知，实现所有服务相应的变更。发送通知需要配合spring-boot-starter-actuator依赖。</p><p>优化：Spring Cloud Bus可以指定刷新范围，既然/bus/refresh接口提供了针对服务和实例进行配置更新的参数， 那么我们的架构也可以相应做出一些调整。 在之前的架构中， 服务的配置更新需要 通过向具体服务中的某个实例发送请求， 再触发对整个服务集群的配置更新。 虽然能实现功能， 但是这样的结果是， 我们指定的应用实例会不同千集群中的其他应用实例， 这样会 增加集群内部的复杂度， 不利于将来的运维工作。 比如， 需要对服务实例进行迁移，那么我们不得不修改Web Hook中的配置等。 所以要尽可能地让服务集群中的各个节点是对等的。</p><p>我们主要做了以下这些改动:<br>1)在ConfigServer中也引入SpringCloudBus, 将配置服务端也加入到消息总线中来。<br>2)/bus/refresh请求不再发送到具体服务实例上， 而是发送给Config Server, 并 通过destination参数来指定需要更新配置的服务或实例。<br>通过上面的改动，我们的服务实例不需要再承担触发配置更新的职责。 同时，对于Git 的触发等配置都只需要针对ConfigServer即可， 从而简化了集群上的一些维护工作。</p><h4 id="7-服务链路追踪：Spring-Cloud-Sleuth"><a href="#7-服务链路追踪：Spring-Cloud-Sleuth" class="headerlink" title="7.服务链路追踪：Spring Cloud Sleuth"></a>7.服务链路追踪：Spring Cloud Sleuth</h4><p>引入spring-cloud-starter-zipkin，server-zipkin通过直接起官方jar包即可，可通过浏览器打开9411默认端口查看zipkin界面。其作用类似于我们在开发过程中打印日记时，要加上请求唯一的traceId，便于后续request的跟踪于查询。</p><p>问题：<br>使用spring-cloud-starter-zipkin + 独立部署的zipkin 进行链路追踪，但是如果项目同时使用 rabbitmq和spring-cloud-starter-bus-amqp 会导致 zipkin收集不到信息<br>原因：<br>spring-cloud-starter-bus-amqp 中包含了 spring-rabbit的全部组件。<br>在引入 spring-cloud-starter-zipkin 后，默认与zipkin通信使用的是 http的方式。<br>同时引入 spring-rabbit后，与zipkin通信会变成使用rabbitmq。<br>解决方法：<br>配置文件中加入或修改以下属性。就可以继续使用http的方式向zipkin通信。spring.zipkin.sender.type: web</p><p>Sampler.ALWAYS_SAMPLE<br>Sampler：采样器，根据traceId来判断是否一条trace需要被采样，即上报到zipkin<br>Sampler.ALWAYS_SAMPLE 永远需要被采样 Sampler.NEVER_SAMPLE 永远不采样</p><p>spring.sleuth.sampler.probability=1.0表示以 100% 的概率将链路的数据上传给 Zipkin Server ， 在默认情况下 ， 该值为0.1</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-Cloud&quot;&gt;&lt;a href=&quot;#Spring-Cloud&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud&quot;&gt;&lt;/a&gt;Spring Cloud&lt;/h2&gt;&lt;p&gt;近期把springcloud整体又体验了一把，亲手搭建dem
      
    
    </summary>
    
      <category term="Spring cloud" scheme="http://macintosh-c.coding.me/categories/Spring-cloud/"/>
    
    
      <category term="Spring cloud" scheme="http://macintosh-c.coding.me/tags/Spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>Mac下安装rabbitmq</title>
    <link href="http://macintosh-c.coding.me/2019/09/12/mq/RabbitMQ/Mac%E4%B8%8B%E5%AE%89%E8%A3%85rabbitmq/"/>
    <id>http://macintosh-c.coding.me/2019/09/12/mq/RabbitMQ/Mac下安装rabbitmq/</id>
    <published>2019-09-12T14:14:52.000Z</published>
    <updated>2019-09-12T23:59:06.186Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Mac下安装rabbitmq"><a href="#Mac下安装rabbitmq" class="headerlink" title="Mac下安装rabbitmq"></a>Mac下安装rabbitmq</h4><p>通过brew命令方式来安装</p><ol><li><p>安装homebrew：略</p></li><li><p>通过Brew指令安装RabbitMQ<br>brew install rabbitmq<br>RabbitMQ安装后的路径为：/usr/local/Cellar/rabbitmq/3.7.3 (版本根据安装版本确定)</p></li><li><p>启动rabbitmq<br>进入该目录(/usr/local/Cellar/rabbitmq/3.7.3)之后，输入sbin/rabbitmq-server指令<br>或者：brew services start rabbitmq</p></li><li><p>进入rabbitmq控制终端登录页面<br>浏览器输入<a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a> 即可进入rabbitmq控制终端登录页面，默认用户名和密码为 guest/guest</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Mac下安装rabbitmq&quot;&gt;&lt;a href=&quot;#Mac下安装rabbitmq&quot; class=&quot;headerlink&quot; title=&quot;Mac下安装rabbitmq&quot;&gt;&lt;/a&gt;Mac下安装rabbitmq&lt;/h4&gt;&lt;p&gt;通过brew命令方式来安装&lt;/p&gt;
&lt;ol&gt;
      
    
    </summary>
    
      <category term="rabbitmq" scheme="http://macintosh-c.coding.me/categories/rabbitmq/"/>
    
    
      <category term="rabbitmq安装" scheme="http://macintosh-c.coding.me/tags/rabbitmq%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Maven日常收获总结</title>
    <link href="http://macintosh-c.coding.me/2019/09/12/Maven/Maven%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0%E6%94%B6%E8%8E%B7/"/>
    <id>http://macintosh-c.coding.me/2019/09/12/Maven/Maven日常学习收获/</id>
    <published>2019-09-12T02:55:56.000Z</published>
    <updated>2019-09-12T03:10:09.084Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Maven常用总结"><a href="#Maven常用总结" class="headerlink" title="Maven常用总结"></a>Maven常用总结</h3><h4 id="1-scope的解释"><a href="#1-scope的解释" class="headerlink" title="1.scope的解释"></a>1.scope的解释</h4><p>这里只记录<scope>test</scope>的意思，后续遇到其他runntime（运行时范围），provided（已提供范围），system（系统范围）情况时再精细学习，记录。</p><p>首先默认就是compile，什么都不配置也就是意味着compile。compile表示被依赖项目需要参与当前项目的编译，当然后续的测试，运行周期也参与其中，是一个比较强的依赖。打包的时候通常需要包含进去。</p><p>test（测试范围）<br>scope为test表示依赖项目仅仅参与测试相关的工作，包括测试代码的编译，执行。比较典型的如junit。</p><h4 id="2-DepencyManagement"><a href="#2-DepencyManagement" class="headerlink" title="2.DepencyManagement"></a>2.DepencyManagement</h4><p>DepencyManagement：<br>dependencyManagement让子项目中引用一个依赖而不用显示的列出版本号。Maven会沿着父子层次向上走，直到找到一个拥有dependencyManagement元素的项目，然后它就会使用在这个dependencyManagement元素中指定的版本号。 这样做的好处：统一管理项目的版本号，确保应用的各个项目的依赖和版本一致。</p><p>Dependency：<br>所有生命在dependencies里的依赖都会自动引入，并默认被所有的子项目继承。</p><p>两者区别：</p><ol><li><p>dependencies即使在子项目中不写该依赖项，那么子项目仍然会从父项目中继承该依赖项（全部继承）</p></li><li><p>dependencyManagement里只是声明依赖，并不实现引入，因此子项目需要显示的声明需要用的依赖。如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项，并且version和scope都读取自父pom;另外如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。</p></li></ol><h4 id="3-使用import-scope解决maven继承（单）问题"><a href="#3-使用import-scope解决maven继承（单）问题" class="headerlink" title="3.使用import scope解决maven继承（单）问题"></a>3.使用import scope解决maven继承（单）问题</h4><p>我们知道Maven的继承和Java的继承一样，是无法实现多重继承的，如果10个、20个甚至更多模块继承自同一个模块，那么按照我们之前的做法，这个父模块的dependencyManagement会包含大量的依赖。如果你想把这些依赖分类以更清晰的管理，那就不可能了，import scope依赖能解决这个问题。你可以把dependencyManagement放到单独的专门用来管理依赖的pom中，然后在需要使用依赖的模块中通过import scope依赖，就可以引入dependencyManagement。<br>demo：<br>用于依赖管理的pom：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;project&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;groupId&gt;com.test.sample&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;base-parent1&lt;/artifactId&gt;</span><br><span class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">&lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactid&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.8.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactid&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.16&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><p>通过非继承的方式来引入这段依赖管理配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.test.sample&lt;/groupId&gt;</span><br><span class="line">&lt;artifactid&gt;base-parent1&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line"> </span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactid&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactid&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>注意：import scope只能用在dependencyManagement里面</p><p>这样，父模块的pom就会非常干净，由专门的packaging为pom来管理依赖，也契合的面向对象设计中的单一职责原则。此外，将dependency分类，每一类建立单独的pom文件，以更细化的方式管理依赖。这种做法与面向对象设计中使用组合而非继承也有点相似的味道。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Maven常用总结&quot;&gt;&lt;a href=&quot;#Maven常用总结&quot; class=&quot;headerlink&quot; title=&quot;Maven常用总结&quot;&gt;&lt;/a&gt;Maven常用总结&lt;/h3&gt;&lt;h4 id=&quot;1-scope的解释&quot;&gt;&lt;a href=&quot;#1-scope的解释&quot; cla
      
    
    </summary>
    
      <category term="Maven" scheme="http://macintosh-c.coding.me/categories/Maven/"/>
    
    
      <category term="Maven" scheme="http://macintosh-c.coding.me/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用基础指令</title>
    <link href="http://macintosh-c.coding.me/2019/09/05/Linux/Linux%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/"/>
    <id>http://macintosh-c.coding.me/2019/09/05/Linux/Linux常用基础指令/</id>
    <published>2019-09-05T05:56:56.000Z</published>
    <updated>2019-09-11T06:48:55.674Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux常用基础指令"><a href="#Linux常用基础指令" class="headerlink" title="Linux常用基础指令"></a>Linux常用基础指令</h3><ol><li><p>查找文件<br>find * -name filename.txt<br>根据名称查找当前目录下的filename.txt文件</p></li><li><p>查看一个程序是否运行<br>ps -ef | grep tomcat<br>查看所有有关tomcat的进程</p></li><li><p>终止线程<br>kill -9 19979<br>终止线程号位19979的线程</p></li><li><p>查看文件，包含隐藏文件<br>ls -al</p></li><li><p>当前工作目录<br>pwd</p></li><li><p>复制文件包括其子文件到自定目录<br>cp -r  sourceFolder targetFolder</p></li><li><p>创建目录<br>mkdir newfolder</p></li><li><p>删除目录（此目录是空目录）<br>rmdir deleteEmptyFolder</p></li><li><p>删除文件包括其子文件<br>rm -rf daleteFile</p></li><li><p>移动文件<br>mv /temp/movefile /targetFolder<br>扩展重命名 mv oldNameFile newNameFile</p></li><li><p>切换用户<br>su -username</p></li><li><p>修改文件权限<br>chmod 777 file.java<br>//file.java的权限-rwxrwxrwx，r表示读、w表示写、x表示可执行</p></li><li><p>压缩文件<br>tar -czf test.tar.gz /test1/test2</p></li><li><p>列出压缩文件列表<br>tar -tzf test.tar.gz</p></li><li><p>解压文件<br>tar -zxvf test.tar.gz</p></li><li><p>查看文件头10行<br>head -n 10 example.txt</p></li><li><p>查看文件尾10行<br>tail -n 10 example.txt</p></li><li><p>查看日记文件<br>tail -f exmaple.log<br>//这个命令会自动显示新增内容，屏幕只显示10行内容的（可设置）。</p></li><li><p>启动Vi编辑器<br>vi</p></li><li><p>查看系统当前时间<br>date<br>命令会输出 周几 几月 几日 时间 和 时间显示格式 和年份<br>Thu Sep  5 14:09:04 CST 2019</p></li></ol><p>date +%Y-%m-%d<br>显示如下：2019-09-05</p><ol start="21"><li><p>解压zip文件<br>unzip -oq</p></li><li><p>解压gz文件<br>zcat java.gz &gt; java.log</p></li><li><p>查看线程个数（方便查看程序是否有误）<br>ps -Lf 端口号 | wc -l</p></li><li><p>查看磁盘空间情况<br>df -h<br>sudo du -h –max-depth=1</p></li><li><p>查看服务器的联通性<br>ping 地址<br>telnet 10.87.18.9 443</p></li><li><p>显示已经挂载的分区列表 </p><p>df -h</p></li><li><p>显示某路径下的文件占用空间情况</p><p>cd /var/log</p><p>du -sh *</p><p>删除占用空间大的</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux常用基础指令&quot;&gt;&lt;a href=&quot;#Linux常用基础指令&quot; class=&quot;headerlink&quot; title=&quot;Linux常用基础指令&quot;&gt;&lt;/a&gt;Linux常用基础指令&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;查找文件&lt;br&gt;find * -name file
      
    
    </summary>
    
      <category term="Linux" scheme="http://macintosh-c.coding.me/categories/Linux/"/>
    
    
      <category term="Linux基础" scheme="http://macintosh-c.coding.me/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Mac下安装python3</title>
    <link href="http://macintosh-c.coding.me/2019/08/28/python/Mac%E4%B8%8BPython3%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://macintosh-c.coding.me/2019/08/28/python/Mac下Python3的安装/</id>
    <published>2019-08-28T07:19:52.000Z</published>
    <updated>2019-08-28T07:32:40.466Z</updated>
    
    <content type="html"><![CDATA[<p>mac系统自带python，不过以当前mac系统的最新版本为例，自带的python版本都是2.<em>版本，虽然不影响老版本项目的运行，但是python最新的3.</em>版本的一些语法与2.*版本并不相同，所以本篇为在现有mac下安装python3</p><h2 id="默认的python2"><a href="#默认的python2" class="headerlink" title="默认的python2"></a>默认的python2</h2><p> Mac系统自带python路径为／System／Library／Frameworks／Python.framework/Version<br> 也可通过命令：python查看</p><h2 id="安装python3"><a href="#安装python3" class="headerlink" title="安装python3"></a>安装python3</h2><p>使用神器homebrew，还不熟悉此神器的小伙伴请自行百度<br>1.安装前先搜索一下是否已经存在python3的包：brew search python3</p><p>2.已经存在，我们可以直接安装了：brew install python3<br>成功安装会提示python3的安装路径，这时使用python命令查看版本还是python2，使用：python3命令才会看到新安装的python版本。</p><h2 id="配置python3为默认版本"><a href="#配置python3为默认版本" class="headerlink" title="配置python3为默认版本"></a>配置python3为默认版本</h2><p>1.修改~/.bash_profile文件，添加：<br>alias python=”/usr/local/bin/python3.7”</p><p>2.使用命令，使其生效：source ~/.bash_profile</p><p>这时再直接使用python命令查看，便看到为python3的版本了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;mac系统自带python，不过以当前mac系统的最新版本为例，自带的python版本都是2.&lt;em&gt;版本，虽然不影响老版本项目的运行，但是python最新的3.&lt;/em&gt;版本的一些语法与2.*版本并不相同，所以本篇为在现有mac下安装python3&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
      <category term="python" scheme="http://macintosh-c.coding.me/categories/python/"/>
    
    
      <category term="python安装" scheme="http://macintosh-c.coding.me/tags/python%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Mac下安装Mysql</title>
    <link href="http://macintosh-c.coding.me/2019/08/20/Databases/mysql/Mac%E4%B8%8B%E5%AE%89%E8%A3%85Mysql/"/>
    <id>http://macintosh-c.coding.me/2019/08/20/Databases/mysql/Mac下安装Mysql/</id>
    <published>2019-08-20T05:51:29.000Z</published>
    <updated>2019-08-22T02:35:56.681Z</updated>
    
    <content type="html"><![CDATA[<p>由于前段时间工作的笔记本从windows转到了mac上来，所以一方面在熟悉适应mac的同时，另一方面需要重新安装一些基础设施，像mysql，redis等。本篇记载如何在mac上安装单机mysql。</p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>1.打开网址，<a href="https://www.mysql.com" target="_blank" rel="noopener">https://www.mysql.com</a> ，点击downloads之后跳转到<a href="https://www.mysql.com/downloads" target="_blank" rel="noopener">https://www.mysql.com/downloads</a> 选择Community选项，点击MySQL Community Server，再点击5.7版本的数据库，确认好要下载的版本和操作系统，点击Download，如下：</p><p><img src="/img/Databases/mysql/1566285632459.jpg" alt="image"></p><p>2.双击下载好的dmg文件，会弹出pkg弹框，再双击pkg图标，进入安装界面，在安装界面上一路继续，最后就安装成功了。如下图：</p><p><img src="/img/Databases/mysql/1566291291898.jpg" alt="image"></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>1、在终端切换到根目录，编辑./.bash_profile文件</p><p>$ cd ~<br>$ vim ./.bash_profile<br>2、进入vim 编辑环境。 按下i 进入 insert 模式 ，输入</p><p>export PATH=$PATH:/usr/local/mysql/bin<br>export PATH=$PATH:/usr/local/mysql/support-files<br>3、按下esc 退出 insert 模式，输入:wq保存配置文件。</p><p>:wq<br>4、在终端界面下输入以下命令，让配置文件的修改生效，并查看环境变量是否设置成功</p><p>$ source ~/.bash_profile<br>$ echo $PATH</p><h2 id="mysql服务启停以及状态查看"><a href="#mysql服务启停以及状态查看" class="headerlink" title="mysql服务启停以及状态查看"></a>mysql服务启停以及状态查看</h2><p>停止MySQL服务<br>sudo mysql.server stop</p><p>重启MySQL服务<br>sudo mysql.server restart</p><p>查看MySQL服务状态<br>sudo mysql.server status</p><p>启动MySQL服务<br>sudo mysql.server start</p><h2 id="初始化设置"><a href="#初始化设置" class="headerlink" title="初始化设置"></a>初始化设置</h2><p>启动mysql服务后，进入指令：mysql -u root -p,输入安装成功时显示的初始密码，出现下图则成功进入：</p><p><img src="/img/Databases/mysql/1566293062364.jpg" alt="image"></p><h3 id="1-修改密码"><a href="#1-修改密码" class="headerlink" title="1.修改密码"></a>1.修改密码</h3><p>首次进入mysql执行sql指令时会提示error，要更新初始root账户的密码，错误提示如下：<br>ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</p><p>通过指令：set password = password(‘root’);修改密码为root即可。</p><p>退出mysql：exit</p><h3 id="2-修改字符集"><a href="#2-修改字符集" class="headerlink" title="2.修改字符集"></a>2.修改字符集</h3><p>通过下面指令可以查看此时默认的字符集，如图：<br>$mysql&gt;&gt;&gt;show variables like ‘%char%’;</p><p><img src="/img/Databases/mysql/1566293114167.jpg" alt="image"></p><p>后续在插入中文字的情况下有可能会产生乱码问题，所以这边需要改下配置，方法如下：</p><p>在/etc的目录下新建my.cnf，内容如下：</p><p>[mysqld]<br>default-storage-engine=INNODB<br>character-set-server=utf8<br>port = 3306</p><p>[client]<br>default-character-set=utf8</p><p>建好后保存退出，重启mysql即可，再次通过指令查看如下：</p><p><img src="/img/Databases/mysql/1566293132081.jpg" alt="image"></p><p>完毕！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于前段时间工作的笔记本从windows转到了mac上来，所以一方面在熟悉适应mac的同时，另一方面需要重新安装一些基础设施，像mysql，redis等。本篇记载如何在mac上安装单机mysql。&lt;/p&gt;
&lt;h2 id=&quot;下载安装&quot;&gt;&lt;a href=&quot;#下载安装&quot; clas
      
    
    </summary>
    
      <category term="Database" scheme="http://macintosh-c.coding.me/categories/Database/"/>
    
    
      <category term="mysql安装" scheme="http://macintosh-c.coding.me/tags/mysql%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>java基础之fastjson（二）</title>
    <link href="http://macintosh-c.coding.me/2018/09/10/java/basic/fastjson2/"/>
    <id>http://macintosh-c.coding.me/2018/09/10/java/basic/fastjson2/</id>
    <published>2018-09-10T14:10:52.000Z</published>
    <updated>2019-08-20T06:16:05.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSONField-注解说明"><a href="#JSONField-注解说明" class="headerlink" title="@JSONField 注解说明"></a>@JSONField 注解说明</h1><h3 id="导入-JSONField-注解："><a href="#导入-JSONField-注解：" class="headerlink" title="导入@JSONField 注解："></a>导入@JSONField 注解：</h3><p><code>import com.alibaba.fastjson.annotation.JSONField;</code></p><h3 id="常见用法："><a href="#常见用法：" class="headerlink" title="常见用法："></a>常见用法：</h3><h4 id="1-指定字段的名称"><a href="#1-指定字段的名称" class="headerlink" title="1. 指定字段的名称"></a>1. 指定字段的名称</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@JSONField(name=&quot;role_name&quot;)  </span><br><span class="line">private String roleName;</span><br></pre></td></tr></table></figure><h4 id="2-使用format制定日期格式"><a href="#2-使用format制定日期格式" class="headerlink" title="2. 使用format制定日期格式"></a>2. 使用format制定日期格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class A &#123;  </span><br><span class="line">     // 配置date序列化和反序列使用yyyyMMdd日期格式  </span><br><span class="line">     @JSONField(format=&quot;yyyyMMdd&quot;)  </span><br><span class="line">     public Date date;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-指定字段的顺序"><a href="#3-指定字段的顺序" class="headerlink" title="3. 指定字段的顺序"></a>3. 指定字段的顺序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.annotation.JSONField;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by gary on 16/6/21.</span><br><span class="line"> */</span><br><span class="line">public class FieldSequence &#123;</span><br><span class="line"></span><br><span class="line">    @JSONField(ordinal=1,name = &quot;name_1&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    @JSONField(ordinal=2)</span><br><span class="line">    private int age;</span><br><span class="line">    @JSONField(ordinal=3)</span><br><span class="line">    private String gender;</span><br><span class="line"></span><br><span class="line">    public FieldSequence(String name,int age,String gender)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">        this.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getGender() &#123;</span><br><span class="line">        return gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setGender(String gender) &#123;</span><br><span class="line">        this.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">        FieldSequence fieldSequence = new FieldSequence(&quot;lily&quot;,20,&quot;woman&quot;);</span><br><span class="line">        System.out.println(JSON.toJSONString(fieldSequence));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性中不使用@JSONField注解输出如下:<br><code>{&quot;age&quot;:20,&quot;gender&quot;:&quot;woman&quot;,&quot;name&quot;:&quot;lily&quot;}  //按属性字母顺序排序</code><br>使用注解后，上面程序输出如下:<br><code>{&quot;name_1&quot;:&quot;lily&quot;,&quot;age&quot;:20,&quot;gender&quot;:&quot;woman&quot;}</code></p><h4 id="4-使用serialize-deserialize指定字段不序列化"><a href="#4-使用serialize-deserialize指定字段不序列化" class="headerlink" title="4. 使用serialize/deserialize指定字段不序列化"></a>4. 使用serialize/deserialize指定字段不序列化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class A &#123;</span><br><span class="line">      @JSONField(serialize=false)</span><br><span class="line">      public Date date;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JSONField-注解说明&quot;&gt;&lt;a href=&quot;#JSONField-注解说明&quot; class=&quot;headerlink&quot; title=&quot;@JSONField 注解说明&quot;&gt;&lt;/a&gt;@JSONField 注解说明&lt;/h1&gt;&lt;h3 id=&quot;导入-JSONField-注解
      
    
    </summary>
    
      <category term="java基础" scheme="http://macintosh-c.coding.me/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="fastjson" scheme="http://macintosh-c.coding.me/tags/fastjson/"/>
    
  </entry>
  
  <entry>
    <title>java基础之fastjson（一）</title>
    <link href="http://macintosh-c.coding.me/2018/09/10/java/basic/fastjson/"/>
    <id>http://macintosh-c.coding.me/2018/09/10/java/basic/fastjson/</id>
    <published>2018-09-10T13:51:56.000Z</published>
    <updated>2019-08-20T06:07:36.284Z</updated>
    
    <content type="html"><![CDATA[<h3 id="maven项目pom配置："><a href="#maven项目pom配置：" class="headerlink" title="maven项目pom配置："></a>maven项目pom配置：</h3><pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;    &lt;version&gt;1.2.32&lt;/version&gt;&lt;/dependency&gt;</code></pre><h3 id="使用Demo，在Java环境下验证"><a href="#使用Demo，在Java环境下验证" class="headerlink" title="使用Demo，在Java环境下验证"></a>使用Demo，在Java环境下验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class User&#123;  </span><br><span class="line">    private int id;  </span><br><span class="line">    private String name;  </span><br><span class="line">    public int getId() &#123;  </span><br><span class="line">        return id;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void setId(int id) &#123;  </span><br><span class="line">        this.id = id;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public String getName() &#123;  </span><br><span class="line">        return name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void setName(String name) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;  </span><br><span class="line">import java.util.List;  </span><br><span class="line">  </span><br><span class="line">class Group&#123;  </span><br><span class="line">    private int id;  </span><br><span class="line">    private String name;  </span><br><span class="line">    private List&lt;User&gt; list = new ArrayList&lt;User&gt;();  </span><br><span class="line">    public int getId() &#123;  </span><br><span class="line">        return id;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void setId(int id) &#123;  </span><br><span class="line">        this.id = id;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public String getName() &#123;  </span><br><span class="line">        return name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void setName(String name) &#123;  </span><br><span class="line">        this.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public List&lt;User&gt; getList() &#123;  </span><br><span class="line">        return list;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void setList(List&lt;User&gt; list) &#123;  </span><br><span class="line">        this.list = list;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Weibo &#123;  </span><br><span class="line">    private String id;  </span><br><span class="line">    private String city;  </span><br><span class="line"> </span><br><span class="line">    public Weibo(String id, String city) &#123;  </span><br><span class="line">        this.id = id;  </span><br><span class="line">        this.city = city;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public Weibo() &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getId() &#123;  </span><br><span class="line">        return id;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setId(String id) &#123;  </span><br><span class="line">        this.id = id;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getCity() &#123;  </span><br><span class="line">        return city;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setCity(String city) &#123;  </span><br><span class="line">        this.city = city;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"> </span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.JSONArray;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line"> </span><br><span class="line">//下面是FastJson的简介：常用的方法！</span><br><span class="line">//  Fastjson API入口类是com.alibaba.fastjson.JSON，常用的序列化操作都可以在JSON类上的静态方法直接完成。</span><br><span class="line">//public static final Object parse(String text); // 把JSON文本parse为JSONObject或者JSONArray </span><br><span class="line">//public static final JSONObject parseObject(String text)； // 把JSON文本parse成JSONObject    </span><br><span class="line">//public static final &lt;T&gt; T parseObject(String text, Class&lt;T&gt; clazz); // 把JSON文本parse为JavaBean </span><br><span class="line">//public static final JSONArray parseArray(String text); // 把JSON文本parse成JSONArray </span><br><span class="line">//public static final &lt;T&gt; List&lt;T&gt; parseArray(String text, Class&lt;T&gt; clazz); //把JSON文本parse成JavaBean集合 </span><br><span class="line">//public static final String toJSONString(Object object); // 将JavaBean序列化为JSON文本 </span><br><span class="line">//public static final String toJSONString(Object object, boolean prettyFormat); // 将JavaBean序列化为带格式的JSON文本 </span><br><span class="line">//public static final Object toJSON(Object javaObject); 将JavaBean转换为JSONObject或者JSONArray（和上面方法的区别是返回值是不一样的）</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 这是关于FastJson的一个使用Demo，在Java环境下验证的；</span><br><span class="line"> * 使用的时候可以参照这个例子进行回忆！</span><br><span class="line"> * 备注：下面写的Json格式的数据&quot;前面的\，意思是告诉编译器忽略掉它后面的&quot;。</span><br><span class="line"> * 后面定义有三个类：User、Group、Weibo</span><br><span class="line"> * @author liuzhao</span><br><span class="line"> */</span><br><span class="line">public class JsonDemo &#123;</span><br><span class="line"> </span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">json2JsonObjectM1();//将Json文本数据信息转换为JsonObject对象，然后利用键值对的方式获取信息</span><br><span class="line">json2BeanM2();//将Json文本数据转换为JavaBean数据！</span><br><span class="line">json2JSONArrayM3();//将json数据转化为JSONArray: </span><br><span class="line">json2JavaBeanM4();//将JSON文本转换为JavaBean的集合；转换为单纯的1个Object：parseObject(String text, Class&lt;T&gt; clazz); </span><br><span class="line">bean2JsonM5();//将JavaBean转换为Json格式的数据/Json文本 用户数据的传递：例如上传服务器</span><br><span class="line">bean2JSONObjectM6();//将JavaBean转换为JSON对象</span><br><span class="line">complexExampleM7();//一个相对复杂的例子：</span><br><span class="line">complex2JsonM8();//一个复杂的Object到Json的Demo</span><br><span class="line">complexMap2JsonM9();//将Map数据转换为JsonString的Demo；这个对RedBoy服务端不就直接破了嘛！</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 将Json文本数据信息转换为JsonObject对象，然后利用键值对的方式获取信息</span><br><span class="line"> */</span><br><span class="line">private static void json2JsonObjectM1() &#123;</span><br><span class="line">//一个JsonObject文本数据</span><br><span class="line">String s = &quot;&#123;\&quot;name\&quot;:\&quot;liuzhao\&quot;&#125;&quot;;</span><br><span class="line">//将JsonObject数据转换为Json</span><br><span class="line">JSONObject object = JSON.parseObject(s);</span><br><span class="line">//利用键值对的方式获取到值</span><br><span class="line">System.out.println(object.get(&quot;name&quot;));</span><br><span class="line">/**</span><br><span class="line"> * 打印：</span><br><span class="line"> * liuzhao</span><br><span class="line"> */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 将Json文本数据转换为JavaBean数据！</span><br><span class="line"> * 需要注意的是：这时候的Json文本信息中的键的名称必须和JavaBean中的字段名称一样！键中没有的在这个JavaBean中就显示为null！</span><br><span class="line"> */</span><br><span class="line">private static void json2BeanM2() &#123;</span><br><span class="line">String s = &quot;&#123;\&quot;id\&quot;:\&quot;0375\&quot;,\&quot;city\&quot;:\&quot;平顶山\&quot;&#125;&quot;;</span><br><span class="line">//一个简单方便 的方法将Json文本信息转换为JsonObject对象的同时转换为JavaBean对象！</span><br><span class="line">Weibo weibo = JSON.parseObject(s, Weibo.class);//Weibo类在下边定义</span><br><span class="line">System.out.println(weibo.getId());</span><br><span class="line">System.out.println(weibo.getCity());</span><br><span class="line">//打印的结果0375</span><br><span class="line">//平顶山</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 将Map类型的数据转换为JsonString</span><br><span class="line"> */</span><br><span class="line">private static void complexMap2JsonM9() &#123;</span><br><span class="line">Group group = new Group();</span><br><span class="line">group.setId(1);</span><br><span class="line">group.setName(&quot;group&quot;);</span><br><span class="line"></span><br><span class="line">User user1 = new User();</span><br><span class="line">user1.setId(2);</span><br><span class="line">user1.setName(&quot;user1&quot;);</span><br><span class="line"> </span><br><span class="line">User user2 = new User();</span><br><span class="line">user2.setId(3);</span><br><span class="line">user2.setName(&quot;user2&quot;);</span><br><span class="line">group.getList().add(user1);</span><br><span class="line">group.getList().add(user2);</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, Object&gt; map = new HashMap&lt;Integer,Object&gt;();</span><br><span class="line">map.put(1, &quot;No.1&quot;);</span><br><span class="line">map.put(2, &quot;No.2&quot;);</span><br><span class="line">map.put(3, group.getList());</span><br><span class="line"></span><br><span class="line">String jsonString = JSON.toJSONString(map);</span><br><span class="line">System.out.println(jsonString);</span><br><span class="line">/**</span><br><span class="line"> *  输出：&#123;1:&quot;No.1&quot;,2:&quot;No.2&quot;,3:[&#123;&quot;id&quot;:2,&quot;name&quot;:&quot;user1&quot;&#125;,&#123;&quot;id&quot;:3,&quot;name&quot;:&quot;user2&quot;&#125;]&#125;</span><br><span class="line"> */</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 由一个复杂的Object到Json的Demo</span><br><span class="line"> */</span><br><span class="line">private static void complex2JsonM8() &#123;</span><br><span class="line">Group group = new Group();</span><br><span class="line">group.setId(1);</span><br><span class="line">group.setName(&quot;group&quot;);</span><br><span class="line"></span><br><span class="line">User user1 = new User();</span><br><span class="line">user1.setId(2);</span><br><span class="line">user1.setName(&quot;user1&quot;);</span><br><span class="line"> </span><br><span class="line">User user2 = new User();</span><br><span class="line">user2.setId(3);</span><br><span class="line">user2.setName(&quot;user2&quot;);</span><br><span class="line">group.getList().add(user1);</span><br><span class="line">group.getList().add(user2);</span><br><span class="line">String jsonString = JSON.toJSONString(group);</span><br><span class="line">System.out.println(jsonString);</span><br><span class="line">/**</span><br><span class="line"> *  输出：&#123;&quot;id&quot;:1,&quot;list&quot;:[&#123;&quot;id&quot;:2,&quot;name&quot;:&quot;user1&quot;&#125;,&#123;&quot;id&quot;:3,&quot;name&quot;:&quot;user2&quot;&#125;],&quot;name&quot;:&quot;group&quot;&#125;</span><br><span class="line"> */</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 一个相对复杂的例子：</span><br><span class="line"> * JSON文本数据：</span><br><span class="line"> * 首先是JSONObject，转换为JSONArray；</span><br><span class="line"> * 然后将JSONArray转换为JavaBean</span><br><span class="line"> */</span><br><span class="line">private static void complexExampleM7() &#123;</span><br><span class="line">String s = &quot;&#123;js:[&#123;id:\&quot;110000\&quot;,\&quot;city\&quot;:\&quot;北#001京市\&quot;&#125;,&#123;id:\&quot;110000\&quot;,\&quot;city\&quot;:\&quot;北#002京市\&quot;&#125;&quot;</span><br><span class="line">+ &quot;,&#123;id:\&quot;110000\&quot;,\&quot;city\&quot;:\&quot;北#002京市\&quot;&#125;,&#123;id:\&quot;110000\&quot;,\&quot;city\&quot;:\&quot;北#002京市\&quot;&#125;,&quot;</span><br><span class="line">+ &quot;&#123;id:\&quot;110000\&quot;,\&quot;city\&quot;:\&quot;#006北#005京市\&quot;&#125;,&quot;</span><br><span class="line">+ &quot;&#123;id:\&quot;110000\&quot;,\&quot;city\&quot;:\&quot;北#002京市\&quot;&#125;,&quot;</span><br><span class="line">+ &quot;&#123;id:\&quot;110000\&quot;,\&quot;city\&quot;:\&quot;北#002京市\&quot;&#125;,&#123;id:\&quot;120000\&quot;,\&quot;city\&quot;:\&quot;天#009津市\&quot;&#125;]&#125;&quot;;</span><br><span class="line"></span><br><span class="line">JSONObject object = JSON.parseObject(s);</span><br><span class="line">Object jsonArray = object.get(&quot;js&quot;);</span><br><span class="line">System.out.println(jsonArray);</span><br><span class="line">List&lt;Weibo&gt; list = JSON.parseArray(jsonArray+&quot;&quot;, Weibo.class);</span><br><span class="line">for (Weibo weibo : list) &#123;</span><br><span class="line">System.out.println(weibo.getCity());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 将JavaBean转换为JSON对象</span><br><span class="line"> */</span><br><span class="line">private static void bean2JSONObjectM6() &#123;</span><br><span class="line">Weibo weibo = new Weibo(&quot;0373&quot;, &quot;洛阳&quot;);</span><br><span class="line">JSONObject json = (JSONObject) JSON.toJSON(weibo);</span><br><span class="line">System.out.println(json.get(&quot;id&quot;));</span><br><span class="line">/**</span><br><span class="line"> * 打印：</span><br><span class="line"> * 0373</span><br><span class="line"> */</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 将JSON文本转换为JavaBean的集合；</span><br><span class="line"> * 内部实现肯定是：首先转换为JSONArray，然后再转换为List集合</span><br><span class="line"> */</span><br><span class="line">private static void json2JavaBeanM4() &#123;</span><br><span class="line">String s = &quot;[&#123;\&quot;id\&quot;:\&quot;0375\&quot;,\&quot;city\&quot;:\&quot;平顶山\&quot;&#125;,&#123;\&quot;id\&quot;:\&quot;0377\&quot;,\&quot;city\&quot;:\&quot;南阳\&quot;&#125;]&quot;;</span><br><span class="line">List&lt;Weibo&gt; list = JSON.parseArray(s, Weibo.class);</span><br><span class="line">for (Weibo weibo : list) &#123;</span><br><span class="line">System.out.println(weibo.getCity());</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 打印：</span><br><span class="line"> * 平顶山</span><br><span class="line"> * 南阳</span><br><span class="line"> */</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 将json数据转化为JSONArray:</span><br><span class="line"> * 注意：获取到JSONArray之后（我们这里只是获取到JSONArray而不是JavaBean的List集合）</span><br><span class="line"> * 获取JSONArray中的数据转换为String类型需要在外边加&quot;&quot;;</span><br><span class="line"> */</span><br><span class="line">private static void json2JSONArrayM3() &#123;</span><br><span class="line">String s = &quot;[&#123;\&quot;id\&quot;:\&quot;0375\&quot;,\&quot;city\&quot;:\&quot;平顶山\&quot;&#125;,&#123;\&quot;id\&quot;:\&quot;0377\&quot;,\&quot;city\&quot;:\&quot;南阳\&quot;&#125;]&quot;;</span><br><span class="line">//将JSON文本转换为JSONArray</span><br><span class="line">JSONArray array = JSON.parseArray(s);</span><br><span class="line">//这行必须写：必须加上+&quot;&quot;;不然会报出类型强转异常！</span><br><span class="line">String str = array.get(1)+&quot;&quot;;</span><br><span class="line">System.out.println(array.get(0));</span><br><span class="line">JSONObject object = JSON.parseObject(str);</span><br><span class="line">System.out.println(object.get(&quot;id&quot;));</span><br><span class="line">/**</span><br><span class="line"> * &#123;&quot;city&quot;:&quot;平顶山&quot;,&quot;id&quot;:&quot;0375&quot;&#125;</span><br><span class="line">0377</span><br><span class="line"> */</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 将JavaBean转换为Json格式的数据/Json文本</span><br><span class="line"> * 用户数据的传递：例如上传服务器</span><br><span class="line"> */</span><br><span class="line">private static void bean2JsonM5() &#123;</span><br><span class="line">Weibo weibo = new Weibo(&quot;123456&quot;, &quot;上海&quot;);</span><br><span class="line">String string = JSON.toJSONString(weibo);</span><br><span class="line">System.out.println(string);</span><br><span class="line">/**</span><br><span class="line"> * 打印：</span><br><span class="line"> * &#123;&quot;city&quot;:&quot;上海&quot;,&quot;id&quot;:&quot;123456&quot;&#125;</span><br><span class="line"> */</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;maven项目pom配置：&quot;&gt;&lt;a href=&quot;#maven项目pom配置：&quot; class=&quot;headerlink&quot; title=&quot;maven项目pom配置：&quot;&gt;&lt;/a&gt;maven项目pom配置：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
      
    
    </summary>
    
      <category term="java基础" scheme="http://macintosh-c.coding.me/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="fastjson" scheme="http://macintosh-c.coding.me/tags/fastjson/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP</title>
    <link href="http://macintosh-c.coding.me/2018/09/09/spring/Springboot/spring-AOP/"/>
    <id>http://macintosh-c.coding.me/2018/09/09/spring/Springboot/spring-AOP/</id>
    <published>2018-09-08T17:29:05.000Z</published>
    <updated>2019-08-20T06:10:46.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-AOP-介绍"><a href="#Spring-AOP-介绍" class="headerlink" title="Spring AOP 介绍"></a>Spring AOP 介绍</h2><p>AOP 为Aspect Oriented Programming的缩写，被成为面向切面编程。<br>AOP主要用于处理共通逻辑，例如日记记录，性能统计，安全控制，事务处理，异常处理等等。AOP可以将这些共通逻辑从普通业务逻辑代码中分离出来，这样在日后修改这些逻辑的时候就不会影响普通业务逻辑的代码。<br>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><h2 id="方面"><a href="#方面" class="headerlink" title="方面"></a>方面</h2><p>方面是指封装共通处理的组件，该组件被作用到其他目标组件方法上。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>目标是指被一个或多个方面所作用的对象。</p><h2 id="切入点"><a href="#切入点" class="headerlink" title="切入点"></a>切入点</h2><p>切入点是用于指定哪些组件和方法使用方面功能，在Spring中利用一个表达式指定切入目标。<br>Spring提高了以下常用的切入点表达式：</p><ul><li>方法限定表达式<br>execution（修饰符？返回类型 方法名（参数）throws 异常类型？）</li><li>类型限定表达式<br>within（包名.类型）</li><li>Bean名称限定表达式<br>bean（”Bean的id或name属性值”）</li></ul><h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><p>通知是用于指定方面组件和目标组件作用的时机。例如方面功能在目标方法之前或之后执行等时机。<br>Spring框架提供以下几种类型的通知：</p><ul><li>前置通知：先执行方面功能再执行目标功能</li><li>后置通知：先执行目标功能再执行方面功能（目标无异常才执行方面）</li><li>最终通知：先执行目标功能在执行方面功能（目标有无异常都执行方面）</li><li>异常通知：先执行目标，抛出后执行方面</li><li>环绕通知：先执行方面前置通知，然后执行目标(ProceedingJoinPoint.proceed())，最后再执行方面后置部分</li></ul><h2 id="AOP实现原理"><a href="#AOP实现原理" class="headerlink" title="AOP实现原理"></a>AOP实现原理</h2><p>Spring AOP实现主要是基于动态代理技术。当Spring采用AOP配置后，Spring容器返回的目标对象，实际上是Spring利用动态代理技术生成的一个代理类型，代理类重写了原目标组件方法的功能，在代理类中调用方面对象功能和目标对象功能。两种动态代理实现：</p><ul><li>利用cglib工具包</li><li>利用JDK Proxy API</li></ul><h2 id="注解实现AOP"><a href="#注解实现AOP" class="headerlink" title="注解实现AOP"></a>注解实现AOP</h2><p>开发步骤：</p><ol><li>创建方面组件<br>—创建一个类，充当方面组件，实现统用业务逻辑。</li><li>声明方面组件<br>—在applicationContext.xml中开启AOP注解扫描：<a href="aop:aspectj-autoproxy/" target="_blank" rel="noopener">aop:aspectj-autoproxy/</a><br>—使用@Component注解标识这个类，将其声明为组件。<br>—使用@Aspect注解标识这个类，将其声明为方面组件。</li><li>使用方面组件<br>—在组件的方法上，使用注解将方面组件作用到目标组件的方法上，并设置通知类型以确认方面组件调用的时机。</li></ol><ul><li>前置通知，方面组件方法上增加注解：<br>@Before(“within(controller..*)”)<br>public void log(){}</li><li>后置通知、最终通知使用方法与前置一致，只需将注解改为@AfterReturning、@After即可。</li><li>环绕通知<br>@Around(“within(controller..*)”)<br>public Object log(ProceedingJoinPoint p)throws Throwable{<br>//此处代码在目标组件前执行<br>Object obj=p.proceed();//执行目标组件方法<br>//此处代码在目标组件后执行<br>return obj;<br>}</li><li>异常通知：<br>@AfterThrowing(pointcut=”within(controller..*)”,throwing=”e”)<br>public void log(Exception e){}</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-AOP-介绍&quot;&gt;&lt;a href=&quot;#Spring-AOP-介绍&quot; class=&quot;headerlink&quot; title=&quot;Spring AOP 介绍&quot;&gt;&lt;/a&gt;Spring AOP 介绍&lt;/h2&gt;&lt;p&gt;AOP 为Aspect Oriented Progr
      
    
    </summary>
    
      <category term="Spring" scheme="http://macintosh-c.coding.me/categories/Spring/"/>
    
    
      <category term="Spring aop" scheme="http://macintosh-c.coding.me/tags/Spring-aop/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis中的${}和#{}区别与用法</title>
    <link href="http://macintosh-c.coding.me/2018/08/29/mybatis/mybatis%E4%B8%AD-%E5%92%8C-%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E7%94%A8%E6%B3%95/"/>
    <id>http://macintosh-c.coding.me/2018/08/29/mybatis/mybatis中-和-的区别与用法/</id>
    <published>2018-08-29T13:51:11.000Z</published>
    <updated>2019-08-20T06:09:45.478Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis本身是基于JDBC封装的.<br>动态sql，是其的强大特性之一.<br>且mybatis在默认情况下，是会对所有的sql进行预编译的.</p><p>Mybatis 的Mapper.xml语句中parameterType向SQL语句传参有两种方式：#{}和${}</p><p>我们经常使用的是#{},一般解说是因为这种方式可以防止SQL注入，简单的说#{}这种方式SQL语句是经过预编译的，它是把#{}中间的参数转义成字符串，举个例子：</p><p><code>select * from student where student_name = #{name}</code></p><p>预编译后,会动态解析成一个参数标记符?：</p><p><code>select * from student where student_name = ?</code></p><p>而使用${}在动态解析时候，会传入参数字符串</p><p><code>select * from student where student_name = &#39;lyrics&#39;</code></p><p>总结：<br>#{} 这种取值是编译好SQL语句再取值<br>${} 这种是取值以后再去编译SQL语句<br>#{} 的参数替换是发生在 DBMS 中，而 ${} 则发生在动态解析过程中。</p><ul><li>#{}方式能够很大程度防止sql注入.</li><li>$方式无法防止Sql注入.</li><li>$方式一般用于传入数据库对象，例如传入表名.</li><li>一般能用#的就别用$.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MyBatis本身是基于JDBC封装的.&lt;br&gt;动态sql，是其的强大特性之一.&lt;br&gt;且mybatis在默认情况下，是会对所有的sql进行预编译的.&lt;/p&gt;
&lt;p&gt;Mybatis 的Mapper.xml语句中parameterType向SQL语句传参有两种方式：#{}和$
      
    
    </summary>
    
      <category term="mybatis" scheme="http://macintosh-c.coding.me/categories/mybatis/"/>
    
    
      <category term="mybatis基础" scheme="http://macintosh-c.coding.me/tags/mybatis%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://macintosh-c.coding.me/2018/08/27/java/design/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://macintosh-c.coding.me/2018/08/27/java/design/单例模式/</id>
    <published>2018-08-27T14:48:15.000Z</published>
    <updated>2019-08-20T06:04:51.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="饿汉式-线程安全"><a href="#饿汉式-线程安全" class="headerlink" title="饿汉式(线程安全)"></a>饿汉式(线程安全)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package test;</span><br><span class="line"></span><br><span class="line">public class Single &#123;</span><br><span class="line">//恶汉式</span><br><span class="line">private static Single single=new Single();</span><br><span class="line">private Single()&#123;&#125;</span><br><span class="line">public static Single getInstance()&#123;</span><br><span class="line">return single;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="懒汉式-非线程安全"><a href="#懒汉式-非线程安全" class="headerlink" title="懒汉式(非线程安全)"></a>懒汉式(非线程安全)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package test;</span><br><span class="line"></span><br><span class="line">public class Single2 &#123;</span><br><span class="line">private static Single2 instance;</span><br><span class="line">private Single2()&#123;&#125;</span><br><span class="line">public static Single2 getInstance()&#123;</span><br><span class="line">if(instance==null)&#123;//1：读取instance的值</span><br><span class="line">instance=new Single2();//2: 实例化instance</span><br><span class="line">&#125;</span><br><span class="line">return instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上代码注释部分，如果此时有两个线程，线程A执行到1处，读取了instance为null，然后cpu就被线程B抢去了，此时，线程A还没有对instance进行实例化。因此，线程B读取instance时仍然为null，于是，它对instance进行实例化了。然后，cpu就被线程A抢去了。此时，线程A由于已经读取了instance的值并且认为它为null，所以，再次对instance进行实例化。所以，线程A和线程B返回的不是同一个实例。<br>解决线程安全需要在getInstance方法上加上synchronized修饰。</p><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package test;</span><br><span class="line"></span><br><span class="line">public class MyThread extends Thread&#123;</span><br><span class="line">@Override</span><br><span class="line">public void run()&#123;</span><br><span class="line">System.out.println(Single2.getInstance().hashCode());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package test;</span><br><span class="line"></span><br><span class="line">public class Run &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">MyThread t1=new MyThread();</span><br><span class="line">MyThread t2=new MyThread();</span><br><span class="line">MyThread t3=new MyThread();</span><br><span class="line">MyThread t4=new MyThread();</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">t4.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;饿汉式-线程安全&quot;&gt;&lt;a href=&quot;#饿汉式-线程安全&quot; class=&quot;headerlink&quot; title=&quot;饿汉式(线程安全)&quot;&gt;&lt;/a&gt;饿汉式(线程安全)&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
      <category term="java基础" scheme="http://macintosh-c.coding.me/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="设计模式" scheme="http://macintosh-c.coding.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>wait-notify生产者-消费者问题</title>
    <link href="http://macintosh-c.coding.me/2018/08/27/java/design/wait-notify%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/"/>
    <id>http://macintosh-c.coding.me/2018/08/27/java/design/wait-notify生产者-消费者问题/</id>
    <published>2018-08-27T14:39:40.000Z</published>
    <updated>2019-08-20T06:15:51.542Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package test;</span><br><span class="line"></span><br><span class="line">import java.util.Vector;</span><br><span class="line">import java.util.logging.Level;</span><br><span class="line">import java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line">public class Producer implements Runnable&#123;</span><br><span class="line">private final Vector sharedQueue;</span><br><span class="line">private final int SIZE;</span><br><span class="line">public Producer(Vector sharedQueue,int size)&#123;</span><br><span class="line">this.sharedQueue=sharedQueue;</span><br><span class="line">this.SIZE=size;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">for(int i=1;i&lt;=20;i++)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">produce(i);</span><br><span class="line">&#125; catch (InterruptedException ex) &#123;</span><br><span class="line">Logger.getLogger(Producer.class.getName()).log(Level.SEVERE, null, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">private void produce(int i) throws InterruptedException&#123;</span><br><span class="line">synchronized (sharedQueue) &#123;</span><br><span class="line">while(sharedQueue.size()==SIZE)&#123;</span><br><span class="line">System.out.println(&quot;Queue is full &quot;+Thread.currentThread().getName()</span><br><span class="line">+&quot;is waiting,size:&quot;+sharedQueue.size());</span><br><span class="line">sharedQueue.wait();</span><br><span class="line">&#125;</span><br><span class="line">sharedQueue.add(i);</span><br><span class="line">System.out.println(&quot;生产者生产了第&quot;+i+&quot;个商品&quot;);</span><br><span class="line">sharedQueue.notifyAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package test;</span><br><span class="line"></span><br><span class="line">import java.util.Vector;</span><br><span class="line">import java.util.logging.Level;</span><br><span class="line">import java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line">public class Consumer implements Runnable&#123;</span><br><span class="line">private final Vector sharedQueue;</span><br><span class="line">private final int SIZE;</span><br><span class="line">public Consumer(Vector sharedQueue,int size)&#123;</span><br><span class="line">this.sharedQueue=sharedQueue;</span><br><span class="line">this.SIZE=size;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">while(true)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">consume();</span><br><span class="line">&#125; catch (InterruptedException ex) &#123;</span><br><span class="line">Logger.getLogger(Consumer.class.getName()).log(Level.SEVERE, null, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">private void consume() throws InterruptedException&#123;</span><br><span class="line">synchronized (sharedQueue) &#123;</span><br><span class="line">while(sharedQueue.isEmpty())&#123;</span><br><span class="line">System.out.println(&quot;Queue is empty&quot;+Thread.currentThread().getName()</span><br><span class="line">+&quot;is waiting,size:&quot;+sharedQueue.size());</span><br><span class="line">sharedQueue.wait();</span><br><span class="line">&#125;</span><br><span class="line">int cu=(Integer)sharedQueue.remove(0);</span><br><span class="line">System.out.println(&quot;消费者消费了第&quot;+cu+&quot;个商品&quot;);</span><br><span class="line">sharedQueue.notifyAll();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package test;</span><br><span class="line"></span><br><span class="line">import java.util.Vector;</span><br><span class="line"></span><br><span class="line">public class ProducerConsumerSolution &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Vector sharedQueue=new Vector();</span><br><span class="line">int size=4;</span><br><span class="line">Thread prodThread=new Thread(new Producer(sharedQueue,size),&quot;Producer&quot;);</span><br><span class="line">Thread consThread=new Thread(new Consumer(sharedQueue,size),&quot;Consumer&quot;);</span><br><span class="line">prodThread.start();</span><br><span class="line">consThread.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;生产者&quot;&gt;&lt;a href=&quot;#生产者&quot; class=&quot;headerlink&quot; title=&quot;生产者&quot;&gt;&lt;/a&gt;生产者&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
      <category term="java基础" scheme="http://macintosh-c.coding.me/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="设计模式" scheme="http://macintosh-c.coding.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>mysql之---主从配置（windows，mysql5.7）</title>
    <link href="http://macintosh-c.coding.me/2018/08/22/Databases/mysql/mysql5.7%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://macintosh-c.coding.me/2018/08/22/Databases/mysql/mysql5.7主从配置/</id>
    <published>2018-08-22T06:34:16.000Z</published>
    <updated>2019-08-20T06:10:13.256Z</updated>
    
    <content type="html"><![CDATA[<p>利用MySQL主从配置，实现读写分离，减轻数据库压力。条件有限，本篇使用binlog的方式，只在一台windows上实验ok。方法记录如下：</p><h2 id="mysql主-称master-从-称slave-复制的原理："><a href="#mysql主-称master-从-称slave-复制的原理：" class="headerlink" title="mysql主(称master)从(称slave)复制的原理："></a>mysql主(称master)从(称slave)复制的原理：</h2><p>1.master将数据改变记录到二进制日志(binary log)中,也即是配置文件log-bin指定的文件(这些记录叫做二进制日志事件，binary log events)<br>2.slave将master的binary log events拷贝到它的中继日志(relay log)<br>3.slave重做中继日志中的事件,将改变反映它自己的数据(数据重演)<br><img src="https://i.imgur.com/F6N6qdg.png" alt=""></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1.mysql5.7版本<a href="http://www.macintosh-c.online/2018/08/22/mysql5-7%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">下载与安装</a><br>2.安装navicat，来链接数据库，方便观察操作数据库（下载安装后网上有<a href="https://blog.csdn.net/zwj1030711290/article/details/80371198" target="_blank" rel="noopener">破解教程</a>，此篇亲测可用，<a href="https://download.csdn.net/download/vooooz/10351746" target="_blank" rel="noopener">注册机下载</a>）</p><h2 id="master配置"><a href="#master配置" class="headerlink" title="master配置"></a>master配置</h2><p>修改my.ini文件，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port=3380</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">port=3380</span><br><span class="line">shared-memory-base-name=MYSQL-3380</span><br><span class="line">character_set_server=utf8</span><br><span class="line">#安装路径</span><br><span class="line">basedir=D:\mysql</span><br><span class="line">#数据路径</span><br><span class="line">datadir=D:\mysql\data\Data</span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line">slow_query_log_file=&quot;D:\mysql\logs\mysql-slow.log&quot;</span><br><span class="line">log-bin=&quot;D:\mysql\logs\mysql-bin&quot;</span><br><span class="line">log-error=&quot;D:\mysql\logs\mysql.err.log&quot;</span><br><span class="line">server-id=80</span><br><span class="line">binlog-do-db=coolshop</span><br><span class="line">[WinMySQLAdmin]</span><br><span class="line">D:\mysql\bin\mysqld.exe</span><br></pre></td></tr></table></figure></p><p>输入服务安装命令：<br><code>mysqld install MySQL-3380 --defaults-file=&quot;D:\mysql\my.ini&quot;</code><br># 注意：MySQL-3380服务名，与下面slave区分，my.ini指向自己master安装路径下的。<br>见到Service successfully installed说明安装成功。</p><p>启动master服务，由于my.ini配置是3380端口，所以服务中会显示此服务，同时可以使用navicat链接上该mysql。<br>#此上步骤注意：binlog-do-db=coolshop  配置意思是coolshop此数据库会进行主从的复制，其他数据库不会，我也是最后测试半天不生效恍然看到才明白的。其他主要是注意文件里端口号，路径不要写错，根据实际mysql安装目录来。</p><h2 id="slave配置"><a href="#slave配置" class="headerlink" title="slave配置"></a>slave配置</h2><p>将上一步安装的mysql文件夹拷贝一份，修改文件名，然后同样按照上述步骤操作，主要还是my.ini文件的修改，贴上我的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port=3381</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">port=3381</span><br><span class="line">shared-memory-base-name=MYSQL-3381</span><br><span class="line">character_set_server=utf8</span><br><span class="line">#安装路径</span><br><span class="line">basedir=D:\mysql_c</span><br><span class="line">#数据路径</span><br><span class="line">datadir=D:\mysql_c\data\Data</span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line">slow_query_log_file=&quot;D:\mysql_c\logs\mysql-slow.log&quot;</span><br><span class="line">#log-bin=&quot;D:\mysql_c\logs\mysql-bin&quot;</span><br><span class="line">log-error=&quot;D:\mysql_c\logs\mysql.err.log&quot;</span><br><span class="line">server-id=81</span><br><span class="line">[WinMySQLAdmin]</span><br><span class="line">D:\mysql_c\bin\mysqld.exe</span><br></pre></td></tr></table></figure></p><p>#注意：端口号区分，文件路径区分，我copy的mysql放在d盘下名字为mysql_c,所以如上所写，shared-memory-base-name区分</p><p>输入服务安装命令：<br><code>mysqld install MySQL-3381 --defaults-file=&quot;D:\mysql_c\my.ini&quot;</code><br>同上，至启动MySQL-3381服务ok，能链接上数据库。</p><h2 id="主从复制配置"><a href="#主从复制配置" class="headerlink" title="主从复制配置"></a>主从复制配置</h2><p>1.主：SHOW MASTER STATUS<br><img src="https://i.imgur.com/9QS5UqT.png" alt=""><br>2.从：CHANGE MASTER TO<br> master_host=’127.0.0.1’,<br> master_user=’root’,<br> master_password=’123456’,<br> master_port=3380,<br> master_log_file=’mysql-bin.000004’,<br> master_log_pos=6147;<br>#注意：此处的最后两个参数是要和master上面查询的配置一致，也可以在主库创建用户，授予复制权限来操作，此处也要对应用户名和密码，授权用户命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant replication slave on *.* to &apos;slave01&apos;@&apos;127.0.0.1&apos; identified by &apos;123456&apos;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></p><p>3.启动slave同步：START SLAVE;<br>4.查看slave同步状态：SHOW SLAVE STATUS;注意Slave_IO_Running这一栏，若为NO,说明配置有问题，查看mysql.err.log日记发现是：master and slave have equal MySQL server UUIDs;<br>5.所以在slave里修改auto.cnf文件里的uuid，然后重启下slave数据库，查询slave状态，会发现Slave_IO_Running：yes即ok。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>此时注意不是所有的master中数据库都会同步复制到slave数据库里面，而是master中的coolshop数据库，之前配置的。在master中创建该数据库，创建表，插入数据等，然后回到slave中查看databases，你会发现slave已同步有了此数据库以及数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;利用MySQL主从配置，实现读写分离，减轻数据库压力。条件有限，本篇使用binlog的方式，只在一台windows上实验ok。方法记录如下：&lt;/p&gt;
&lt;h2 id=&quot;mysql主-称master-从-称slave-复制的原理：&quot;&gt;&lt;a href=&quot;#mysql主-称mast
      
    
    </summary>
    
      <category term="Database" scheme="http://macintosh-c.coding.me/categories/Database/"/>
    
    
      <category term="mysql主从" scheme="http://macintosh-c.coding.me/tags/mysql%E4%B8%BB%E4%BB%8E/"/>
    
  </entry>
  
  <entry>
    <title>mysql之---下载与安装（windows，mysql5.7免安装版）</title>
    <link href="http://macintosh-c.coding.me/2018/08/22/Databases/mysql/mysql5.7%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <id>http://macintosh-c.coding.me/2018/08/22/Databases/mysql/mysql5.7版本下载与安装/</id>
    <published>2018-08-22T06:34:16.000Z</published>
    <updated>2019-08-20T06:10:31.003Z</updated>
    
    <content type="html"><![CDATA[<p>近期在导入数据库表的过程中报错，由于某些字段像默认时间设置的问题，导致导入过程报错，查询后得知是mysql版本太低，需要升级的原因，于是折腾下载5.7版本mysql，查询相关教程博客总结如下</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ol><li><p>链接：<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></p></li><li><p>点击选择MySQL Community Edition (GPL)&gt;MySQL Community Server (GPL)&gt;Looking for previous GA versions?根据系统选择5.7版本的zip Archive（免安装版） 下载</p></li></ol><h2 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h2><h3 id="1-解压MySQL压缩包"><a href="#1-解压MySQL压缩包" class="headerlink" title="1. 解压MySQL压缩包"></a>1. 解压MySQL压缩包</h3><p>将以下载的MySQL压缩包解压到自定义目录下,我的解压目录是:”D:\mysql”<br>将解压目录下默认文件 my-default.ini 拷贝一份，改名 my.ini<br>复制下面的配置信息到 my.ini 保存,如果没有my-default.ini,可自己新建my.ini<br>内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#########################################################</span><br><span class="line">  [client]</span><br><span class="line">  port=3306</span><br><span class="line">  default-character-set=utf8</span><br><span class="line">  [mysqld]</span><br><span class="line">  port=3306</span><br><span class="line">  character_set_server=utf8</span><br><span class="line">  #安装路径</span><br><span class="line">  basedir=D:\mysql</span><br><span class="line">  #数据路径</span><br><span class="line">   datadir=D:\mysql\data</span><br><span class="line">    sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line">    [WinMySQLAdmin]</span><br><span class="line">   D:\mysql\bin\mysqld.exe</span><br><span class="line">#########################################################</span><br></pre></td></tr></table></figure></p><h3 id="2-将mysql注册为windows系统服务"><a href="#2-将mysql注册为windows系统服务" class="headerlink" title="2. 将mysql注册为windows系统服务"></a>2. 将mysql注册为windows系统服务</h3><p>1）从控制台进入到MySQL解压目录下的 bin 目录下：<br>注册之前先执行初始化命令，否则注册完后启动服务不成功，执行命令如下：<br><code>mysqld --initialize-insecure --user=mysql</code><br>2）输入服务安装命令：<br><code>mysqld install MySQL --defaults-file=&quot;D:\mysql\my.ini&quot;</code><br>安装成功后会提示服务安装成功。<br>#注：my.ini文件放在MySQL解压后的根目录下,如果之前装过此时会提示已经安装，可用<code>sc delete mysql</code>移除之前的服务，再执行上述命令</p><h3 id="3-启动MySQL服务"><a href="#3-启动MySQL服务" class="headerlink" title="3. 启动MySQL服务"></a>3. 启动MySQL服务</h3><p>方法一：<br>启动服务命令为：net start mysql<br>方法二：<br>打开管理工具 服务，找到MySQL服务。<br>通过右键选择启动或者直接点击左边的启动来启动服务。</p><h3 id="4-修改-root-账号的密码"><a href="#4-修改-root-账号的密码" class="headerlink" title="4. 修改 root 账号的密码"></a>4. 修改 root 账号的密码</h3><p>刚安装完成时root账号默认密码为空，此时可以将密码修改为指定的密码。如：123456<br>cd到mysql解压目录下执行：<code>mysql –u root</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;show databases;</span><br><span class="line">mysql&gt;use mysql;</span><br><span class="line">mysql&gt;UPDATE user SET authentication_string=&quot;123456&quot; WHERE user=&apos;root&apos;;即可</span><br><span class="line">mysql&gt;FLUSH PRIVILEGES;</span><br><span class="line">mysql&gt;QUIT</span><br></pre></td></tr></table></figure></p><p>#注：新安装的MySQL5.7，mysql数据库下已经没有password这个字段了，password字段改成了authentication_string。<br>此时尚没有结束，当重新输入<code>mysql –u root -p</code>后并没有登录进mysql，而是一直提示：Access denied for user ‘root‘@’localhost’ (using password: YES)，很苦恼，百度查询，大多方法是免密码登录，重设密码等等试了都不行，最后找到一个方法解决，记录如下：<br>1)停止mysql服务。<code>net stop mysql</code><br>2)跳过密码验证。<code>mysqld --skip-grant-tables</code><br>3)无密码登录。在步骤2的基础上，重新开一个CMD，执行：<code>mysql -u root</code><br>4)授权。<code>mysql&gt;grant all privileges on *.* to &#39;root&#39;@&#39;localhost&#39; identified by &#39;123456&#39; with grant option;</code><br>关键词解释：<br>root‘@’localhost:是用户<br>123456：是密码<br>此时发现无密码条件下，没有授权的写权限：<br>The MySQL server is running with the –skip-grant-tables option so it cannot execute this statement<br>解决方案：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global read_only=0;//（关掉新主库的只读属性）</span><br><span class="line">mysql&gt;flush privileges;</span><br><span class="line">mysql&gt;set global read_only=1;//(读写属性)</span><br><span class="line">mysql&gt;flush privileges;</span><br><span class="line">mysql&gt;grant all privileges on *.* to &apos;root&apos;@&apos;localhost&apos; identified by &apos;123456&apos; with grant option;</span><br><span class="line">mysql&gt;flush privileges;</span><br><span class="line">（注意刷新是必须项）</span><br></pre></td></tr></table></figure></p><p>到此打开mysql服务时失败，重启下电脑，启动mysql服务ok，<code>mysql -u root -p</code>输入密码，登录ok</p><h3 id="5-MySQL控制台快捷方式建立"><a href="#5-MySQL控制台快捷方式建立" class="headerlink" title="5. MySQL控制台快捷方式建立:"></a>5. MySQL控制台快捷方式建立:</h3><p>1）桌面右键-&gt;新建-&gt;快捷方式-&gt;对象位置输入：C:\Windows\System32(或SysWOW64)\cmd.exe<br>快捷方式名称自己定义，确定，快捷方式建立成功<br>2）右键单击刚才建立的快捷方式-&gt;属性-&gt;把目标一栏修改成MySQL启动参数：<br>C:\Windows\System32\cmd.exe “D:\mysql\bin” /k mysql -u root -p inventory<br>解释:CMD路径 “MySQL路径bin目录” /k mysql -u root -p 默认打开的数据库名<br>3）修改完成后点击确定保存，直接双击快捷方式即可连接到MySQL<br>#注：需要将mysql添加环境变量，方法见6</p><h3 id="6-添加环境变量"><a href="#6-添加环境变量" class="headerlink" title="6. 添加环境变量"></a>6. 添加环境变量</h3><p>操作如下：<br>1）右键单击我的电脑-&gt;属性-&gt;高级系统设置(高级)-&gt;环境变量<br>点击系统变量下的新建按钮<br>输入变量名：MYSQL_HOME<br>输入变量值：D:\mysql<br>#即为mysql的自定义解压目录。<br>2）选择系统变量中的Path<br>点击编辑按钮<br>在变量值中添加变量值：%MYSQL_HOME%\bin<br>注意是在原有变量值后面加上这个变量，用;隔开，不能删除原来的变量值<br>#配置完环境变量重启下电脑</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近期在导入数据库表的过程中报错，由于某些字段像默认时间设置的问题，导致导入过程报错，查询后得知是mysql版本太低，需要升级的原因，于是折腾下载5.7版本mysql，查询相关教程博客总结如下&lt;/p&gt;
&lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Database" scheme="http://macintosh-c.coding.me/categories/Database/"/>
    
    
      <category term="mysql安装" scheme="http://macintosh-c.coding.me/tags/mysql%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建博客之---总结篇</title>
    <link href="http://macintosh-c.coding.me/2018/08/17/hexo/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B-%E6%80%BB%E7%BB%93/"/>
    <id>http://macintosh-c.coding.me/2018/08/17/hexo/hexo搭建博客之-总结/</id>
    <published>2018-08-17T06:59:00.000Z</published>
    <updated>2019-08-20T06:09:00.679Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo搭建博客流程汇总-简述"><a href="#hexo搭建博客流程汇总-简述" class="headerlink" title="hexo搭建博客流程汇总(简述)"></a>hexo搭建博客流程汇总(简述)</h2><h3 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h3><h4 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></h4><p>安装Hexo：<code>npm install -g hexo</code><br>在存放博客原始文件夹建立网站所需要的所有文件：<code>hexo init</code><br>安装依赖包:<code>npm install</code><br>（关于hexo的几个常用指令：hexo clean；hexo g；hexo s；hexo d自行了解）</p><h4 id="2-安装Git客户端"><a href="#2-安装Git客户端" class="headerlink" title="2.安装Git客户端"></a>2.安装<a href="https://git-scm.com/download" target="_blank" rel="noopener">Git</a>客户端</h4><p>配置SSH<br>添加SSH key到你的Github账户</p><h4 id="3-注册Github帐号"><a href="#3-注册Github帐号" class="headerlink" title="3.注册Github帐号"></a>3.注册Github帐号</h4><p>github上创建用于博客的repository仓库</p><h3 id="二、简单配置"><a href="#二、简单配置" class="headerlink" title="二、简单配置"></a>二、简单配置</h3><h4 id="1-部署本地hexo文件到github建好的仓库"><a href="#1-部署本地hexo文件到github建好的仓库" class="headerlink" title="1.部署本地hexo文件到github建好的仓库"></a>1.部署本地hexo文件到github建好的仓库</h4><p>配置根目录：_config.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">      github: ***(仓库地址),master(代表仓库的哪个分支)</span><br></pre></td></tr></table></figure></p><h4 id="2-安装hexo-deployer-git模块"><a href="#2-安装hexo-deployer-git模块" class="headerlink" title="2.安装hexo-deployer-git模块"></a>2.安装hexo-deployer-git模块</h4><p>尝试推送到github访问：<br><code>hexo g</code><br><code>hexo d</code><br>如果报错,安装一下hexo-deployer-git这个模块：<br><code>npm install hexo-deployer-git --save</code></p><h3 id="三、发表及访问"><a href="#三、发表及访问" class="headerlink" title="三、发表及访问"></a>三、发表及访问</h3><p>发表一篇文章<br>Git Bash执行命令：hexo new “my new post”<br>在博客原始文件夹路径下\hexo\source_post中打开my-new-post.md，打开方式使用记事本或者其他文本工具。推荐使用markdown，可自行下载安装，并研究语法，很容易上手。<br>写完文章后，使用</p><pre><code>1. $ hexo g生成静态文件。2. $ hexo s在本地预览效果。访问地址localhost:4000。3. hexo d同步到github，然后使用github上仓库名在浏览器进行访问。</code></pre><h3 id="四、主题安装及优化，更新"><a href="#四、主题安装及优化，更新" class="headerlink" title="四、主题安装及优化，更新"></a>四、主题安装及优化，更新</h3><h4 id="1-安装jacman主题"><a href="#1-安装jacman主题" class="headerlink" title="1.安装jacman主题"></a>1.安装jacman主题</h4><p><code>git clone https://github.com/wuchong/jacman.git themes/jacman</code></p><h4 id="2-启用"><a href="#2-启用" class="headerlink" title="2.启用"></a>2.启用</h4><p>修改你的博客根目录下的config.yml配置文件中的theme属性，将其设置为jacman。</p><h4 id="3-后续更新"><a href="#3-后续更新" class="headerlink" title="3.后续更新"></a>3.后续更新</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes/jacman</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>注：由于后来用git托管hexo原始文件时，删除了jacman下的git库所有不能更新，可以另外建一个目录来更新这个主题，然后合并到原始文件目录下面，再提交，达到一样更新的效果</p><h4 id="4-优化处理"><a href="#4-优化处理" class="headerlink" title="4.优化处理"></a>4.优化处理</h4><ul><li><p>menu 默认没有启用 /tags 和 /categories 页面，如果需要启用请在博客目录下的source文件夹中分别建立tags和categories文件夹每个文件夹中分别包含一个index.md文件。内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: tags (或categories)</span><br><span class="line">title: tags (或categories)</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li><p>添加搜素，需要在博客目录下的source文件夹中建立search文件夹并包含一个index.md文件。内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: search</span><br><span class="line">title: search</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li><p>配置文章模板，修改根目录下\scaffolds\post.md文件，配置好基本的信息，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories: </span><br><span class="line">tags: </span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul><p>另外修改了博客的整体颜色，logo图片，导航栏背景，博客座右铭，侧边栏自动隐藏等，具体修改方法不再详述</p><h3 id="五、其他功能配置"><a href="#五、其他功能配置" class="headerlink" title="五、其他功能配置"></a>五、其他功能配置</h3><h4 id="1-配置RSS订阅"><a href="#1-配置RSS订阅" class="headerlink" title="1.配置RSS订阅"></a>1.配置RSS订阅</h4><p>安装插件：<code>npm install hexo-generator-feed --save</code><br>根目录下面_config.yml配置文件中添加如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br></pre></td></tr></table></figure></p><p>themes\jacman下的_config.yml默认会有下面代码，如果你的没有就添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\#### RSS </span><br><span class="line">rss: /atom.xml ## RSS address.</span><br></pre></td></tr></table></figure></p><p>编译部署exo deploy -g<br>查看是否成功，输入你的博客域名，后面加上/atom.xml,如果打开有代码数据就表示成功</p><h4 id="2-不蒜子-网页，网站极简计数器-即总pv计数和总uv计数"><a href="#2-不蒜子-网页，网站极简计数器-即总pv计数和总uv计数" class="headerlink" title="2.不蒜子-网页，网站极简计数器:即总pv计数和总uv计数"></a>2.<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子</a>-网页，网站极简计数器:即总pv计数和总uv计数</h4><p>总uv数添加(添加双**中间的代码)：themes\jacman\layout_partial\footer.ejs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&lt;%= config.url %&gt;&quot; title=&quot;&lt;%= config.title %&gt;&quot;&gt;&lt;%= config.title %&gt;&lt;/a&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">**&lt;/br&gt;</span><br><span class="line">&lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class="line">    &amp;nbsp;&amp;nbsp;Total visits:&amp;nbsp;&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">  &amp;nbsp;&amp;nbsp;You are Visiter No.&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;**</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>总pv数添加：emes\jacman\layout_partial\post\header.ejs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  &lt;p class=&quot;article-time&quot;&gt;</span><br><span class="line">    &lt;time datetime=&quot;&lt;%= date_xml(item.date) %&gt;&quot; itemprop=&quot;datePublished&quot;&gt; &lt;%= __(&apos;datepublished&apos;) %&gt; &lt;%= item.date.format(config.date_format) %&gt;&lt;/time&gt;</span><br><span class="line">**&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt; 总阅读 &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt; &lt;/span&gt;次 **</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">&lt;/header&gt;</span><br></pre></td></tr></table></figure></p><h4 id="3-托管coding"><a href="#3-托管coding" class="headerlink" title="3.托管coding"></a>3.托管coding</h4><p>国外github访问以及上传都比较慢，于是托管到coding，具体详细步骤见：<a href="http://www.macintosh-c.online/2018/08/14/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E4%BA%8C/" target="_blank" rel="noopener">hexo搭建博客之—托管coding</a><br>简述：<br>1.注册coding账号，新建一个和用户名一样的仓库<br>2.配置根目录下_config.yml文件的deploy，hexo d可以向两个仓库上传<br>3.coding上page静态部署</p><h4 id="4-多地更新博客：原始文件托管"><a href="#4-多地更新博客：原始文件托管" class="headerlink" title="4.多地更新博客：原始文件托管"></a>4.多地更新博客：原始文件托管</h4><p>由于离开了本地pc，不方便持续更新博客，便想把原始文件也托管到coding，这样到其他电脑上，环境ok就可以直接clone下来更新微博，方便快捷，具体见：<a href="http://www.macintosh-c.online/2018/08/13/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E4%B8%80/" target="_blank" rel="noopener">hexo搭建博客之—github管理原始文件，异地更新博客</a>,同样的方法配置，托管到coding。<br>简述：<br>1.在coding上博客的仓库新建一个hexo分支<br>2.将该分支设为默认分支<br>3.本地clone下来，可以删除里面的文件，然后把自己本地hexo的原始文件添加上传至hexo分支<br>4.每次异地记得先git pull，npm install，写完更新后，git add,git push 到远程coding仓库</p><h4 id="5-打赏功能"><a href="#5-打赏功能" class="headerlink" title="5.打赏功能"></a>5.<a href="https://whatbeg.com/2016/05/18/hexo-donate.html" target="_blank" rel="noopener">打赏</a>功能</h4><p>出于好玩，在自己的博客上也添加了打赏功能，具体操作：<br>在themes\jacman_config.yml文件中添加如下语句（微信和支付宝的图片链接当然要换成你自己的）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">donate:</span><br><span class="line">  enable: true</span><br><span class="line">  text: 打赏我的人，运气都不会太差~</span><br><span class="line">  wechat: https://wx1.sinaimg.cn/mw690/006qxJmqgy1fu5w4jmxxsj307w08ot9i.jpg</span><br><span class="line">  alipay: https://wx3.sinaimg.cn/mw690/006qxJmqgy1fu5w4ly4ovj308x08oab4.jpg</span><br><span class="line">  web: true</span><br></pre></td></tr></table></figure></p><p>然后themes\jacman\layout_partial\post\article.ejs在<code>&lt;div class=&quot;article-content&quot;&gt;...&lt;/div&gt;</code>的下面，<code>&lt;%- partial(&#39;footer&#39;) %&gt;</code>的上面插入如下HTML代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.donate) &#123; %&gt;</span><br><span class="line">&lt;!-- css --&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    .center &#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">    .hidden &#123;</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line">.donate_bar a.btn_donate&#123;</span><br><span class="line">display: inline-block;</span><br><span class="line">width: 82px;</span><br><span class="line">height: 82px;</span><br><span class="line">background: url(&quot;http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif&quot;) no-repeat;</span><br><span class="line">_background: url(&quot;http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif&quot;) no-repeat;</span><br><span class="line"></span><br><span class="line">&lt;!-- http://img.t.sinajs.cn/t5/style/images/apps_PRF/e_media/btn_reward.gif</span><br><span class="line">     因为本 hexo 生成的博客所用的 theme 的 a:hover 带动画效果，</span><br><span class="line"> 为了在让打赏按钮显示效果正常 而 添加了以下几行 css，</span><br><span class="line"> 嵌入其它博客时不一定要它们。--&gt;</span><br><span class="line">-webkit-transition: background 0s;</span><br><span class="line">-moz-transition: background 0s;</span><br><span class="line">-o-transition: background 0s;</span><br><span class="line">-ms-transition: background 0s;</span><br><span class="line">transition: background 0s;</span><br><span class="line">&lt;!-- /让打赏按钮的效果显示正常 而 添加的几行 css 到此结束--&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.donate_bar a.btn_donate:hover&#123; background-position: 0px -82px;&#125;</span><br><span class="line">.donate_bar .donate_txt &#123;</span><br><span class="line">display: block;</span><br><span class="line">color: #9d9d9d;</span><br><span class="line">font: 14px/2 &quot;Microsoft Yahei&quot;;</span><br><span class="line">&#125;</span><br><span class="line">.bold&#123; font-weight: bold; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;!-- /css --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Donate Module --&gt;</span><br><span class="line">    &lt;div id=&quot;donate_module&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- btn_donate &amp; tips --&gt;</span><br><span class="line">&lt;div id=&quot;donate_board&quot; class=&quot;donate_bar center&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    ------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">&lt;a id=&quot;btn_donate&quot; class=&quot;btn_donate&quot; target=&quot;_self&quot; href=&quot;javascript:;&quot; title=&quot;Donate 打赏&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;span class=&quot;donate_txt&quot;&gt;</span><br><span class="line">&lt;%= theme.donate.text %&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- /btn_donate &amp; tips --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- donate guide --&gt;</span><br><span class="line">    </span><br><span class="line">&lt;div id=&quot;donate_guide&quot; class=&quot;donate_bar center hidden&quot;&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">    ------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;% if(theme.donate.web) &#123; %&gt;</span><br><span class="line">    &lt;div width=&quot;100%&quot; align=&quot;center&quot;&gt;&lt;div name=&quot;dashmain&quot; id=&quot;dash-main-id-87895f&quot; class=&quot;dash-main-3 87895f-0.99&quot;&gt;&lt;/div&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;http://www.dashangcloud.com/static/ds.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;&lt;%= theme.donate.wechat %&gt;&quot; title=&quot;用微信扫一扫哦~&quot; class=&quot;fancybox&quot; rel=&quot;article0&quot;&gt;</span><br><span class="line">&lt;img src=&quot;&lt;%= theme.donate.wechat %&gt;&quot; title=&quot;微信打赏 Donate&quot; height=&quot;190px&quot; width=&quot;auto&quot;/&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">        </span><br><span class="line">        &amp;nbsp;&amp;nbsp;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;&lt;%= theme.donate.alipay %&gt;&quot; title=&quot;用支付宝扫一扫即可~&quot; class=&quot;fancybox&quot; rel=&quot;article0&quot;&gt;</span><br><span class="line">&lt;img src=&quot;&lt;%= theme.donate.alipay %&gt;&quot; title=&quot;支付宝打赏 Donate&quot; height=&quot;190px&quot; width=&quot;auto&quot;/&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;span class=&quot;donate_txt&quot;&gt;</span><br><span class="line">&lt;%= theme.donate.text %&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- /donate guide --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- donate script --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">document.getElementById(&apos;btn_donate&apos;).onclick = function() &#123;</span><br><span class="line">$(&apos;#donate_board&apos;).addClass(&apos;hidden&apos;);</span><br><span class="line">    $(&apos;#donate_guide&apos;).removeClass(&apos;hidden&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function donate_on_web()&#123;</span><br><span class="line">$(&apos;#donate&apos;).submit();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">var original_window_onload = window.onload;</span><br><span class="line">        window.onload = function () &#123;</span><br><span class="line">            if (original_window_onload) &#123;</span><br><span class="line">                original_window_onload();</span><br><span class="line">            &#125;</span><br><span class="line">            document.getElementById(&apos;donate_board_wdg&apos;).className = &apos;hidden&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- /donate script --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- /Donate Module --&gt;</span><br><span class="line">   &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p><p>有兴趣的可以自行研究下代码逻辑。</p><h4 id="6-注册域名并绑定"><a href="#6-注册域名并绑定" class="headerlink" title="6.注册域名并绑定"></a>6.注册域名并绑定</h4><p>可以尝试注册自己的域名，来绑定博客的地址，可以选一些比较便宜的，本人注册域名为：<a href="www.macintosh-c.online">www.macintosh-c.online</a>,首年7元。推荐使用万网（阿里），在其他网站碰到很多坑，阿里的万网处理以及实名认证还是很迅速的。<br>1.万网注册账号并登陆，地址：<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">https://wanwang.aliyun.com/</a><br>2.挑选域名，并购买及实名认证<br>3.配置2个CNAME，解析到自己的博客网址<br>4.coding项目页，&gt;代码&gt;pages服务&gt;设置&gt;自定义域名,绑定刚刚购买的域名即可通过域名来访问博客主页。</p><h4 id="7-添加百度站内搜索，以及提交百度，360，搜狗搜索引擎"><a href="#7-添加百度站内搜索，以及提交百度，360，搜狗搜索引擎" class="headerlink" title="7.添加百度站内搜索，以及提交百度，360，搜狗搜索引擎"></a>7.添加百度站内搜索，以及提交百度，360，搜狗搜索引擎</h4><p>具体要实现的就是在网站上搜索框换成百度的，同时搜索可以链接到百度的站内搜索，并且将自己的博客网站提交给百度，360，搜狗搜索引擎，这样别人就可以通过搜索引擎搜到你的文章并点击进入。<br>1.先到百度搜索资源平台注册账号登录：<a href="https://ziyuan.baidu.com/site/index" target="_blank" rel="noopener">https://ziyuan.baidu.com/site/index</a><br>2.新建站点，填上自己注册的域名（此时域名已绑定到coding的博客地址，否则填博客源地址）<br>3.进入到百度站内搜索,新建搜索引擎，也就是域名地址，进入管理后台：<a href="https://zn.baidu.com/cse/engine/list" target="_blank" rel="noopener">https://zn.baidu.com/cse/engine/list</a><br>4.验证网站，证明您是该域名的拥有者，推荐文件验证，很简单。<br>5.新建搜素框，选择自己想要的样式，最后会提供一段代码给你，复制，加到自己博客代码里去就行了，我加的地方：themes\jacman\layout_partial\header.ejs,如下(删除原来的搜索框)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% &#125; else if(theme.baidu_search.enable)&#123; %&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;(function()&#123;document.write(unescape(&apos;%3Cdiv id=&quot;bdcs&quot;%3E%3C/div%3E&apos;));var bdcs = document.createElement(&apos;script&apos;);bdcs.type = &apos;text/javascript&apos;;bdcs.async = true;bdcs.src = &apos;http://znsv.baidu.com/customer_search/api/js?sid=14512095850844642904&apos; + &apos;&amp;plate_url=&apos; + encodeURIComponent(window.location.href) + &apos;&amp;t=&apos; + Math.ceil(new Date()/3600000);var s = document.getElementsByTagName(&apos;script&apos;)[0];s.parentNode.insertBefore(bdcs, s);&#125;)();&lt;/script&gt;</span><br><span class="line">&lt;% &#125; else if(theme.tinysou_search.enable)&#123; %&gt;</span><br></pre></td></tr></table></figure></p><p>5.主题下的_config.yml文件，记得打开百度搜索的配置，设为true就行。<br>6.此时百度内站有检测机制，检测代码添加成功便ok。<br>对于后面搜素引擎收录博客碰到的坑就很多了，大致描述下，自行捣鼓，大体也都是跟着站内的教程来。<br>百度是否收录，以及什么时候收录取决于很多因素，我们不能决定，可以通过主动推送，自动推送，sitemap和收到推送四个方法来推动进展，方法见：百度资源平台&gt;链接提交，但也不保证很快可以被其收录，本人已经推送2天了，至今未果。还有一个原因可能也是和网站需要备案有关系，扯到备案，查了一大推资料继续捣鼓，之前我也是没有注册域名，就是因为打算备案，所以购买了域名，重新部署了百度的搜索、统计等，然后备案网址：<a href="http://beian.vhostgo.com/" target="_blank" rel="noopener">http://beian.vhostgo.com/</a>，捣鼓到最后搜到一封邮件，还需要去就近核验点办理备案当面核验手续，收取30元服务费。懒得跑，于是我的备案以及百度等搜索引擎收录到此为止。后续只通过配置到代码中的自动推送每天向百度发送提交，希望早日能够被百度爬虫找到，其他提交360和搜狗引擎如出一辙，自行搜索对应站长平台，处理即可。</p><h4 id="8-添加百度统计"><a href="#8-添加百度统计" class="headerlink" title="8.添加百度统计"></a>8.添加百度统计</h4><p>步骤很简单，但是很有趣，可以实时通过后台看到你的博客的访问量，访问者的入口页面，以及你的受访网页，以及访问者的ip地域等信息，生成报告图表信息给你。<br>1.百度统计注册账号登录：<a href="https://tongji.baidu.com/web/welcome/login" target="_blank" rel="noopener">https://tongji.baidu.com/web/welcome/login</a><br>2.新建网址<br>3.获取到代码，添加到你的博客代码中，具体位置：themes\jacman\layout_partial\analytics.ejs,添加地方如下（当然添加你自己站点获取到的代码）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.baidu_tongji.enable)&#123; %&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var _hmt = _hmt || [];</span><br><span class="line">(function() &#123;</span><br><span class="line">  var hm = document.createElement(&quot;script&quot;);</span><br><span class="line">  hm.src = &quot;https://hm.baidu.com/hm.js?7a4f7d80ffc1f18cb51b3d3e1c6bd36a&quot;;</span><br><span class="line">  var s = document.getElementsByTagName(&quot;script&quot;)[0]; </span><br><span class="line">  s.parentNode.insertBefore(hm, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>4.主题下的_config.yml文件，记得打开百度统计的配置，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">baidu_tongji:</span><br><span class="line">  enable: true</span><br><span class="line">  sitecode: 你自己的 ## e.g. e6d1f421bbc9962127a50488f9ed37d1 your baidu tongji site code</span><br></pre></td></tr></table></figure></p><p>注:sitecode见百度统计站点下网址链接最后siteId=***<br>5.平台可以检测代码是否添加正确，ok后过一会后台便有数据产生了，你也可以关注百度统计的公众号，手机端查看网站被访问情况。</p><h4 id="9-添加评论插件"><a href="#9-添加评论插件" class="headerlink" title="9.添加评论插件"></a>9.添加评论插件</h4><p>想着给博客添加一个评论，多说和有言好像都要关了，畅言比较火，但是需要备案，最后用了韩国棒子的来必力，简单清爽，来必力官网： <a href="https://livere.com" target="_blank" rel="noopener">https://livere.com</a><br>1.注册并登录账号<br>2.点击安装，City免费版，填写博客网站地址<br>3.会生成安装代码，粘贴到博客代码里，具体文件位置：themes\jacman\layout_partial\post\comment.ejs,在最后依葫芦画瓢，添加一个来必力的判断，然后里面贴上安装代码，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.livere_uid)&#123; %&gt;</span><br><span class="line">&lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;***你自己生成的代码粘贴&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">   (function(d, s) &#123;</span><br><span class="line">       var j, e = d.getElementsByTagName(s)[0];</span><br><span class="line"></span><br><span class="line">       if (typeof LivereTower === &apos;function&apos;) &#123; return; &#125;</span><br><span class="line"></span><br><span class="line">       j = d.createElement(s);</span><br><span class="line">       j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;;</span><br><span class="line">       j.async = true;</span><br><span class="line"></span><br><span class="line">       e.parentNode.insertBefore(j, e);</span><br><span class="line">   &#125;)(document, &apos;script&apos;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;noscript&gt; 为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p><p>4.主题下的_config.yml文件，记得打开来必力评论配置，添加如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">livere_uid: ***你自己生成的代码粘贴</span><br></pre></td></tr></table></figure></p><p>hexo g,hexo d访问可以看到有评论了，同时来必力网站提供评论管理，可以更好的分析评论数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;hexo搭建博客流程汇总-简述&quot;&gt;&lt;a href=&quot;#hexo搭建博客流程汇总-简述&quot; class=&quot;headerlink&quot; title=&quot;hexo搭建博客流程汇总(简述)&quot;&gt;&lt;/a&gt;hexo搭建博客流程汇总(简述)&lt;/h2&gt;&lt;h3 id=&quot;一、环境搭建&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="博客相关" scheme="http://macintosh-c.coding.me/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="blog搭建" scheme="http://macintosh-c.coding.me/tags/blog%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建博客之---托管coding</title>
    <link href="http://macintosh-c.coding.me/2018/08/14/hexo/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B---%E6%89%98%E7%AE%A1coding/"/>
    <id>http://macintosh-c.coding.me/2018/08/14/hexo/hexo搭建博客之---托管coding/</id>
    <published>2018-08-14T13:50:41.000Z</published>
    <updated>2019-08-20T06:08:41.656Z</updated>
    
    <content type="html"><![CDATA[<p>之前hexo托管在github，但是访问起来确实挺慢，于是还是决定再部署到coding，并实现同时更新到github和coding。</p><h2 id="注册coding，创建项目"><a href="#注册coding，创建项目" class="headerlink" title="注册coding，创建项目"></a>注册coding，创建项目</h2><p><a href="https://coding.net/" target="_blank" rel="noopener">注册账户</a>后,创建一个仓库，这里遇到一个坑，项目名与用户名保持一致，否则建好的仓库部署到page服务后访问，样式会丢失。<br><img src="https://i.imgur.com/pMSTifq.png" alt=""></p><h2 id="config-yml配置"><a href="#config-yml配置" class="headerlink" title="_config.yml配置"></a>_config.yml配置</h2><p>想要同时部署到2个平台，就要修改博客根目录下面的_config.yml文件中的deploy如下：<br><img src="https://i.imgur.com/23Lqqyw.png" alt=""></p><p>这里又遇到一个坑，上图中最左边的红框一定要注意tab对齐，否则hexo g会一直报错。</p><p>我这边虽然采用的是https的方式，但是链接中添加了用户名和密码，也就是我红色划去的部分，这样提交时不需要输入用户名和密码。你也可以采用SSH密钥。</p><h2 id="同步本地hexo到coding上"><a href="#同步本地hexo到coding上" class="headerlink" title="同步本地hexo到coding上"></a>同步本地hexo到coding上</h2><p>首先还需要将本地公钥添加到coding的SSH公钥中，和之前的github类似，自行摸索，截图如下：<br><img src="https://i.imgur.com/RYc69hK.png" alt=""></p><p>添加后git bash验证一下：<br><code>ssh -T git@git.coding.net</code><br>如果得到下面提示就表示公钥添加成功了：<br><code>Hello Macintosh-c, You&#39;ve connected to Coding.net via SSH. This is a deploy key.</code><br>最后使用部署命令就能把博客同步到coding上面：<br><code>hexo d</code><br><img src="https://i.imgur.com/YzPJn2F.png" alt=""></p><h2 id="pages服务方式部署"><a href="#pages服务方式部署" class="headerlink" title="pages服务方式部署"></a>pages服务方式部署</h2><p>在source/需要创建一个空白文件，至于原因，是因为 coding.net需要这个文件来作为以静态文件部署的标志。就是说看到这个Staticfile就知道按照静态文件来发布。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd source/</span><br><span class="line">touch Staticfile  #名字必须是Staticfile</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/hTErmam.png" alt=""></p><p>一键静态部署后如图，网站访问地址ok，并且hexo d更新到coding后默认会自动部署。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到此，托管coding成功，并且再修改博客会同步更新到<a href="https://macintosh-c.github.io/" target="_blank" rel="noopener">github</a>和<a href="http://macintosh-c.coding.me/">coding</a>，由于coding访问快，所以将hexo的原始文件也移植到了coding同仓库的hexo分支上，便于<a href="http://macintosh-c.coding.me/2018/08/13/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E4%B8%80/">异地处理</a>的时候clone代码,步骤与github时都差不多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前hexo托管在github，但是访问起来确实挺慢，于是还是决定再部署到coding，并实现同时更新到github和coding。&lt;/p&gt;
&lt;h2 id=&quot;注册coding，创建项目&quot;&gt;&lt;a href=&quot;#注册coding，创建项目&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="博客相关" scheme="http://macintosh-c.coding.me/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="blog搭建" scheme="http://macintosh-c.coding.me/tags/blog%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
