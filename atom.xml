<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>macintosh-c&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/aec2ea475468bef1ef6aafb32d76a922</icon>
  <subtitle>当你的才华撑不起你的野心时，就应该静下心来好好学习。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://macintosh-c.coding.me/"/>
  <updated>2019-12-06T09:58:01.591Z</updated>
  <id>http://macintosh-c.coding.me/</id>
  
  <author>
    <name>Macintosh-c</name>
    <email>657582163@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IDEA中自动生成serialVersionUID的方法</title>
    <link href="http://macintosh-c.coding.me/2019/12/06/java/basic/idea%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%20serialVersionUID%20%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://macintosh-c.coding.me/2019/12/06/java/basic/idea自动生成 serialVersionUID 的方法/</id>
    <published>2019-12-06T09:39:56.000Z</published>
    <updated>2019-12-06T09:58:01.591Z</updated>
    
    <content type="html"><![CDATA[<p>当我们用 IntelliJ IDEA 编写类并实现 Serializable（序列化）接口的时候，可能会遇到这样一个问题，那就是：</p><ul><li>无法自动生成serialVersionUID.</li></ul><p>而serialVersionUID又是一个非常重要的字段，因为 Java 的序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的。在进行反序列化时，JVM 会把传来的字节流中的serialVersionUID与本地相应实体（类）的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常。</p><p>一般来说，定义serialVersionUID的方式有两种，分别为：</p><ol><li>采用默认的1L，具体为private static final long serialVersionUID = 1L;</li><li>根据类名、接口名、成员方法及属性等来生成一个64位的哈希字段，例如 private static final long serialVersionUID = XXXL;</li></ol><p>而 Java 类进行序列化也两个主要目的，分别为：</p><ol><li>把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中；</li><li>在网络上传送对象的字节序列。</li></ol><p>在这里，我们就一起来看看如何利用 IntelliJ IDEA 自动生成serialVersionUID:</p><p>第 1 步：安装GenerateSerialVersionUID插件<br>第 2 步：设置Inspections功能<br><img src="/img/java/idea-uid-4.png" alt="idea"><br>如上图所示，进入Default Settings，在Inspections设置页面中，勾选Serializable class without ‘serialVersionUID’，并且还可以在Severity中设置提示级别，如Warning、Error等，默认为Warning，也建议选择Warning级别的提示。<br>第 3 步：生成serialVersionUID<br><img src="/img/java/idea-uid-5.jpg" alt="idea"><br>如上图所示，创建一个类并实现Serializable接口，然后按alt+Enter键，即可收到提示，然后选择SerialVersionUID：<br><img src="/img/java/idea-uid-6.png" alt="idea"><br>如上图所示，显然我们已经利用 IntelliJ IDEA 中自动生成serialVersionUID啦！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当我们用 IntelliJ IDEA 编写类并实现 Serializable（序列化）接口的时候，可能会遇到这样一个问题，那就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无法自动生成serialVersionUID.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而serialVersionUID又是一
      
    
    </summary>
    
      <category term="java基础" scheme="http://macintosh-c.coding.me/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="serialVersionUID" scheme="http://macintosh-c.coding.me/tags/serialVersionUID/"/>
    
  </entry>
  
  <entry>
    <title>Nginx常用命令（启动/重启/停止/测试配置文件/重新加载配置文件）</title>
    <link href="http://macintosh-c.coding.me/2019/12/06/Nginx/nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://macintosh-c.coding.me/2019/12/06/Nginx/nginx常用命令/</id>
    <published>2019-12-06T07:19:52.000Z</published>
    <updated>2019-12-06T09:12:34.805Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx 安装后只有一个程序文件，本身并不提供各种管理程序，它是使用参数和系统信号机制对 Nginx 进程本身进行控制的。Nginx 的参数包括有如下几个：</p><ul><li>-c：使用指定的配置文件而不是conf目录下的nginx.conf 。</li><li>-t：测试配置文件是否正确，在运行时需要重新加载配置的时候，此命令非常重要，用来检测所修改的配置文件是否有语法错误。</li><li>-s：reload 重载</li><li>-s：stop 停止</li></ul><h4 id="启动-重启-停止"><a href="#启动-重启-停止" class="headerlink" title="启动/重启/停止"></a>启动/重启/停止</h4><p><code>sudo /etc/init.d/nginx {start|restart|stop}</code></p><p>上面的命令其实是基于服务的形式，还可以这样写：</p><p><code>sudo service nginx {start|stop|restart|reload|force-reload|status|configtest|rotate|upgrade}</code></p><p>当然还有基于信号的方式，这个访问效果更好：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#假设Nginx安装在/usr/local/nginx</span><br><span class="line">sudo /usr/local/nginx/nginx -s &#123;参数&#125;</span><br><span class="line">stop - 快速关机</span><br><span class="line">quit - 优雅的关机</span><br><span class="line">reload - 重新加载配置文件</span><br><span class="line">reopen - 重新打开日志文件</span><br></pre></td></tr></table></figure><p>检查配置，同时也是输出配置文件所在位置<br><code>/usr/local/nginx/nginx -t</code></p><p>修改配置后重载<br><code>/usr/local/nginx/nginx -s reload</code>  </p><h4 id="nginx启动和重新加载配置命令"><a href="#nginx启动和重新加载配置命令" class="headerlink" title="nginx启动和重新加载配置命令"></a>nginx启动和重新加载配置命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/openresty/nginx/sbin/nginx  -c /etc/nginx/nginx.conf</span><br><span class="line">/usr/local/openresty/nginx/sbin/nginx -s reload -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Nginx 安装后只有一个程序文件，本身并不提供各种管理程序，它是使用参数和系统信号机制对 Nginx 进程本身进行控制的。Nginx 的参数包括有如下几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-c：使用指定的配置文件而不是conf目录下的nginx.conf 。&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="nginx" scheme="http://macintosh-c.coding.me/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://macintosh-c.coding.me/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux下安装和升级Git</title>
    <link href="http://macintosh-c.coding.me/2019/12/06/Git/Linux%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%87%E7%BA%A7Git/"/>
    <id>http://macintosh-c.coding.me/2019/12/06/Git/Linux上安装和升级Git/</id>
    <published>2019-12-06T05:56:56.000Z</published>
    <updated>2019-12-06T07:23:16.950Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux-下安装和升级Git-系统版本为CentOS7"><a href="#Linux-下安装和升级Git-系统版本为CentOS7" class="headerlink" title="Linux 下安装和升级Git 系统版本为CentOS7"></a>Linux 下安装和升级Git 系统版本为CentOS7</h3><p>yum 安装<br><code>yum install git</code><br>查看git版本<br><code>git --version</code><br>但是通过 yum 安装的 git 版本为 1.8.3 版本太老，本人近期就遇到了git版本太老，导致clone代码仓库报错的问题，以下为升级操作，升级之前先要卸载之前的老版本Git<br><code>yum remove git</code></p><h4 id="1、查看-git-的版本发版界面"><a href="#1、查看-git-的版本发版界面" class="headerlink" title="1、查看 git 的版本发版界面"></a>1、查看 git 的版本发版界面</h4><p><a href="https://github.com/git/git/releases；发现最新版本为2.2.0" target="_blank" rel="noopener">https://github.com/git/git/releases；发现最新版本为2.2.0</a></p><h4 id="2、下载安装包"><a href="#2、下载安装包" class="headerlink" title="2、下载安装包"></a>2、下载安装包</h4><p>进入/usr/src目录，通过wget执行下载包的操作，我习惯在/usr/src下使用wget下载，只是个人习惯<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/src</span><br><span class="line">wget https://github.com/git/git/archive/v2.22.0.tar.gz</span><br></pre></td></tr></table></figure></p><h4 id="3、解压压缩包"><a href="#3、解压压缩包" class="headerlink" title="3、解压压缩包"></a>3、解压压缩包</h4><p><code>tar -zxvf v2.22.0.tar.gz</code></p><h4 id="4、安装依赖"><a href="#4、安装依赖" class="headerlink" title="4、安装依赖"></a>4、安装依赖</h4><p>安装编译码所需依赖，出现提示输入 Y 剩下只需等待即可<br><code>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker</code>  </p><h4 id="5、执行安装"><a href="#5、执行安装" class="headerlink" title="5、执行安装"></a>5、执行安装</h4><p>进入解压的文件夹，执行安装命令  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cd git-2.22.0</span><br><span class="line"></span><br><span class="line"># 执行编译，命令为</span><br><span class="line">make prefix=/usr/local/git all</span><br><span class="line"># 执行安装，命令为，安装到/usr/local/git</span><br><span class="line">make prefix=/usr/local/git install</span><br><span class="line"></span><br><span class="line">### 建议使用下面这组命令，上面的命令有可能会报错</span><br><span class="line"># 执行编译，命令为</span><br><span class="line">make CFLAGS=-liconv prefix=/usr/local/git all</span><br><span class="line"># 执行安装，命令为，安装到/usr/local/git</span><br><span class="line">make CFLAGS=-liconv prefix=/usr/local/git install</span><br></pre></td></tr></table></figure><p>如果执行的是 make prefix=/usr/local/git all，有可能出现以下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/usr/src/git-2.22.0/utf8.c:492：对‘libiconv’未定义的引用</span><br><span class="line">libgit.a(utf8.o)：在函数‘reencode_string_len’中：</span><br><span class="line">/usr/src/git-2.22.0/utf8.c:587：对‘libiconv_open’未定义的引用</span><br><span class="line">/usr/src/git-2.22.0/utf8.c:597：对‘libiconv_close’未定义的引用</span><br><span class="line">/usr/src/git-2.22.0/utf8.c:592：对‘libiconv_open’未定义的引用</span><br><span class="line">collect2: 错误：ld 返回 1</span><br><span class="line">make: *** [git-credential-store] 错误 1</span><br></pre></td></tr></table></figure><h4 id="6、建立软连接"><a href="#6、建立软连接" class="headerlink" title="6、建立软连接"></a>6、建立软连接</h4><p>以上正确安装后，查看 Git 版本 git –version 会报 -bash: git: 未找到命令 错误，原因是我们把git安装到了 /usr/local/git 目录下，git –version默认找的是 /usr/bin/git命令，刚才我们已经卸载了，可通过软连来操作  </p><pre><code># 先删除 /usr/bin/gitrm -rf /usr/bin/git# 创建ln -s /usr/local/git/bin/git /usr/bin/git</code></pre><p>再查看git –version即可<br>同时更新一下nss yum update -y nss curl libcurl<br>至此操作成功！！！</p><p>参考网址：<br><a href="http://www.baiyongj.com/news/493.html" target="_blank" rel="noopener">http://www.baiyongj.com/news/493.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux-下安装和升级Git-系统版本为CentOS7&quot;&gt;&lt;a href=&quot;#Linux-下安装和升级Git-系统版本为CentOS7&quot; class=&quot;headerlink&quot; title=&quot;Linux 下安装和升级Git 系统版本为CentOS7&quot;&gt;&lt;/a&gt;Li
      
    
    </summary>
    
      <category term="Git" scheme="http://macintosh-c.coding.me/categories/Git/"/>
    
    
      <category term="Git基础" scheme="http://macintosh-c.coding.me/tags/Git%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Mysql清空表(truncate)与删除表中数据(delete)的区别</title>
    <link href="http://macintosh-c.coding.me/2019/12/06/Databases/mysql/mysql%E6%B8%85%E7%A9%BA%E8%A1%A8/"/>
    <id>http://macintosh-c.coding.me/2019/12/06/Databases/mysql/mysql清空表/</id>
    <published>2019-12-06T04:49:36.000Z</published>
    <updated>2019-12-06T08:15:02.899Z</updated>
    
    <content type="html"><![CDATA[<p>以下是两种清空表中数据的方法：<br><code>truncate table wp_comments;</code><br><code>delete * from wp_comments;</code></p><p>其中truncate操作中的table可以省略，delete操作中的*可以省略。这两者都是将wp_comments表中数据清空，不过也是有区别的，如下：</p><ol><li>truncate是整体删除（速度较快）， delete是逐条删除（速度较慢）。</li><li>truncate不写服务器log，delete写服务器log，也就是truncate效率比delete高的原因。</li><li>truncate不激活trigger(触发器)，但是会重置Identity（标识列、自增字段），相当于自增列会被置为初始值，又重新从1开始记录，而不是接着原来的ID数。而delete删除以后，Identity依旧是接着被删除的最近的那一条记录ID加1后进行记录。</li><li>如果只需删除表中的部分记录，只能使用DELETE语句配合where条件。 DELETE FROM wp_comments WHERE……</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下是两种清空表中数据的方法：&lt;br&gt;&lt;code&gt;truncate table wp_comments;&lt;/code&gt;&lt;br&gt;&lt;code&gt;delete * from wp_comments;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中truncate操作中的table可以省略，del
      
    
    </summary>
    
      <category term="Database" scheme="http://macintosh-c.coding.me/categories/Database/"/>
    
    
      <category term="sql语句基础" scheme="http://macintosh-c.coding.me/tags/sql%E8%AF%AD%E5%8F%A5%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>mvn dependency:tree 使用详解</title>
    <link href="http://macintosh-c.coding.me/2019/12/06/Maven/%E8%BE%93%E5%87%BA%E5%B7%A5%E7%A8%8B%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/"/>
    <id>http://macintosh-c.coding.me/2019/12/06/Maven/输出工程依赖关系/</id>
    <published>2019-12-06T02:55:56.000Z</published>
    <updated>2019-12-12T08:41:11.081Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mvn-dependency-tree-使用详解"><a href="#mvn-dependency-tree-使用详解" class="headerlink" title="mvn dependency:tree 使用详解"></a>mvn dependency:tree 使用详解</h3><p>在实际开发过程中，会经常碰到maven依赖冲突的问题，导致编译的时候报一些异常，这里提供一个查询包结构间的依赖关系的方法，来解决问题</p><p>指令：mvn dependency:tree -Dverbose&gt;temp/tree.txt</p><p>该命令是打印详细的maven tree 并放入当前目录下的temp目录下的tree.txt (需要自己新建temp目录)，打印到txt中更加方便排查。</p><p>生成的txt文件中<br>最后写着compile的就是编译成功的<br>最后写着omitted for duplicate的就是有JAR包被重复依赖了，但是JAR包的版本是一样的<br>最后写着omitted for conflict with xx的，说明和别的JAR包版本冲突了，该行的JAR包不会被引入<br>通过在txt文件中检索上传关键字conflict可以找到冲突的jar包所在，从而去除掉。</p><p>去除方法：<exclusions>标签<br>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;exclusions&gt;</span><br><span class="line">     &lt;exclusion&gt;</span><br><span class="line">          &lt;groupId&gt;net.minidev&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;json-smart&lt;/artifactId&gt;</span><br><span class="line">      &lt;/exclusion&gt;</span><br><span class="line">&lt;/exclusions&gt;</span><br></pre></td></tr></table></figure></exclusions></p><p>去除掉这个依赖就ok啦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mvn-dependency-tree-使用详解&quot;&gt;&lt;a href=&quot;#mvn-dependency-tree-使用详解&quot; class=&quot;headerlink&quot; title=&quot;mvn dependency:tree 使用详解&quot;&gt;&lt;/a&gt;mvn dependency
      
    
    </summary>
    
      <category term="Maven" scheme="http://macintosh-c.coding.me/categories/Maven/"/>
    
    
      <category term="Maven" scheme="http://macintosh-c.coding.me/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>jenkins用户权限管理</title>
    <link href="http://macintosh-c.coding.me/2019/10/09/Jenkins/jenkins%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    <id>http://macintosh-c.coding.me/2019/10/09/Jenkins/jenkins用户管理/</id>
    <published>2019-10-09T08:50:56.000Z</published>
    <updated>2019-10-09T05:57:34.107Z</updated>
    
    <content type="html"><![CDATA[<p>jenkins默认的权限管理并没有用户组的概念，所以我们需要第三方插件的支持来解决问题</p><h3 id="1-插件安装"><a href="#1-插件安装" class="headerlink" title="1.插件安装"></a>1.插件安装</h3><p>插件：Role-based Authorization Strategy<br>版本：2.3.2</p><h3 id="2-全局安全配置"><a href="#2-全局安全配置" class="headerlink" title="2.全局安全配置"></a>2.全局安全配置</h3><p>进入Jenkins后点击系统管理进入全局安全配置,当插件安装好的时候，授权策略会多出一个Role-Based Strategy选项，选择该项并保存<br><img src="/img/Jenkins/jenkins1.png" alt="jenkins1"></p><h3 id="3-管理和分配角色"><a href="#3-管理和分配角色" class="headerlink" title="3.管理和分配角色"></a>3.管理和分配角色</h3><p>在系统管理页面进入 Manage and Assign Roles</p><ol><li>管理角色<br>点击manage roles<br>1)设置全局角色（全局角色可以对jenkins系统进行设置与项目的操作）<br>admin:对整个jenkins都可以进行操作<br>ops:可以对所有的job进行管理<br>other:只有读的权限<br><img src="/img/Jenkins/jenkins2.png" alt="jenkins2"><br>2)设置项目角色（项目角色只能对项目进行操作)<br>假设目前jenkins工作中有一个simple-java-maven-app的项目，设置如下roles。<br>jenkins_test_manage:simple-java-maven-app的管理人员<br>jenkins_test_user:simple-java-maven-app的普通用户<br><img src="/img/Jenkins/jenkins3.png" alt="jenkins3"></li><li>创建用户<br>系统管理页面的管理用户,分别创建几个用户,我这边除了之前的admin用户，另外新增了test,test2,test3三个用户，用于测试。</li><li>分配角色<br>系统管理页面进入Manage and Assign Roles,点击assign roles<br>1) 分配全局角色<br><img src="/img/Jenkins/jenkins4.png" alt="jenkins4"><br>2) 分配项目角色<br><img src="/img/Jenkins/jenkins5.png" alt="jenkins5"></li></ol><h3 id="4-查看分配结果"><a href="#4-查看分配结果" class="headerlink" title="4.查看分配结果"></a>4.查看分配结果</h3><ol><li>admin用户进入系统可以看到所有的系统管理权限和所有的项目</li><li>test2和test3没有系统管理权限但是可以管理项目</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;jenkins默认的权限管理并没有用户组的概念，所以我们需要第三方插件的支持来解决问题&lt;/p&gt;
&lt;h3 id=&quot;1-插件安装&quot;&gt;&lt;a href=&quot;#1-插件安装&quot; class=&quot;headerlink&quot; title=&quot;1.插件安装&quot;&gt;&lt;/a&gt;1.插件安装&lt;/h3&gt;&lt;p&gt;插件：
      
    
    </summary>
    
      <category term="jenkins" scheme="http://macintosh-c.coding.me/categories/jenkins/"/>
    
    
      <category term="jenkins用户权限管理" scheme="http://macintosh-c.coding.me/tags/jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>docker安装jenkins</title>
    <link href="http://macintosh-c.coding.me/2019/10/09/Jenkins/docker%E5%AE%89%E8%A3%85jenkins/"/>
    <id>http://macintosh-c.coding.me/2019/10/09/Jenkins/docker安装jenkins/</id>
    <published>2019-10-09T08:45:56.000Z</published>
    <updated>2019-10-09T05:01:20.803Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-系统要求"><a href="#1-系统要求" class="headerlink" title="1.系统要求"></a>1.系统要求</h3><ul><li>最低推荐配置:<br>256MB可用内存<br>1GB可用磁盘空间(作为一个Docker容器运行jenkins的话推荐10GB)</li><li>为小团队推荐的硬件配置:<br>1GB+可用内存<br>50 GB+ 可用磁盘空间</li><li>软件配置:<br>Java 8—​无论是Java运行时环境（JRE）还是Java开发工具包（JDK）都可以。<br>注意: 如果将Jenkins作为Docker 容器运行，这不是必需的</li></ul><h3 id="2-安装docker"><a href="#2-安装docker" class="headerlink" title="2.安装docker"></a>2.安装docker</h3><p><a href="http://macintosh-c.coding.me/2019/09/24/Docker/docker安装/">安装docker</a></p><h3 id="3-在Docker中下载并运行Jenkins"><a href="#3-在Docker中下载并运行Jenkins" class="headerlink" title="3.在Docker中下载并运行Jenkins"></a>3.在Docker中下载并运行Jenkins</h3><p>建议使用的Docker映像是jenkinsci/blueocean image(来自 the Docker Hub repository)。 该镜像包含当前的长期支持 (LTS) 的Jenkins版本 （可以投入使用） ，捆绑了所有Blue Ocean插件和功能。这意味着你不需要单独安装Blue Ocean插件。<br>下载 jenkinsci/blueocean 镜像并使用以下docker run 命令将其作为Docker中的容器运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -u root -d -v /home/barry.cao/jenkins_home:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -e JAVA_OPTS=&apos;-Duser.timezone=Asia/Shanghai&apos; -p 8080:8080 -p 50000:50000 jenkinsci/blueocean</span><br></pre></td></tr></table></figure></p><p>注意以下几点：</p><ol><li>映射在容器中的<code>/var/jenkins_home</code> 目录到具有名字 jenkins-data 的volume。 如果这个卷不存在，那么这个 docker run 命令会自动为你创建卷。 如果您希望每次重新启动Jenkins（通过此 docker run … 命令）时保持Jenkins状态，则此选项是必需的 。 如果你没有指定这个选项，那么在每次重新启动后，Jenkins将有效地重置为新的实例。</li><li>/var/run/docker.sock 表示Docker守护程序通过其监听的基于Unix的套接字。 该映射允许 jenkinsci/blueocean 容器与Docker守护进程通信， 如果 jenkinsci/blueocean 容器需要实例化其他Docker容器，则该守护进程是必需的。 如果运行声明式管道，其语法包含agent部分用 docker<br>例如， agent { docker { … } } 此选项是必需的</li><li>jenkinsci/blueocean Docker镜像本身。如果此镜像尚未下载，则此 docker run 命令 将自动为您下载镜像。此外，如果自上次运行此命令后发布了此镜像的任何更新， 则再次运行此命令将自动为您下载这些已发布的镜像更新。 注意：这个Docker镜像也可以使用以下 docker pull命令独立下载（或更新） ： docker pull jenkinsci/blueocean</li><li>Duser.timezone=Asia/Shanghai为校准时区</li></ol><h3 id="4-安装后设置向导"><a href="#4-安装后设置向导" class="headerlink" title="4.安装后设置向导"></a>4.安装后设置向导</h3><ol><li>解锁 Jenkins<br>当您第一次访问新的Jenkins实例时，系统会要求您使用自动生成的密码对其进行解锁。浏览到 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> （或安装时为Jenkins配置的任何端口），并等待 解锁 Jenkins 页面出现。<br>可以从提示的路径文件中方便的找到解锁密钥。</li><li>自定义jenkins插件<br>解锁 Jenkins之后，在 Customize Jenkins 页面内， 您可以安装任何数量的有用插件作为您初始步骤的一部分。两个选项可以设置:<br>安装建议的插件 - 安装推荐的一组插件，这些插件基于最常见的用例.<br>选择要安装的插件 - 选择安装的插件集。当你第一次访问插件选择页面时，默认选择建议的插件。</li><li>创建第一个管理员用户<br>最后，在customizing Jenkins with plugins之后，Jenkins要求您创建第一个管理员用户。出现“ 创建第一个管理员用户 ”页面时， 请在各个字段中指定管理员用户的详细信息，然后单击 保存完成 。 当 Jenkins准备好了 出现时，单击<em>开始使用 Jenkins</em>。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-系统要求&quot;&gt;&lt;a href=&quot;#1-系统要求&quot; class=&quot;headerlink&quot; title=&quot;1.系统要求&quot;&gt;&lt;/a&gt;1.系统要求&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;最低推荐配置:&lt;br&gt;256MB可用内存&lt;br&gt;1GB可用磁盘空间(作为一个Docker容器运行
      
    
    </summary>
    
      <category term="jenkins" scheme="http://macintosh-c.coding.me/categories/jenkins/"/>
    
    
      <category term="jenkins" scheme="http://macintosh-c.coding.me/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot使用单元测试</title>
    <link href="http://macintosh-c.coding.me/2019/10/06/spring/Springboot/springboot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://macintosh-c.coding.me/2019/10/06/spring/Springboot/springboot单元测试/</id>
    <published>2019-10-05T17:29:05.000Z</published>
    <updated>2019-12-06T09:39:50.302Z</updated>
    
    <content type="html"><![CDATA[<p>这次来介绍下Spring Boot中对单元测试的整合使用，本篇会通过以下4点来介绍，基本满足日常需求</p><ul><li>Service层单元测试</li><li>Controller层单元测试</li><li>新断言assertThat使用</li><li>单元测试的回滚</li></ul><p>Spring Boot中引入单元测试很简单，依赖如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h4 id="Service单元测试"><a href="#Service单元测试" class="headerlink" title="Service单元测试"></a>Service单元测试</h4><p>Spring Boot中单元测试类写在在src/test/java目录下，你可以手动创建具体测试类，如果是IDEA，则可以通过IDEA自动创建测试类,点击Navigate=&gt;Test，然后再编写创建好的测试类，具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.dudu.service;</span><br><span class="line">import com.dudu.domain.LearnResource;</span><br><span class="line">import org.junit.Assert;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line">import static org.hamcrest.CoreMatchers.*;</span><br><span class="line"></span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class LearnServiceTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private LearnService learnService;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void getLearn()&#123;</span><br><span class="line">        LearnResource learnResource=learnService.selectByKey(1001L);</span><br><span class="line">        Assert.assertThat(learnResource.getAuthor(),is(&quot;嘟嘟MD独立博客&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面就是最简单的单元测试写法，顶部只要@RunWith(SpringRunner.class)和SpringBootTest即可，想要执行的时候，鼠标放在对应的方法，右键选择run该方法即可。测试用例中我使用了assertThat断言，下文中会介绍，也推荐大家使用该断言。</p><h4 id="Controller单元测试"><a href="#Controller单元测试" class="headerlink" title="Controller单元测试"></a>Controller单元测试</h4><p>上面只是针对Service层做测试，但是有时候需要对Controller层（API）做测试，这时候就得用到MockMvc了，你可以不必启动工程就能测试这些接口。</p><p>MockMvc实现了对Http请求的模拟，能够直接使用网络的形式，转换到Controller的调用，这样可以使得测试速度快、不依赖网络环境，而且提供了一套验证的工具，这样可以使得请求的验证统一而且很方便。</p><p>Controller类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">package com.dudu.controller;</span><br><span class="line"></span><br><span class="line">/** 教程页面</span><br><span class="line"> * Created by tengj on 2017/3/13.</span><br><span class="line"> */</span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/learn&quot;)</span><br><span class="line">public class LearnController  extends AbstractController&#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private LearnService learnService;</span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(this.getClass());</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&quot;)</span><br><span class="line">    public String learn(Model model)&#123;</span><br><span class="line">        model.addAttribute(&quot;ctx&quot;, getContextPath()+&quot;/&quot;);</span><br><span class="line">        return &quot;learn-resource&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询教程列表</span><br><span class="line">     * @param page</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value = &quot;/queryLeanList&quot;,method = RequestMethod.POST)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public AjaxObject queryLearnList(Page&lt;LeanQueryLeanListReq&gt; page)&#123;</span><br><span class="line">        List&lt;LearnResource&gt; learnList=learnService.queryLearnResouceList(page);</span><br><span class="line">        PageInfo&lt;LearnResource&gt; pageInfo =new PageInfo&lt;LearnResource&gt;(learnList);</span><br><span class="line">        return AjaxObject.ok().put(&quot;page&quot;, pageInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 新添教程</span><br><span class="line">     * @param learn</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value = &quot;/add&quot;,method = RequestMethod.POST)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public AjaxObject addLearn(@RequestBody LearnResource learn)&#123;</span><br><span class="line">        learnService.save(learn);</span><br><span class="line">        return AjaxObject.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 修改教程</span><br><span class="line">     * @param learn</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value = &quot;/update&quot;,method = RequestMethod.POST)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public AjaxObject updateLearn(@RequestBody LearnResource learn)&#123;</span><br><span class="line">        learnService.updateNotNull(learn);</span><br><span class="line">        return AjaxObject.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除教程</span><br><span class="line">     * @param ids</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value=&quot;/delete&quot;,method = RequestMethod.POST)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public AjaxObject deleteLearn(@RequestBody Long[] ids)&#123;</span><br><span class="line">        learnService.deleteBatch(ids);</span><br><span class="line">        return AjaxObject.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取教程</span><br><span class="line">     * @param id</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value=&quot;/resource/&#123;id&#125;&quot;,method = RequestMethod.GET)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public LearnResource qryLearn(@PathVariable(value = &quot;id&quot;) Long id)&#123;</span><br><span class="line">       LearnResource lean= learnService.selectByKey(id);</span><br><span class="line">        return lean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里我们也自动创建一个Controller的测试类，具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">package com.dudu.controller;</span><br><span class="line"></span><br><span class="line">import com.dudu.domain.User;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.http.MediaType;</span><br><span class="line">import org.springframework.mock.web.MockHttpSession;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line">import org.springframework.test.web.servlet.MockMvc;</span><br><span class="line">import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class="line">import org.springframework.test.web.servlet.result.MockMvcResultHandlers;</span><br><span class="line">import org.springframework.test.web.servlet.result.MockMvcResultMatchers;</span><br><span class="line">import org.springframework.test.web.servlet.setup.MockMvcBuilders;</span><br><span class="line">import org.springframework.web.context.WebApplicationContext;</span><br><span class="line"></span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line"></span><br><span class="line">public class LearnControllerTest &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private WebApplicationContext wac;</span><br><span class="line"></span><br><span class="line">    private MockMvc mvc;</span><br><span class="line">    private MockHttpSession session;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void setupMockMvc()&#123;</span><br><span class="line">        mvc = MockMvcBuilders.webAppContextSetup(wac).build(); //初始化MockMvc对象</span><br><span class="line">        session = new MockHttpSession();</span><br><span class="line">        User user =new User(&quot;root&quot;,&quot;root&quot;);</span><br><span class="line">        session.setAttribute(&quot;user&quot;,user); //拦截器那边会判断用户是否登录，所以这里注入一个用户</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 新增教程测试用例</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void addLearn() throws Exception&#123;</span><br><span class="line">        String json=&quot;&#123;\&quot;author\&quot;:\&quot;HAHAHAA\&quot;,\&quot;title\&quot;:\&quot;Spring\&quot;,\&quot;url\&quot;:\&quot;http://tengj.top/\&quot;&#125;&quot;;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.post(&quot;/learn/add&quot;)</span><br><span class="line">                    .accept(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                    .content(json.getBytes()) //传json参数</span><br><span class="line">                    .session(session)</span><br><span class="line">            )</span><br><span class="line">           .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">           .andDo(MockMvcResultHandlers.print());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取教程测试用例</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void qryLearn() throws Exception &#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(&quot;/learn/resource/1001&quot;)</span><br><span class="line">                    .contentType(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                    .accept(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                    .session(session)</span><br><span class="line">            )</span><br><span class="line">           .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">           .andExpect(MockMvcResultMatchers.jsonPath(&quot;$.author&quot;).value(&quot;嘟嘟MD独立博客&quot;))</span><br><span class="line">           .andExpect(MockMvcResultMatchers.jsonPath(&quot;$.title&quot;).value(&quot;Spring Boot干货系列&quot;))</span><br><span class="line">           .andDo(MockMvcResultHandlers.print());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 修改教程测试用例</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void updateLearn() throws Exception&#123;</span><br><span class="line">        String json=&quot;&#123;\&quot;author\&quot;:\&quot;测试修改\&quot;,\&quot;id\&quot;:1031,\&quot;title\&quot;:\&quot;Spring Boot干货系列\&quot;,\&quot;url\&quot;:\&quot;http://tengj.top/\&quot;&#125;&quot;;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.post(&quot;/learn/update&quot;)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                .content(json.getBytes())//传json参数</span><br><span class="line">                .session(session)</span><br><span class="line">        )</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andDo(MockMvcResultHandlers.print());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除教程测试用例</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void deleteLearn() throws Exception&#123;</span><br><span class="line">        String json=&quot;[1031]&quot;;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.post(&quot;/learn/delete&quot;)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                .content(json.getBytes())//传json参数</span><br><span class="line">                .session(session)</span><br><span class="line">        )</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andDo(MockMvcResultHandlers.print());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面实现了基本的增删改查的测试用例，使用MockMvc的时候需要先用MockMvcBuilders使用构建MockMvc对象，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Before</span><br><span class="line">public void setupMockMvc()&#123;</span><br><span class="line">    mvc = MockMvcBuilders.webAppContextSetup(wac).build(); //初始化MockMvc对象</span><br><span class="line">    session = new MockHttpSession();</span><br><span class="line">    User user =new User(&quot;root&quot;,&quot;root&quot;);</span><br><span class="line">    session.setAttribute(&quot;user&quot;,user); //拦截器那边会判断用户是否登录，所以这里注入一个用户</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为拦截器那边会判断是否登录，所以这里我注入了一个用户，你也可以直接修改拦截器取消验证用户登录，先测试完再开启。</p><p>这里拿一个例子来介绍一下MockMvc简单的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取教程测试用例</span><br><span class="line"> * @throws Exception</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void qryLearn() throws Exception &#123;</span><br><span class="line">    mvc.perform(MockMvcRequestBuilders.get(&quot;/learn/resource/1001&quot;)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                .session(session)</span><br><span class="line">        )</span><br><span class="line">       .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">       .andExpect(MockMvcResultMatchers.jsonPath(&quot;$.author&quot;).value(&quot;嘟嘟MD独立博客&quot;))</span><br><span class="line">       .andExpect(MockMvcResultMatchers.jsonPath(&quot;$.title&quot;).value(&quot;Spring Boot干货系列&quot;))</span><br><span class="line">       .andDo(MockMvcResultHandlers.print());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>mockMvc.perform执行一个请求</li><li>MockMvcRequestBuilders.get(“/user/1”)构造一个请求，Post请求就用.post方法</li><li>contentType(MediaType.APPLICATION_JSON_UTF8)代表发送端发送的数据格式是application/json;charset=UTF-8</li><li>accept(MediaType.APPLICATION_JSON_UTF8)代表客户端希望接受的数据类型为application/json;charset=UTF-8</li><li>session(session)注入一个session，这样拦截器才可以通过</li><li>ResultActions.andExpect添加执行完成后的断言</li><li>ResultActions.andExpect(MockMvcResultMatchers.status().isOk())方法看请求的状态响应码是否为200如果不是则抛异常，测试不通过</li><li>andExpect(MockMvcResultMatchers.jsonPath(“$.author”).value(“嘟嘟MD独立博客”))这里jsonPath用来获取author字段比对是否为嘟嘟MD独立博客,不是就测试不通过</li><li>ResultActions.andDo添加一个结果处理器，表示要对结果做点什么事情，比如此处使用MockMvcResultHandlers.print()输出整个响应结果信息</li></ol><h4 id="新断言assertThat使用"><a href="#新断言assertThat使用" class="headerlink" title="新断言assertThat使用"></a>新断言assertThat使用</h4><p>JUnit 4.4 结合 Hamcrest 提供了一个全新的断言语法——assertThat。程序员可以只使用 assertThat 一个断言语句，结合 Hamcrest 提供的匹配符，就可以表达全部的测试思想，我们引入的版本是Junit4.12所以支持assertThat。</p><h5 id="assertThat-的基本语法如下："><a href="#assertThat-的基本语法如下：" class="headerlink" title="assertThat 的基本语法如下："></a>assertThat 的基本语法如下：</h5><p><code>assertThat( [value], [matcher statement] );</code></p><ul><li>value 是接下来想要测试的变量值；</li><li>matcher statement 是使用 Hamcrest 匹配符来表达的对前面变量所期望的值的声明，如果 value 值与 matcher statement 所表达的期望值相符，则测试成功，否则测试失败。</li></ul><h5 id="assertThat-的优点"><a href="#assertThat-的优点" class="headerlink" title="assertThat 的优点"></a>assertThat 的优点</h5><ul><li>优点 1：以前 JUnit 提供了很多的 assertion 语句，如：assertEquals，assertNotSame，assertFalse，assertTrue，assertNotNull，assertNull 等，现在有了 JUnit 4.4，一条 assertThat 即可以替代所有的 assertion 语句，这样可以在所有的单元测试中只使用一个断言方法，使得编写测试用例变得简单，代码风格变得统一，测试代码也更容易维护。</li><li><p>优点 2：assertThat 使用了 Hamcrest 的 Matcher 匹配符，用户可以使用匹配符规定的匹配准则精确的指定一些想设定满足的条件，具有很强的易读性，而且使用起来更加灵活。如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 想判断某个字符串 s 是否含有子字符串 &quot;developer&quot; 或 &quot;Works&quot; 中间的一个</span><br><span class="line">// JUnit 4.4 以前的版本：assertTrue(s.indexOf(&quot;developer&quot;)&gt;-1||s.indexOf(&quot;Works&quot;)&gt;-1 );</span><br><span class="line">// JUnit 4.4：</span><br><span class="line">assertThat(s, anyOf(containsString(&quot;developer&quot;), containsString(&quot;Works&quot;))); </span><br><span class="line">// 匹配符 anyOf 表示任何一个条件满足则成立，类似于逻辑或 &quot;||&quot;， 匹配符 containsString 表示是否含有参数子 </span><br><span class="line">// 字符串，文章接下来会对匹配符进行具体介绍</span><br></pre></td></tr></table></figure></li><li><p>优点 3：assertThat 不再像 assertEquals 那样，使用比较难懂的“谓宾主”语法模式（如：assertEquals(3, x);），相反，assertThat 使用了类似于“主谓宾”的易读语法模式（如：assertThat(x,is(3));），使得代码更加直观、易读。</p></li><li>优点 4：可以将这些 Matcher 匹配符联合起来灵活使用，达到更多目的。如下所示： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">字符相关匹配符</span><br><span class="line">/**equalTo匹配符断言被测的testedValue等于expectedValue，</span><br><span class="line">* equalTo可以断言数值之间，字符串之间和对象之间是否相等，相当于Object的equals方法</span><br><span class="line">*/</span><br><span class="line">assertThat(testedValue, equalTo(expectedValue));</span><br><span class="line">/**equalToIgnoringCase匹配符断言被测的字符串testedString</span><br><span class="line">*在忽略大小写的情况下等于expectedString</span><br><span class="line">*/</span><br><span class="line">assertThat(testedString, equalToIgnoringCase(expectedString));</span><br><span class="line">/**equalToIgnoringWhiteSpace匹配符断言被测的字符串testedString</span><br><span class="line">*在忽略头尾的任意个空格的情况下等于expectedString，</span><br><span class="line">*注意：字符串中的空格不能被忽略</span><br><span class="line">*/</span><br><span class="line">assertThat(testedString, equalToIgnoringWhiteSpace(expectedString);</span><br><span class="line">/**containsString匹配符断言被测的字符串testedString包含子字符串subString**/</span><br><span class="line">assertThat(testedString, containsString(subString) );</span><br><span class="line">/**endsWith匹配符断言被测的字符串testedString以子字符串suffix结尾*/</span><br><span class="line">assertThat(testedString, endsWith(suffix));</span><br><span class="line">/**startsWith匹配符断言被测的字符串testedString以子字符串prefix开始*/</span><br><span class="line">assertThat(testedString, startsWith(prefix));</span><br><span class="line">一般匹配符</span><br><span class="line">/**nullValue()匹配符断言被测object的值为null*/</span><br><span class="line">assertThat(object,nullValue());</span><br><span class="line">/**notNullValue()匹配符断言被测object的值不为null*/</span><br><span class="line">assertThat(object,notNullValue());</span><br><span class="line">/**is匹配符断言被测的object等于后面给出匹配表达式*/</span><br><span class="line">assertThat(testedString, is(equalTo(expectedValue)));</span><br><span class="line">/**is匹配符简写应用之一，is(equalTo(x))的简写，断言testedValue等于expectedValue*/</span><br><span class="line">assertThat(testedValue, is(expectedValue));</span><br><span class="line">/**is匹配符简写应用之二，is(instanceOf(SomeClass.class))的简写，</span><br><span class="line">*断言testedObject为Cheddar的实例</span><br><span class="line">*/</span><br><span class="line">assertThat(testedObject, is(Cheddar.class));</span><br><span class="line">/**not匹配符和is匹配符正好相反，断言被测的object不等于后面给出的object*/</span><br><span class="line">assertThat(testedString, not(expectedString));</span><br><span class="line">/**allOf匹配符断言符合所有条件，相当于“与”（&amp;&amp;）*/</span><br><span class="line">assertThat(testedNumber, allOf( greaterThan(8), lessThan(16) ) );</span><br><span class="line">/**anyOf匹配符断言符合条件之一，相当于“或”（||）*/</span><br><span class="line">assertThat(testedNumber, anyOf( greaterThan(16), lessThan(8) ) );</span><br><span class="line">数值相关匹配符</span><br><span class="line">/**closeTo匹配符断言被测的浮点型数testedDouble在20.0¡À0.5范围之内*/</span><br><span class="line">assertThat(testedDouble, closeTo( 20.0, 0.5 ));</span><br><span class="line">/**greaterThan匹配符断言被测的数值testedNumber大于16.0*/</span><br><span class="line">assertThat(testedNumber, greaterThan(16.0));</span><br><span class="line">/** lessThan匹配符断言被测的数值testedNumber小于16.0*/</span><br><span class="line">assertThat(testedNumber, lessThan (16.0));</span><br><span class="line">/** greaterThanOrEqualTo匹配符断言被测的数值testedNumber大于等于16.0*/</span><br><span class="line">assertThat(testedNumber, greaterThanOrEqualTo (16.0));</span><br><span class="line">/** lessThanOrEqualTo匹配符断言被测的testedNumber小于等于16.0*/</span><br><span class="line">assertThat(testedNumber, lessThanOrEqualTo (16.0));</span><br><span class="line">集合相关匹配符</span><br><span class="line">/**hasEntry匹配符断言被测的Map对象mapObject含有一个键值为&quot;key&quot;对应元素值为&quot;value&quot;的Entry项*/</span><br><span class="line">assertThat(mapObject, hasEntry(&quot;key&quot;, &quot;value&quot; ) );</span><br><span class="line">/**hasItem匹配符表明被测的迭代对象iterableObject含有元素element项则测试通过*/</span><br><span class="line">assertThat(iterableObject, hasItem (element));</span><br><span class="line">/** hasKey匹配符断言被测的Map对象mapObject含有键值“key”*/</span><br><span class="line">assertThat(mapObject, hasKey (&quot;key&quot;));</span><br><span class="line">/** hasValue匹配符断言被测的Map对象mapObject含有元素值value*/</span><br><span class="line">assertThat(mapObject, hasValue(value));</span><br></pre></td></tr></table></figure></li></ul><h4 id="单元测试回滚"><a href="#单元测试回滚" class="headerlink" title="单元测试回滚"></a>单元测试回滚</h4><p>单元个测试的时候如果不想造成垃圾数据，可以开启事物功能，记在方法或者类头部添加@Transactional注解即可,如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">@Transactional</span><br><span class="line">public void add()&#123;</span><br><span class="line">    LearnResource bean = new LearnResource();</span><br><span class="line">    bean.setAuthor(&quot;测试回滚&quot;);</span><br><span class="line">    bean.setTitle(&quot;回滚用例&quot;);</span><br><span class="line">    bean.setUrl(&quot;http://tengj.top&quot;);</span><br><span class="line">    learnService.save(bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样测试完数据就会回滚了，不会造成垃圾数据。如果你想关闭回滚，只要加上@Rollback(false)注解即可。@Rollback表示事务执行完回滚，支持传入一个参数value，默认true即回滚，false不回滚。如果你使用的数据库是Mysql，有时候会发现加了注解@Transactional 也不会回滚，那么你就要查看一下你的默认引擎是不是InnoDB，如果不是就要改成InnoDB。</p><p>附：MyISAM与InnoDB是mysql目前比较常用的两个数据库存储引擎，MyISAM与InnoDB的主要的不同点在于性能和事务控制上。这里简单的介绍一下两者间的区别和转换方法：</p><p>MyISAM：MyISAM是MySQL5.5之前版本默认的数据库存储引擎。MYISAM提供高速存储和检索，以及全文搜索能力，适合数据仓库等查询频繁的应用。但不支持事务、也不支持外键。MyISAM格式的一个重要缺陷就是不能在表损坏后恢复数据。<br>InnoDB：InnoDB是MySQL5.5版本的默认数据库存储引擎，不过InnoDB已被Oracle收购，MySQL自行开发的新存储引擎Falcon将在MySQL6.0版本引进。InnoDB具有提交、回滚和崩溃恢复能力的事务安全。但是比起MyISAM存储引擎，InnoDB写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引。尽管如此，但是InnoDB包括了对事务处理和外来键的支持，这两点都是MyISAM引擎所没有的。<br>MyISAM适合：(1)做很多count 的计算；(2)插入不频繁，查询非常频繁；(3)没有事务。<br>InnoDB适合：(1)可靠性要求比较高，或者要求事务；(2)表更新和查询都相当的频繁，并且表锁定的机会比较大的情况。(4)性能较好的服务器，比如单独的数据库服务器，像阿里云的关系型数据库RDS就推荐使用InnoDB引擎。<br>修改默认引擎的步骤<br>查看MySQL当前默认的存储引擎:<br> <code>mysql&gt; show variables like &#39;%storage_engine%&#39;;</code><br> 你要看user表用了什么引擎(在显示结果里参数engine后面的就表示该表当前用的存储引擎):<br> <code>mysql&gt; show create table user;</code><br> 将user表修为InnoDB存储引擎(也可以此命令将InnoDB换为MyISAM)：<br> <code>mysql&gt; ALTER TABLE user ENGINE=INNODB;</code><br> 如果要更改整个数据库表的存储引擎，一般要一个表一个表的修改，比较繁琐，可以采用先把数据库导出，得到SQL，把MyISAM全部替换为INNODB，再导入数据库的方式。<br> 转换完毕后重启mysql<br> <code>service mysqld restart</code></p><p> 参考网址：<br> <a href="https://blog.csdn.net/sz85850597/article/details/80427408" target="_blank" rel="noopener">https://blog.csdn.net/sz85850597/article/details/80427408</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这次来介绍下Spring Boot中对单元测试的整合使用，本篇会通过以下4点来介绍，基本满足日常需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service层单元测试&lt;/li&gt;
&lt;li&gt;Controller层单元测试&lt;/li&gt;
&lt;li&gt;新断言assertThat使用&lt;/li&gt;
&lt;li&gt;单
      
    
    </summary>
    
      <category term="Springboot" scheme="http://macintosh-c.coding.me/categories/Springboot/"/>
    
    
      <category term="Springboot test" scheme="http://macintosh-c.coding.me/tags/Springboot-test/"/>
    
  </entry>
  
  <entry>
    <title>docker安装sonar</title>
    <link href="http://macintosh-c.coding.me/2019/09/30/test/Sonar/docker%E5%AE%89%E8%A3%85sonar/"/>
    <id>http://macintosh-c.coding.me/2019/09/30/test/Sonar/docker安装sonar/</id>
    <published>2019-09-30T08:45:56.000Z</published>
    <updated>2019-09-30T09:39:05.270Z</updated>
    
    <content type="html"><![CDATA[<p>今天用docker在服务器上部署了个sonar，并push代码进行检测，各种指数相当低，先不谈代码优化，记录下在部署过程中碰到的个坑</p><h3 id="1-安装docker，docker-compose"><a href="#1-安装docker，docker-compose" class="headerlink" title="1.安装docker，docker-compose"></a>1.安装docker，docker-compose</h3><p><a href="http://macintosh-c.coding.me/2019/09/24/Docker/docker安装/">安装docker</a><br><a href="http://macintosh-c.coding.me/2019/09/25/Docker/DockerCompose/">安装docker-compose</a></p><h3 id="2-部署sonar"><a href="#2-部署sonar" class="headerlink" title="2.部署sonar"></a>2.部署sonar</h3><p>docker部署sonar很简单，一句命令就行了，如下：<br><code>docker run -d --name sonarqube -p 9000:9000 sonarqube</code><br>之后便可以访问指定服务器的9000端口访问sonar，默认账户密码：admin/admin</p><p>此时会发现用的是内嵌的数据库，内嵌数据库无法扩展，也无法升级到新版本的SonarQube，并且不能支持将你的数据迁移至其他数据库引擎，内嵌数据库只能用于测试场景，于是使用链接数据库的方式重新部署，这里采用postgre。</p><p>docker stop，docker rm，一顿乱操作删除了之前创建的sonar，再调研一番如何链接postgre数据库，看上去也很简单，一种是docker启动的时候配置关于database参数。第二个也是大多数blog写的使用docker-compose同时部署了sonar和postgre两个docker容器，之间关联，一个docker-compose.yaml文件搞定。<br>讲真，第二种我试了，访问sonar貌似并没有链接数据库，可能脚本方面还存在什么问题，由于目前已经有了postgre服务，所以第二种没有去深究，想采用第一种方式，只增加部署一个sonar，试了，踩了个大坑如下：</p><h3 id="3-部署sonar关联postgre数据库"><a href="#3-部署sonar关联postgre数据库" class="headerlink" title="3.部署sonar关联postgre数据库"></a>3.部署sonar关联postgre数据库</h3><p>部署命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name sonarqube -e SONARQUBE_JDBC_URL=jdbc:postgresql://*****:5432/sonar -e</span><br><span class="line"> POSTGRES_USER=sonar -e POSTGRES_PASSWORD=123456  -p 9000:9000 -d sonarqube</span><br></pre></td></tr></table></figure></p><p>（其中sonar服务的地址，账户，密码根据自己实际的参数）<br>容器启动后总是莫名stop掉，通过docker logs查看日记发现有这么一句报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: [1] bootstrap checks failed</span><br><span class="line">max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br></pre></td></tr></table></figure><p>一脸懵，貌似跟Elasticsearch启动有啥关系，试了网上的很多种方法都不管用，翻译下面那句报错为：elasticsearch用户拥有的内存权限太小，至少需要262144，继续百度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">解决：</span><br><span class="line">切换到root用户</span><br><span class="line">执行命令：</span><br><span class="line">sysctl -w vm.max_map_count=262144</span><br><span class="line">查看结果：</span><br><span class="line">sysctl -a|grep vm.max_map_count</span><br><span class="line">显示：</span><br><span class="line">vm.max_map_count = 262144</span><br><span class="line"></span><br><span class="line">上述方法修改之后，如果重启虚拟机将失效，所以：</span><br><span class="line">解决办法：</span><br><span class="line">在   /etc/sysctl.conf文件最后添加一行</span><br><span class="line">vm.max_map_count=262144</span><br><span class="line">即可永久修改</span><br></pre></td></tr></table></figure></p><p>再次启动，ok，打开sonar，界面最下面关于内嵌数据库的提醒没了，查看postgre，发现有数据，即生效。</p><h3 id="4-汉化"><a href="#4-汉化" class="headerlink" title="4.汉化"></a>4.汉化</h3><p>追加一个中文插件的安装过程，administration-&gt;marketplace-&gt;search chinese-&gt;Chinese Pack install-&gt;restart sonarService即变为中文的了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天用docker在服务器上部署了个sonar，并push代码进行检测，各种指数相当低，先不谈代码优化，记录下在部署过程中碰到的个坑&lt;/p&gt;
&lt;h3 id=&quot;1-安装docker，docker-compose&quot;&gt;&lt;a href=&quot;#1-安装docker，docker-com
      
    
    </summary>
    
      <category term="SonarQube" scheme="http://macintosh-c.coding.me/categories/SonarQube/"/>
    
    
      <category term="SonarQube" scheme="http://macintosh-c.coding.me/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title>centos7下k8s安装</title>
    <link href="http://macintosh-c.coding.me/2019/09/27/kubernetes/k8s%E5%AE%89%E8%A3%85/"/>
    <id>http://macintosh-c.coding.me/2019/09/27/kubernetes/k8s安装/</id>
    <published>2019-09-27T07:08:56.000Z</published>
    <updated>2019-12-06T07:19:00.514Z</updated>
    
    <content type="html"><![CDATA[<p>由于条件所限，俺们只能在虚拟机上来搭建k8s,关于使用虚拟机创建服务器的过程之前已经讲过：<a href="http://macintosh-c.coding.me/2019/09/26/VirtualBox/Mac下安装VirtualBox/">这里</a>，此处我们准备了4台服务器用来搭建，如下：</p><table><thead><tr><th>Service name</th><th>IP</th><th>OS</th><th>Master/Node</th><th>service</th></tr></thead><tbody><tr><td>K8s-master1</td><td>192.168.56.113</td><td>Centos7</td><td>master</td><td>kube-apiserver,kube-controller-manager,kube-scheduler,etcd</td></tr><tr><td>K8s-master2</td><td>192.168.56.116</td><td>Centos7</td><td>master</td><td>kube-apiserver,kube-controller-manager,kube-scheduler</td></tr><tr><td>K8s-node1</td><td>192.168.56.114</td><td>Centos7</td><td>node</td><td>kubelet,kube-proxy,docker,flannel,etcd</td></tr><tr><td>K8s-node2</td><td>192.168.56.115</td><td>Centos7</td><td>node</td><td>kubelet,kube-proxy,docker,flannel,etcd</td></tr></tbody></table><p>1.关闭防火墙，并设置开机关闭<br>systemctl stop firewalld.service<br>systemctl disable firewalld.service</p><p>hostnamectl set-hostname *</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于条件所限，俺们只能在虚拟机上来搭建k8s,关于使用虚拟机创建服务器的过程之前已经讲过：&lt;a href=&quot;http://macintosh-c.coding.me/2019/09/26/VirtualBox/Mac下安装VirtualBox/&quot;&gt;这里&lt;/a&gt;，此处我们准备
      
    
    </summary>
    
      <category term="Kubernetes" scheme="http://macintosh-c.coding.me/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes安装" scheme="http://macintosh-c.coding.me/tags/Kubernetes%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Mac下VirtualBox安装</title>
    <link href="http://macintosh-c.coding.me/2019/09/26/VirtualBox/Mac%E4%B8%8B%E5%AE%89%E8%A3%85VirtualBox/"/>
    <id>http://macintosh-c.coding.me/2019/09/26/VirtualBox/Mac下安装VirtualBox/</id>
    <published>2019-09-26T03:08:56.000Z</published>
    <updated>2019-09-26T15:02:45.613Z</updated>
    
    <content type="html"><![CDATA[<p>Mac下VirtualBox的安装过程很简单，整理如下，有些坑需要注意</p><h3 id="1-下载及安装"><a href="#1-下载及安装" class="headerlink" title="1.下载及安装"></a>1.下载及安装</h3><p>1). VirtualBox官方下载地址：<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">https://www.virtualbox.org/wiki/Downloads</a><br>点击“OS X hosts”下载对应的mac版本。<br>下载完了直接点击安装就行。此处有个坑，virtualbox在安装的时候需要安装内核扩展（Kernel extenstion），而macOS 10.13 High Sierra的新安全特性会阻止外部内核扩展的安装，所以安装总是会被系统拦截，安装最后一步总是提示失败。<br>解决办法：<br>进入Preferences &gt; Security &amp; Privacy &gt; General: 然后手动允许<br>或者<br>在终端手动禁用此安全特性sudo spctl –master-disable</p><p>2). 创建centos7虚拟机需要其镜像文件，官方下载地址：<a href="http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso，约4G多大小" target="_blank" rel="noopener">http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso，约4G多大小</a> 也可以选择其他相应的版本。</p><p>3). 启动桌面VirtualBox程序，如果语言不对，可以到偏好设置中修改为简体中文。</p><h3 id="2-创建centos7虚拟机"><a href="#2-创建centos7虚拟机" class="headerlink" title="2.创建centos7虚拟机"></a>2.创建centos7虚拟机</h3><p>在启动的VirtualBox界面上点击新建，接下来的配置是我在本地创建centos7的配置，可参考或修改，视个人宿主电脑配置或者需要而定，个别会详解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">名称：自己起</span><br><span class="line">文件夹：默认或者修改</span><br><span class="line">类型：Linux</span><br><span class="line">版本：Red Hat(64-bit)</span><br><span class="line">内存大小：1024</span><br><span class="line">虚拟硬盘：现在创建虚拟硬盘</span><br><span class="line">硬盘文件类型：VDI</span><br><span class="line">存储在物理硬盘上：动态分配</span><br><span class="line">文件位置和大小：位置默认，大小默认8G</span><br></pre></td></tr></table></figure></p><p>点击创建ok<br>除此之外还需要做一些额外的配置，重中之中时网络的配置，我们最终要达到的效果是：<br>1.所有的虚拟机可以互ping通。<br>2.宿主机与所有的虚拟机可以互ping通。<br>3.所有的虚拟机可以利用宿主机的网络ping通外网地址。比如百度。<br>4.宿主机切换网络，不影响到虚拟机的ip变更，且各方之间互ping不受影响。</p><p><strong>这里补充一点知识，关于VirtualBox的四种网络连接方式：解决宿主机与虚拟机互ping不通</strong><br><img src="/img/VirtualBox/virtualbox.png" alt="VirtualBox的四种网络连接方式"><br>将网络-连接方式改为桥接网卡讲道理是可以满足前3条，但是当宿主切换网络后，虚拟机与宿主机ping不通，重启虚拟机后的ip也会变动，这样让后续使用虚拟机带来很多不便，所以采用NAT+Host-Only方式。具体配置如下：<br>1.在 virtualbox 偏好设置里设置添加 NAT网络<br><img src="/img/VirtualBox/virtualbox2.jpg" alt="NAT网络"><br>2.在virtualbox工具栏找到网络，添加Host-Only<br><img src="/img/VirtualBox/virtualbox1.jpg" alt="only-host"></p><p>紧接着右击新建的虚拟机，设置-网络<br>1）网卡1-启用网络连接，连接方式：NAT网络<br>2）网卡2-启用网络连接，连接方式：仅主机（Host-Only）网络</p><p>除此之外还有一点其他配置如下<br>3)系统-启动顺序，把光驱移到最上。<br>4)显示-显卡控制器，选择VBoxVGA。</p><p>最后点击启动，弹框中选择刚刚下载的4G多的镜像文件，启动，如果启动的窗口太小，可以通过状态栏视图-自动缩放模式，也可以通过设备下的安装增强功能开启无缝模式和其他一些功能。</p><h3 id="3-centos7系统安装"><a href="#3-centos7系统安装" class="headerlink" title="3.centos7系统安装"></a>3.centos7系统安装</h3><p>接下来就是启动后的虚拟机中centos系统的安装<br>1）选择Install Centos 7<br>2）language选择中文-简体中文<br>3）日记和时间，键盘，语言支持全部默认<br>4）软件选择GNOME桌面，附加全部选上，当然也可以选择其他类型<br>5）安装位置：自动配置分区<br>6）网络和主机名：由于之前我们设置了两个网络连接方式，这里会有两个以太网(enpOs3和enpOs8),分别右上角打开，前者为NAT网络，使虚拟机可以访问wifi网络，后者可以固定ip，使主机以及虚拟机之间互通ok。enpOs8显示的ip地址即为此虚拟机的固定ip，后续可以通过在centos中执行ifconfig命令查看。</p><p>点击开始安装后用户设置，分别设置<br>7）root密码和新建一个账户，同时设置为管理员，等待安装。安装完毕后提示重启，重启后<br>8）接收许可证，<br>9）再次设置下网络和主机名后，<br>完成配置，即可正常进入系统，有交互桌面，可以通过终端互ping验证一下。<br>到这里还有最后一步设置，<br>10）cd到/etc/sysconfig/network-scripts可以看到ifcfg-enpOs3和ifcfg-enpOs8两个文件，确认里面的ONBOOT参数是否设为yes，没有的话改下，保存后，重启网络：命令service network restart。这样的话即使重启虚拟机，ip也会一直固定存在。</p><p><strong>关于上述操作过程中虚拟机与宿主机间的鼠标切换问题，可以通过安装增强功能使其可以自由切换，也可通过左command键来切换。</strong></p><p>到此虚拟机创建完毕，可以多建几个，供后续学习集群等使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mac下VirtualBox的安装过程很简单，整理如下，有些坑需要注意&lt;/p&gt;
&lt;h3 id=&quot;1-下载及安装&quot;&gt;&lt;a href=&quot;#1-下载及安装&quot; class=&quot;headerlink&quot; title=&quot;1.下载及安装&quot;&gt;&lt;/a&gt;1.下载及安装&lt;/h3&gt;&lt;p&gt;1). Vir
      
    
    </summary>
    
      <category term="VirtualBox" scheme="http://macintosh-c.coding.me/categories/VirtualBox/"/>
    
    
      <category term="VirtualBox安装" scheme="http://macintosh-c.coding.me/tags/VirtualBox%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装jdk</title>
    <link href="http://macintosh-c.coding.me/2019/09/25/java/basic/centos7%E5%AE%89%E8%A3%85jdk/"/>
    <id>http://macintosh-c.coding.me/2019/09/25/java/basic/centos7安装jdk/</id>
    <published>2019-09-25T09:39:56.000Z</published>
    <updated>2019-09-25T09:50:06.422Z</updated>
    
    <content type="html"><![CDATA[<p>Centos7自带OpenJDK的环境，强烈不建议使用，卸载重新安装oracle jdk 1.8</p><h3 id="1-进入root帐号-，删除系统自带的openjdk"><a href="#1-进入root帐号-，删除系统自带的openjdk" class="headerlink" title="1. 进入root帐号 ，删除系统自带的openjdk"></a>1. 进入root帐号 ，删除系统自带的openjdk</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line">yum -y remove java*</span><br></pre></td></tr></table></figure><h3 id="2-下载最新的jdk"><a href="#2-下载最新的jdk" class="headerlink" title="2.下载最新的jdk"></a>2.下载最新的jdk</h3><p>地址可以从oracle的网站(<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html）对应版本的rpm地址保存替换：" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html）对应版本的rpm地址保存替换：</a><br><code>wget --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; https://download.oracle.com/otn-pub/java/jdk/8u201-b09/42970487e3af4f5aa5bca3f542482c60/jdk-8u201-linux-x64.rpm</code></p><h3 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h3><p>yum localinstall jdk-8u201-linux-x64.rpm</p><h3 id="4-找java的安装路径"><a href="#4-找java的安装路径" class="headerlink" title="4. 找java的安装路径"></a>4. 找java的安装路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">which java</span><br><span class="line">ls -lrt /usr/bin/java</span><br><span class="line">ls -lrt /etc/alternatives/java</span><br></pre></td></tr></table></figure><p>注：echo $JAVA_HOME 方法是在已经配置了/etc/profile 文件的前提下查询的，如果该文件$JAVA_HOME配置错误，输出结果也是错误的。which java查询到的是java的执行路径，不是安装路径！</p><h3 id="5-vi编辑-etc-profile，配置环境变量"><a href="#5-vi编辑-etc-profile，配置环境变量" class="headerlink" title="5.vi编辑/etc/profile，配置环境变量"></a>5.vi编辑/etc/profile，配置环境变量</h3><p>1)sudo vim /etc/profile<br>2)按下 i 进入编辑，此时在窗体最底部会出现 – 插入 –<br>3)使用键盘输入编辑文字,文件末尾需要添加的配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_201-amd64</span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p><p>4)输入完毕后，完成输入，退出输入，按 ESC ,这个时候会发现底部的 – 插入 –没有了<br>5) 保存编辑的文件，并且退出vim编辑 输入 :wq 命令，按回车键<br>6)使用vim命令打开/etc/profile文件查看文件内容<br>7)没有进行修改，不需要保存直接退出 ，输入 :q 命令<br>8)source /etc/profile 使之立即生效<br>可分别用以下命令查看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo $JAVA_HOME</span><br><span class="line">echo $PATH</span><br><span class="line">echo $CLASSPATH</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Centos7自带OpenJDK的环境，强烈不建议使用，卸载重新安装oracle jdk 1.8&lt;/p&gt;
&lt;h3 id=&quot;1-进入root帐号-，删除系统自带的openjdk&quot;&gt;&lt;a href=&quot;#1-进入root帐号-，删除系统自带的openjdk&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="java基础" scheme="http://macintosh-c.coding.me/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="jdk安装" scheme="http://macintosh-c.coding.me/tags/jdk%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Docker，Docker Compose，Docker Swarm，Kubernetes之间的区别</title>
    <link href="http://macintosh-c.coding.me/2019/09/25/Docker/docker%E7%90%86%E8%A7%A3%E7%AF%87/"/>
    <id>http://macintosh-c.coding.me/2019/09/25/Docker/docker理解篇/</id>
    <published>2019-09-25T07:04:56.000Z</published>
    <updated>2019-09-25T07:18:00.922Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习Docker容器，了解到一些相关的技术，像是Kubernetes，Docker-compose，Docker Swarm，分不清这些东西之间的区别，特意去研究了一下，分享一下，适合刚入门学习容器的同学了解。</p><h2 id="Dcoker"><a href="#Dcoker" class="headerlink" title="Dcoker"></a>Dcoker</h2><p>Docker 这个东西所扮演的角色，容易理解，它是一个容器引擎，也就是说实际上我们的容器最终是由Docker创建，运行在Docker中，其他相关的容器技术都是以Docker为基础，它是我们使用其他容器技术的核心。</p><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p>Docker-Compose 是用来管理你的容器的，有点像一个容器的管家，想象一下当你的Docker中有成百上千的容器需要启动，如果一个一个的启动那得多费时间。有了Docker-Compose你只需要编写一个文件，在这个文件里面声明好要启动的容器，配置一些参数，执行一下这个文件，Docker就会按照你声明的配置去把所有的容器启动起来，但是Docker-Compose只能管理当前主机上的Docker，也就是说不能去启动其他主机上的Docker容器</p><h2 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h2><p>Docker Swarm 是一款用来管理多主机上的Docker容器的工具，可以负责帮你启动容器，监控容器状态，如果容器的状态不正常它会帮你重新帮你启动一个新的容器，来提供服务，同时也提供服务之间的负载均衡，而这些东西Docker-Compose 是做不到的</p><h2 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h2><p>Kubernetes它本身的角色定位是和Docker Swarm 是一样的，也就是说他们负责的工作在容器领域来说是相同的部分，当然也有自己一些不一样的特点。这个就像是Eclipse和IDEA一样，也是一个跨主机的容器管理平台。它是谷歌公司根据自身的多年的运维经验研发的一款容器管理平台。而Docker Swarm则是由Docker 公司研发的。</p><p>既然这两个东西是一样的，那就面临选择的问题，应该学习哪一个技术呢?实际上这两年Kubernetes已经成为了很多大公司的默认使用的容器管理技术，而Docker Swarm已经在这场与Kubernetes竞争中已经逐渐失势，如今容器管理领域已经开始已经逐渐被Kubernetes一统天下了。所以建议大家学习的时候，应该多考虑一下这门技术在行业里面是不是有很多人在使用。</p><p>需要注意的是，虽然Docker Swarm在与Kubernetes的竞争中败下阵来，但是这个跟Docker这个容器引擎没有太大关系，它还是整个容器领域技术的基石，Kubernetes离开他什么也不是。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Docker是容器技术的核心、基础，Docker Compose是一个基于Docker的单主机容器编排工具，功能并不像Docker Swarm和Kubernetes是基于Dcoker的跨主机的容器管理平台那么丰富。</p><p>转载自：<a href="https://blog.csdn.net/notsaltedfish/article/details/80959913" target="_blank" rel="noopener">Docker，Docker Compose，Docker Swarm，Kubernetes之间的区别</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在学习Docker容器，了解到一些相关的技术，像是Kubernetes，Docker-compose，Docker Swarm，分不清这些东西之间的区别，特意去研究了一下，分享一下，适合刚入门学习容器的同学了解。&lt;/p&gt;
&lt;h2 id=&quot;Dcoker&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Docker" scheme="http://macintosh-c.coding.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://macintosh-c.coding.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker Compose</title>
    <link href="http://macintosh-c.coding.me/2019/09/25/Docker/DockerCompose/"/>
    <id>http://macintosh-c.coding.me/2019/09/25/Docker/DockerCompose/</id>
    <published>2019-09-25T06:43:56.000Z</published>
    <updated>2019-09-25T08:04:15.935Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker-Compose简介"><a href="#Docker-Compose简介" class="headerlink" title="Docker-Compose简介"></a>Docker-Compose简介</h3><p>Docker-Compose项目是Docker官方的开源项目，负责实现对Docker容器集群的快速编排。<br>Docker-Compose将所管理的容器分为三层，分别是工程（project），服务（service）以及容器（container）。Docker-Compose运行目录下的所有文件（docker-compose.yml，extends文件或环境变量文件等）组成一个工程，若无特殊指定工程名即为当前目录名。一个工程当中可包含多个服务，每个服务中定义了容器运行的镜像，参数，依赖。一个服务当中可包括多个容器实例，Docker-Compose并没有解决负载均衡的问题，因此需要借助其它工具实现服务发现及负载均衡。<br>Docker-Compose的工程配置文件默认为docker-compose.yml，可通过环境变量COMPOSE_FILE或-f参数自定义配置文件，其定义了多个有依赖关系的服务及每个服务运行的容器。<br>使用一个Dockerfile模板文件，可以让用户很方便的定义一个单独的应用容器。在工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个Web项目，除了Web服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。<br>Compose允许用户通过一个单独的docker-compose.yml模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。<br>Docker-Compose项目由Python编写，调用Docker服务提供的API来对容器进行管理。因此，只要所操作的平台支持Docker API，就可以在其上利用Compose来进行编排管理。</p><h3 id="Docker-Compose安装"><a href="#Docker-Compose安装" class="headerlink" title="Docker-Compose安装"></a>Docker-Compose安装</h3><p>安装方法一：<br>下载Docker-Compose,把这些二进制文件下载后直接放到执行路径下面，并添加权限即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.23.0-rc3/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></p><p>查看版本 :<br><code>docker-compose version</code><br>安装方法二：<br>利用pip<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install python-pip</span><br><span class="line">pip install docker-compose</span><br><span class="line">docker-compose version</span><br></pre></td></tr></table></figure></p><p>卸载：<br>如果是二进制包方式安装的，删除二进制文件即可：<br><code>sudo rm /usr/local/bin/docker-compose</code><br>如果通过Python pip工具安装的，则执行如下命令删除：<br><code>sudo pip uninstall docker-compose</code></p><h3 id="Docker-Compose常用命令"><a href="#Docker-Compose常用命令" class="headerlink" title="Docker-Compose常用命令"></a>Docker-Compose常用命令</h3><ol><li>ps：列出所有运行容器<br><code>docker-compose ps</code></li><li>logs：查看服务日志输出<br><code>docker-compose logs</code></li><li>port：打印绑定的公共端口，下面命令可以输出 eureka 服务 8761 端口所绑定的公共端口<br><code>docker-compose port eureka 8761</code></li><li>build：构建或者重新构建服务<br><code>docker-compose build</code></li><li>start：启动指定服务已存在的容器<br><code>docker-compose start eureka</code></li><li>stop：停止已运行的服务的容器,可以通过docker-compose start 再次启动<br><code>docker-compose stop eureka</code></li><li>down: 停止和删除容器、网络、卷、镜像。停用移除所有容器以及网络相关。<br><code>docker-compose down</code></li><li>rm：删除指定服务的容器,删除所有（停止状态的）服务容器。推荐先执行docker-compose stop命令来停止容器。<br><code>docker-compose rm eureka</code></li><li>up：启动已经存在的服务容器。<br><code>docker-compose up</code></li><li>kill：通过发送 SIGKILL 信号来停止指定服务的容器<br><code>docker-compose kill eureka</code></li><li>pull：下载服务镜像<br><code>docker-compose pull</code></li><li>scale：设置指定服务运行容器的个数，以 service=num 形式指定<br><code>docker-compose scale user=3 movie=3</code></li><li>run：在一个服务上执行一个命令<br><code>docker-compose run web bash</code></li><li>restart：重启项目中的服务<br><code>docker-compose restart</code></li></ol><h3 id="Docker-Compose模板文件"><a href="#Docker-Compose模板文件" class="headerlink" title="Docker-Compose模板文件"></a>Docker-Compose模板文件</h3><p>Compose允许用户通过一个docker-compose.yml模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。<br>Compose模板文件是一个定义服务、网络和卷的YAML文件。Compose模板文件默认路径是当前目录下的docker-compose.yml，可以使用.yml或.yaml作为文件扩展名。<br>Docker-Compose标准模板文件应该包含version、services、networks 三大部分，最关键的是services和networks两个部分。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;2&apos;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    image: dockercloud/hello-world</span><br><span class="line">    ports:</span><br><span class="line">      - 8080</span><br><span class="line">    networks:</span><br><span class="line">      - front-tier</span><br><span class="line">      - back-tier</span><br><span class="line"></span><br><span class="line">  redis:</span><br><span class="line">    image: redis</span><br><span class="line">    links:</span><br><span class="line">      - web</span><br><span class="line">    networks:</span><br><span class="line">      - back-tier</span><br><span class="line"></span><br><span class="line">  lb:</span><br><span class="line">    image: dockercloud/haproxy</span><br><span class="line">    ports:</span><br><span class="line">      - 80:80</span><br><span class="line">    links:</span><br><span class="line">      - web</span><br><span class="line">    networks:</span><br><span class="line">      - front-tier</span><br><span class="line">      - back-tier</span><br><span class="line">    volumes:</span><br><span class="line">      - /var/run/docker.sock:/var/run/docker.sock </span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  front-tier:</span><br><span class="line">    driver: bridge</span><br><span class="line">  back-tier:</span><br><span class="line">    driver: bridge</span><br></pre></td></tr></table></figure></p><ol><li>version：指定 docker-compose.yml 文件的写法格式<br>Compose目前有三个版本分别为Version 1，Version 2，Version 3，Compose区分Version 1和Version 2（Compose 1.6.0+，Docker Engine 1.10.0+）。Version 2支持更多的指令。Version 1将来会被弃用。</li><li>services：多个容器集合</li><li>image: 是指定服务的镜像名称或镜像ID。如果镜像在本地不存在，Compose将会尝试拉取镜像。</li><li>build：配置构建时，Compose 会利用它自动构建镜像，该值可以是一个路径，也可以是一个对象，用于指定 Dockerfile 参数</li><li>command：覆盖容器启动后默认执行的命令</li><li>dns：配置 dns 服务器，可以是一个值或列表</li><li>dns_search：配置 DNS 搜索域，可以是一个值或列表</li><li>environment：环境变量配置，可以用数组或字典两种方式</li><li>env_file：从文件中获取环境变量，可以指定一个文件路径或路径列表，其优先级低于 environment 指定的环境变量</li><li>expose：暴露端口，只将端口暴露给连接的服务，而不暴露给主机</li><li>network_mode：设置网络模式</li><li><p>ports：对外暴露的端口定义，和 expose 对应</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ports:   # 暴露端口信息  - &quot;宿主机端口:容器暴露端口&quot;</span><br><span class="line">- &quot;8763:8763&quot;</span><br><span class="line">- &quot;8763:8763&quot;</span><br></pre></td></tr></table></figure></li><li><p>links：将指定容器连接到当前连接，可以设置别名，避免ip方式导致的容器重启动态改变的无法连接情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">links:    # 指定服务名称:别名 </span><br><span class="line">    - docker-compose-eureka-server:compose-eureka</span><br></pre></td></tr></table></figure></li><li><p>volumes：卷挂载路径</p></li><li>logs：日志输出信息</li></ol><p>参考链接：<br><a href="https://blog.51cto.com/9291927/2310444" target="_blank" rel="noopener">Docker快速入门——Docker-Compose</a><br><a href="https://www.jianshu.com/p/658911a8cff3" target="_blank" rel="noopener">Docker Compose 详解</a><br><a href="https://blog.csdn.net/Anumbrella/article/details/80877643" target="_blank" rel="noopener">Docker三剑客——Compose</a><br><a href="https://www.cnblogs.com/williamjie/p/9103327.html" target="_blank" rel="noopener">使用docker-compose 大杀器来部署服务</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Docker-Compose简介&quot;&gt;&lt;a href=&quot;#Docker-Compose简介&quot; class=&quot;headerlink&quot; title=&quot;Docker-Compose简介&quot;&gt;&lt;/a&gt;Docker-Compose简介&lt;/h3&gt;&lt;p&gt;Docker-Compose
      
    
    </summary>
    
      <category term="Docker" scheme="http://macintosh-c.coding.me/categories/Docker/"/>
    
    
      <category term="Docker-Compose" scheme="http://macintosh-c.coding.me/tags/Docker-Compose/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile详解</title>
    <link href="http://macintosh-c.coding.me/2019/09/25/Docker/Dockerfile/"/>
    <id>http://macintosh-c.coding.me/2019/09/25/Docker/Dockerfile/</id>
    <published>2019-09-25T05:54:56.000Z</published>
    <updated>2019-09-25T06:32:09.581Z</updated>
    
    <content type="html"><![CDATA[<p>前面整理过docker的安装以及简单命令，这遍整理下关于Dockerfile的基础。</p><h3 id="什么是dockerfile"><a href="#什么是dockerfile" class="headerlink" title="什么是dockerfile?"></a>什么是dockerfile?</h3><p>Dockerfile是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker通过读取Dockerfile中的指令自动生成映像。<br>docker build命令用于从Dockerfile构建映像。可以在docker build命令中使用-f标志指向文件系统中任何位置的Dockerfile。<br><code>docker build -f /path/to/a/Dockerfile</code></p><h3 id="Dockerfile的基本结构"><a href="#Dockerfile的基本结构" class="headerlink" title="Dockerfile的基本结构"></a>Dockerfile的基本结构</h3><p>Dockerfile 一般分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令，’#’ 为 Dockerfile 中的注释。</p><h3 id="Dockerfile文件说明"><a href="#Dockerfile文件说明" class="headerlink" title="Dockerfile文件说明"></a>Dockerfile文件说明</h3><p>Docker以从上到下的顺序运行Dockerfile的指令。为了指定基本映像，第一条指令必须是FROM。一个声明以＃字符开头则被视为注释。可以在Docker文件中使用RUN，CMD，FROM，EXPOSE，ENV等指令。<br>在这里列出了一些常用的指令:</p><h4 id="1-FROM"><a href="#1-FROM" class="headerlink" title="1. FROM"></a>1. FROM</h4><p>：指定基础镜像，必须为第一个命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">　　FROM &lt;image&gt;</span><br><span class="line">　　FROM &lt;image&gt;:&lt;tag&gt;</span><br><span class="line">　　FROM &lt;image&gt;@&lt;digest&gt;</span><br><span class="line">示例：</span><br><span class="line">　　FROM mysql:5.6</span><br><span class="line">注：</span><br><span class="line">　　tag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像</span><br></pre></td></tr></table></figure></p><h4 id="2-MAINTAINER"><a href="#2-MAINTAINER" class="headerlink" title="2. MAINTAINER"></a>2. MAINTAINER</h4><p>: 维护者信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    MAINTAINER &lt;name&gt;</span><br><span class="line">示例：</span><br><span class="line">    MAINTAINER Jasper Xu</span><br><span class="line">    MAINTAINER sorex@163.com</span><br><span class="line">    MAINTAINER Jasper Xu &lt;sorex@163.com&gt;</span><br></pre></td></tr></table></figure></p><h4 id="3-RUN"><a href="#3-RUN" class="headerlink" title="3. RUN"></a>3. RUN</h4><p>：构建镜像时执行的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">RUN用于在镜像容器中执行命令，其有以下两种命令执行方式：</span><br><span class="line">shell执行</span><br><span class="line">格式：</span><br><span class="line">    RUN &lt;command&gt;</span><br><span class="line">exec执行</span><br><span class="line">格式：</span><br><span class="line">    RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span><br><span class="line">示例：</span><br><span class="line">    RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span><br><span class="line">    RUN apk update</span><br><span class="line">    RUN [&quot;/etc/execfile&quot;, &quot;arg1&quot;, &quot;arg1&quot;]</span><br><span class="line">注：</span><br><span class="line">　　RUN指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定--no-cache参数，如：docker build --no-cache</span><br></pre></td></tr></table></figure></p><h4 id="4-ADD"><a href="#4-ADD" class="headerlink" title="4. ADD"></a>4. ADD</h4><p>：将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    ADD &lt;src&gt;... &lt;dest&gt;</span><br><span class="line">    ADD [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;] 用于支持包含空格的路径</span><br><span class="line">示例：</span><br><span class="line">    ADD hom* /mydir/          # 添加所有以&quot;hom&quot;开头的文件</span><br><span class="line">    ADD hom?.txt /mydir/      # ? 替代一个单字符,例如：&quot;home.txt&quot;</span><br><span class="line">    ADD test relativeDir/     # 添加 &quot;test&quot; 到 `WORKDIR`/relativeDir/</span><br><span class="line">    ADD test /absoluteDir/    # 添加 &quot;test&quot; 到 /absoluteDir/</span><br></pre></td></tr></table></figure></p><h4 id="5-COPY"><a href="#5-COPY" class="headerlink" title="5. COPY"></a>5. COPY</h4><p>：功能类似ADD，但是是不会自动解压文件，也不能访问网络资源</p><h4 id="6-CMD"><a href="#6-CMD" class="headerlink" title="6. CMD"></a>6. CMD</h4><p>：构建容器后调用，也就是在容器启动时才进行调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] (执行可执行文件，优先)</span><br><span class="line">    CMD [&quot;param1&quot;,&quot;param2&quot;] (设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数)</span><br><span class="line">    CMD command param1 param2 (执行shell内部命令)</span><br><span class="line">示例：</span><br><span class="line">    CMD echo &quot;This is a test.&quot; | wc -</span><br><span class="line">    CMD [&quot;/usr/bin/wc&quot;,&quot;--help&quot;]</span><br><span class="line">注：</span><br><span class="line"> 　　CMD不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。</span><br></pre></td></tr></table></figure></p><h4 id="7-ENTRYPOINT"><a href="#7-ENTRYPOINT" class="headerlink" title="7. ENTRYPOINT"></a>7. ENTRYPOINT</h4><p>：配置容器，使其可执行化。配合CMD可省去”application”，只使用参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] (可执行文件, 优先)</span><br><span class="line">    ENTRYPOINT command param1 param2 (shell内部命令)</span><br><span class="line">示例：</span><br><span class="line">    FROM ubuntu</span><br><span class="line">    ENTRYPOINT [&quot;top&quot;, &quot;-b&quot;]</span><br><span class="line">    CMD [&quot;-c&quot;]</span><br><span class="line">注：</span><br><span class="line">　　　ENTRYPOINT与CMD非常类似，不同的是通过docker run执行的命令不会覆盖ENTRYPOINT，而docker run命令中指定的任何参数，都会被当做参数再次传递给ENTRYPOINT。Dockerfile中只允许有一个ENTRYPOINT命令，多指定时会覆盖前面的设置，而只执行最后的ENTRYPOINT指令。</span><br></pre></td></tr></table></figure></p><h4 id="8-LABEL"><a href="#8-LABEL" class="headerlink" title="8. LABEL"></a>8. LABEL</h4><p>：用于为镜像添加元数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span><br><span class="line">示例：</span><br><span class="line">　　LABEL version=&quot;1.0&quot; description=&quot;这是一个Web服务器&quot; by=&quot;IT笔录&quot;</span><br><span class="line">注：</span><br><span class="line">　　使用LABEL指定元数据时，一条LABEL指定可以指定一或多条元数据，指定多条元数据时不同元数据之间通过空格分隔。推荐将所有的元数据通过一条LABEL指令指定，以免生成过多的中间镜像。</span><br></pre></td></tr></table></figure></p><h4 id="9-ENV"><a href="#9-ENV" class="headerlink" title="9. ENV"></a>9. ENV</h4><p>：设置环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    ENV &lt;key&gt; &lt;value&gt;  #&lt;key&gt;之后的所有内容均会被视为其&lt;value&gt;的组成部分，因此，一次只能设置一个变量</span><br><span class="line">    ENV &lt;key&gt;=&lt;value&gt; ...  #可以设置多个变量，每个变量为一个&quot;&lt;key&gt;=&lt;value&gt;&quot;的键值对，如果&lt;key&gt;中包含空格，可以使用\来进行转义，也可以通过&quot;&quot;来进行标示；另外，反斜线也可以用于续行</span><br><span class="line">示例：</span><br><span class="line">    ENV myName John Doe</span><br><span class="line">    ENV myDog Rex The Dog</span><br><span class="line">    ENV myCat=fluffy</span><br></pre></td></tr></table></figure></p><h4 id="10-EXPOSE"><a href="#10-EXPOSE" class="headerlink" title="10. EXPOSE"></a>10. EXPOSE</h4><p>：指定于外界交互的端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    EXPOSE &lt;port&gt; [&lt;port&gt;...]</span><br><span class="line">示例：</span><br><span class="line">    EXPOSE 80 443</span><br><span class="line">    EXPOSE 8080</span><br><span class="line">    EXPOSE 11211/tcp 11211/udp</span><br><span class="line">注：</span><br><span class="line">　　EXPOSE并不会让容器的端口访问到主机。要使其可访问，需要在docker run运行容器时通过-p来发布这些端口，或通过-P参数来发布EXPOSE导出的所有端口</span><br></pre></td></tr></table></figure></p><h4 id="11-VOLUME"><a href="#11-VOLUME" class="headerlink" title="11. VOLUME"></a>11. VOLUME</h4><p>：用于指定持久化目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    VOLUME [&quot;/path/to/dir&quot;]</span><br><span class="line">示例：</span><br><span class="line">    VOLUME [&quot;/data&quot;]</span><br><span class="line">    VOLUME [&quot;/var/www&quot;, &quot;/var/log/apache2&quot;, &quot;/etc/apache2&quot;</span><br><span class="line">注：</span><br><span class="line">　　一个卷可以存在于一个或多个容器的指定目录，该目录可以绕过联合文件系统，并具有以下功能：</span><br><span class="line">1 卷可以容器间共享和重用</span><br><span class="line">2 容器并不一定要和其它容器共享卷</span><br><span class="line">3 修改卷后会立即生效</span><br><span class="line">4 对卷的修改不会对镜像产生影响</span><br><span class="line">5 卷会一直存在，直到没有任何容器在使用它</span><br></pre></td></tr></table></figure></p><h4 id="12-WORKDIR"><a href="#12-WORKDIR" class="headerlink" title="12. WORKDIR"></a>12. WORKDIR</h4><p>：工作目录，类似于cd命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    WORKDIR /path/to/workdir</span><br><span class="line">示例：</span><br><span class="line">    WORKDIR /a  (这时工作目录为/a)</span><br><span class="line">    WORKDIR b  (这时工作目录为/a/b)</span><br><span class="line">    WORKDIR c  (这时工作目录为/a/b/c)</span><br><span class="line">注：</span><br><span class="line">　　通过WORKDIR设置工作目录后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY等命令都会在该目录下执行。在使用docker run运行容器时，可以通过-w参数覆盖构建时所设置的工作目录。</span><br></pre></td></tr></table></figure></p><h4 id="13-USER"><a href="#13-USER" class="headerlink" title="13. USER"></a>13. USER</h4><p>:指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。使用USER指定用户时，可以使用用户名、UID或GID，或是两者的组合。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">格式:</span><br><span class="line">　　USER user</span><br><span class="line">　　USER user:group</span><br><span class="line">　　USER uid</span><br><span class="line">　　USER uid:gid</span><br><span class="line">　　USER user:gid</span><br><span class="line">　　USER uid:group</span><br><span class="line"></span><br><span class="line"> 示例：</span><br><span class="line">　　USER www</span><br><span class="line"></span><br><span class="line"> 注：</span><br><span class="line">　　使用USER指定用户后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT都将使用该用户。镜像构建完成后，通过docker run运行容器时，可以通过-u参数来覆盖所指定的用户。</span><br></pre></td></tr></table></figure></p><h4 id="14-ARG"><a href="#14-ARG" class="headerlink" title="14. ARG"></a>14. ARG</h4><p>：用于指定传递给构建运行时的变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    ARG &lt;name&gt;[=&lt;default value&gt;]</span><br><span class="line">示例：</span><br><span class="line">    ARG site</span><br><span class="line">    ARG build_user=www</span><br></pre></td></tr></table></figure></p><h4 id="15-ONBUILD"><a href="#15-ONBUILD" class="headerlink" title="15. ONBUILD"></a>15. ONBUILD</h4><p>：用于设置镜像触发器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">　　ONBUILD [INSTRUCTION]</span><br><span class="line">示例：</span><br><span class="line">　　ONBUILD ADD . /app/src</span><br><span class="line">　　ONBUILD RUN /usr/local/bin/python-build --dir /app/src</span><br><span class="line">注：</span><br><span class="line">　　当所构建的镜像被用做其它镜像的基础镜像，该镜像中的触发器将会被钥触发</span><br></pre></td></tr></table></figure></p><h3 id="一个小例子："><a href="#一个小例子：" class="headerlink" title="一个小例子："></a>一个小例子：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># This my first nginx Dockerfile</span><br><span class="line"># Version 1.0</span><br><span class="line"></span><br><span class="line"># Base images 基础镜像</span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">#MAINTAINER 维护者信息</span><br><span class="line">MAINTAINER tianfeiyu </span><br><span class="line"></span><br><span class="line">#ENV 设置环境变量</span><br><span class="line">ENV PATH /usr/local/nginx/sbin:$PATH</span><br><span class="line"></span><br><span class="line">#ADD  文件放在当前目录下，拷过去会自动解压</span><br><span class="line">ADD nginx-1.8.0.tar.gz /usr/local/  </span><br><span class="line">ADD epel-release-latest-7.noarch.rpm /usr/local/  </span><br><span class="line"></span><br><span class="line">#RUN 执行以下命令 </span><br><span class="line">RUN rpm -ivh /usr/local/epel-release-latest-7.noarch.rpm</span><br><span class="line">RUN yum install -y wget lftp gcc gcc-c++ make openssl-devel pcre-devel pcre &amp;&amp; yum clean all</span><br><span class="line">RUN useradd -s /sbin/nologin -M www</span><br><span class="line"></span><br><span class="line">#WORKDIR 相当于cd</span><br><span class="line">WORKDIR /usr/local/nginx-1.8.0 </span><br><span class="line"></span><br><span class="line">RUN ./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_ssl_module --with-pcre &amp;&amp; make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">RUN echo &quot;daemon off;&quot; &gt;&gt; /etc/nginx.conf</span><br><span class="line"></span><br><span class="line">#EXPOSE 映射端口</span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">#CMD 运行以下命令</span><br><span class="line">CMD [&quot;nginx&quot;]</span><br></pre></td></tr></table></figure><h3 id="最后用一张图解释常用指令的意义"><a href="#最后用一张图解释常用指令的意义" class="headerlink" title="最后用一张图解释常用指令的意义"></a>最后用一张图解释常用指令的意义</h3><p><img src="/img/Docker/dockerfile1.png" alt="image"></p><p>转载自：<a href="https://www.cnblogs.com/panwenbin-logs/p/8007348.html" target="_blank" rel="noopener">Dockerfile文件详解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前面整理过docker的安装以及简单命令，这遍整理下关于Dockerfile的基础。&lt;/p&gt;
&lt;h3 id=&quot;什么是dockerfile&quot;&gt;&lt;a href=&quot;#什么是dockerfile&quot; class=&quot;headerlink&quot; title=&quot;什么是dockerfile?&quot;&gt;
      
    
    </summary>
    
      <category term="Docker" scheme="http://macintosh-c.coding.me/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://macintosh-c.coding.me/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Ansible playbook</title>
    <link href="http://macintosh-c.coding.me/2019/09/25/Ansible/ansible%E8%AF%A6%E8%A7%A3%E4%BA%8C/"/>
    <id>http://macintosh-c.coding.me/2019/09/25/Ansible/ansible详解二/</id>
    <published>2019-09-25T04:39:56.000Z</published>
    <updated>2019-09-25T05:25:23.650Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ansible-playbook-简介"><a href="#Ansible-playbook-简介" class="headerlink" title="Ansible playbook 简介"></a>Ansible playbook 简介</h3><p>playbook 是 ansible 用于配置，部署，和管理被控节点的剧本。<br>通过 playbook 的详细描述，执行其中的一系列 tasks ，可以让远端主机达到预期的状态。playbook 就像 Ansible 控制器给被控节点列出的的一系列 to-do-list ，而被控节点必须要完成。<br>也可以这么理解，playbook 字面意思，即剧本，现实中由演员按照剧本表演，在Ansible中，这次由计算机进行表演，由计算机安装，部署应用，提供对外服务，以及组织计算机处理各种各样的事情。</p><h3 id="Ansible-playbook使用场景"><a href="#Ansible-playbook使用场景" class="headerlink" title="Ansible playbook使用场景"></a>Ansible playbook使用场景</h3><p>执行一些简单的任务，使用ad-hoc命令可以方便的解决问题，但是有时一个设施过于复杂，需要大量的操作时候，执行的ad-hoc命令是不适合的，这时最好使用playbook。<br>就像执行shell命令与写shell脚本一样，也可以理解为批处理任务，不过playbook有自己的语法格式。使用playbook你可以方便的重用这些代码，可以移植到不同的机器上面，像函数一样，最大化的利用代码。在你使用Ansible的过程中，你也会发现，你所处理的大部分操作都是编写playbook。可以把常见的应用都编写成playbook，之后管理服务器会变得十分简单。</p><h3 id="Ansible-playbook格式"><a href="#Ansible-playbook格式" class="headerlink" title="Ansible playbook格式"></a>Ansible playbook格式</h3><h4 id="1）格式简介"><a href="#1）格式简介" class="headerlink" title="1）格式简介"></a>1）格式简介</h4><p>playbook由YMAL语言编写。YAML( /ˈjæməl/ )参考了其他多种语言，包括：XML、C语言、Python、Perl以及电子邮件格式RFC2822，Clark Evans在2001年5月在首次发表了这种语言，另外Ingy döt Net与OrenBen-Kiki也是这语言的共同设计者。<br>　　YMAL格式是类似于JSON的文件格式，便于人理解和阅读，同时便于书写。首先学习了解一下YMAL的格式，对我们后面书写playbook很有帮助。以下为playbook常用到的YMAL格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　1、文件的第一行应该以 &quot;---&quot; (三个连字符)开始，表明YMAL文件的开始。</span><br><span class="line">　　2、在同一行中，#之后的内容表示注释，类似于shell，python和ruby。</span><br><span class="line">　　3、YMAL中的列表元素以”-”开头然后紧跟着一个空格，后面为元素内容。</span><br><span class="line">　　4、同一个列表中的元素应该保持相同的缩进。否则会被当做错误处理。</span><br><span class="line">　　5、play中hosts，variables，roles，tasks等对象的表示方法都是键值中间以&quot;:&quot;分隔表示，&quot;:&quot;后面还要增加一个空格。</span><br></pre></td></tr></table></figure></p><p>我们的文件名称应该以.yml结尾，像我们上面的例子就是mysql.yml。其中，有三个部分组成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">host部分：使用 hosts 指示使用哪个主机或主机组来运行下面的 tasks ，每个 playbook 都必须指定 hosts ，hosts也可以使用通配符格式。主机或主机组在 inventory 清单中指定，可以使用系统默认的/etc/ansible/hosts，也可以自己编辑，在运行的时候加上-i选项，指定清单的位置即可。在运行清单文件的时候，–list-hosts选项会显示那些主机将会参与执行 task 的过程中。</span><br><span class="line">remote_user：指定远端主机中的哪个用户来登录远端系统，在远端系统执行 task 的用户，可以任意指定，也可以使用 sudo，但是用户必须要有执行相应 task 的权限。</span><br><span class="line">tasks：指定远端主机将要执行的一系列动作。tasks 的核心为 ansible 的模块，前面已经提到模块的用法。tasks 包含 name 和要执行的模块，name 是可选的，只是为了便于用户阅读，不过还是建议加上去，模块是必须的，同时也要给予模块相应的参数。</span><br></pre></td></tr></table></figure></p><p>执行有三个步骤：1、收集facts 2、执行tasks 3、报告结果</p><h4 id="2）核心元素"><a href="#2）核心元素" class="headerlink" title="2）核心元素"></a>2）核心元素</h4><p>Playbook的核心元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hosts：主机组；</span><br><span class="line">Tasks：任务列表；</span><br><span class="line">Variables：变量，设置方式有四种；</span><br><span class="line">Templates：包含了模板语法的文本文件；</span><br><span class="line">Handlers：由特定条件触发的任务；</span><br><span class="line">tags： 标签 指定某条任务执行，用于选择运行playbook中的部分代码。ansible具有幂等性，因此会自动跳过没有变化的部分，即便如此，有些代码为测试其确实没有发生变化的时间依然会非常地长。此时，如果确信其没有变化，就可以通过tags跳过此些代码片断</span><br></pre></td></tr></table></figure></p><h4 id="3）基本组件"><a href="#3）基本组件" class="headerlink" title="3）基本组件"></a>3）基本组件</h4><p>Playbooks配置文件的基础组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Hosts：运行指定任务的目标主机</span><br><span class="line">remoute_user：在远程主机上执行任务的用户；</span><br><span class="line">tasks：任务列表</span><br><span class="line">格式：</span><br><span class="line">　　　　tasks：</span><br><span class="line">　　　　　　– name: TASK_NAME</span><br><span class="line">　　　　　　 module: arguments</span><br><span class="line">　　　　　　 notify: HANDLER_NAME</span><br><span class="line">　　　　　　 handlers:</span><br><span class="line">　　　　　　– name: HANDLER_NAME</span><br><span class="line">　　　　　　 module: arguments</span><br><span class="line">module：模块，模块参数</span><br><span class="line">格式：</span><br><span class="line">　　　　(1) action: module arguments</span><br><span class="line">　　　　(2) module: arguments</span><br><span class="line">　　　　注意：shell和command模块后面直接跟命令，而非key=value类的参数列表；</span><br><span class="line">handlers：任务，在特定条件下触发；接收到其它任务的通知时被触发；</span><br><span class="line">(1) 某任务的状态在运行后为changed时，可通过“notify”通知给相应的handlers；</span><br><span class="line">(2) 任务可以通过“tags“打标签，而后可在ansible-playbook命令上使用-t指定进行调用；</span><br></pre></td></tr></table></figure></p><h4 id="4）playbook的运行指令"><a href="#4）playbook的运行指令" class="headerlink" title="4）playbook的运行指令"></a>4）playbook的运行指令</h4><p><code>ansible-playbook  &lt;filename.yml&gt;  ...[options]</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//常见选项</span><br><span class="line">    --check        //只检测可能发生的改变，但不真正执行操作</span><br><span class="line">    --list-hosts        //列出运行任务的主机</span><br><span class="line">    --limit        //主机列表，只针对主机列表中的主机执行</span><br><span class="line">    -v  //显示过程  -vv  -vvv</span><br><span class="line"></span><br><span class="line">    //示例：</span><br><span class="line">ansible-playbook file.yml --check   //只检测，不执行</span><br><span class="line">ansible-playbook file.yml </span><br><span class="line">ansible-playbook file.yml --limit webServer</span><br></pre></td></tr></table></figure></p><h4 id="5）variables-部分"><a href="#5）variables-部分" class="headerlink" title="5）variables 部分"></a>5）variables 部分</h4><p>上文中，我们说到了variables是变量，有四种定义方法，现在我们就来说说这四种定义方法：<br>① facts ：可直接调用<br>上一篇中，我们有说到setup这个模块，这个模块就是通过调用facts组件来实现的。我们这里的variables也可以直接调用facts组件。具体的facters我们可以使用setup模块来获取，然后直接放入我们的剧本中调用即可。<br>② 用户自定义变量<br>我们也可以直接使用用户自定义变量，想要自定义变量有以下两种方式：</p><ol><li>通过命令行传入：ansible-playbook命令的命令行中的-e VARS, –extra-vars=VARS，这样就可以直接把自定义的变量传入。</li><li>在playbook中定义变量：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vars:</span><br><span class="line">　　- var1: value1</span><br><span class="line">　　- - var2: value2</span><br></pre></td></tr></table></figure></li></ol><p>③ 通过roles传递变量<br>④ Host Inventory<br>我们也可以直接在主机清单中定义。定义的方法如下：<br>向不同的主机传递不同的变量：IP/HOSTNAME varaiable=value var2=value2<br>向组中的主机传递相同的变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[groupname:vars]</span><br><span class="line">　　variable=value</span><br></pre></td></tr></table></figure></p><h4 id="6）模板-templates"><a href="#6）模板-templates" class="headerlink" title="6）模板 templates"></a>6）模板 templates</h4><p>模板是一个文本文件，嵌套有脚本（使用模板编程语言编写）。<br>Jinja2：Jinja2是python的一种模板语言，以Django的模板语言为原本。<br>模板支持：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">字符串：使用单引号或双引号；</span><br><span class="line">　　数字：整数，浮点数；</span><br><span class="line">　　列表：[item1, item2, ...]</span><br><span class="line">　　元组：(item1, item2, ...)</span><br><span class="line">　　字典：&#123;key1:value1, key2:value2, ...&#125;</span><br><span class="line">　　布尔型：true/false</span><br><span class="line">　　算术运算：</span><br><span class="line">　　　　+, -, *, /, //, %, **</span><br><span class="line">　　比较操作：</span><br><span class="line">　　　　==, !=, &gt;, &gt;=, &lt;, &lt;=</span><br><span class="line">　　逻辑运算：</span><br><span class="line">　　　　and, or, not</span><br></pre></td></tr></table></figure></p><p>通常来说，模板都是通过引用变量来运用的。</p><h4 id="7）条件测试"><a href="#7）条件测试" class="headerlink" title="7）条件测试"></a>7）条件测试</h4><p>when语句：在task中使用，jinja2的语法格式。<br>举例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">- name: install conf file to centos7</span><br><span class="line">  template: src=files/nginx.conf.c7.j2</span><br><span class="line">  when: ansible_distribution_major_version == &quot;7&quot;</span><br><span class="line">- name: install conf file to centos6</span><br><span class="line">  template: src=files/nginx.conf.c6.j2</span><br><span class="line">  when: ansible_distribution_major_version == &quot;6&quot;</span><br></pre></td></tr></table></figure></p><p>循环：迭代，需要重复执行的任务；<br>　　对迭代项的引用，固定变量名为”item”，而后，要在task中使用with_items给定要迭代的元素列表；<br>举例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">- name: unstall web packages</span><br><span class="line">  yum: name=&#123;&#123; item &#125;&#125; state=absent</span><br><span class="line">  with_items:</span><br><span class="line">  - httpd</span><br><span class="line">  - php</span><br><span class="line">  - php-mysql</span><br></pre></td></tr></table></figure></p><h4 id="8）字典"><a href="#8）字典" class="headerlink" title="8）字典"></a>8）字典</h4><p>ansible playbook 还支持字典功能。举例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- name: install some packages</span><br><span class="line">  yum: name=&#123;&#123; item &#125;&#125; state=present</span><br><span class="line">  with_items:</span><br><span class="line">    - nginx</span><br><span class="line">    - memcached</span><br><span class="line">    - php-fpm</span><br><span class="line">- name: add some groups</span><br><span class="line">  group: name=&#123;&#123; item &#125;&#125; state=present</span><br><span class="line">  with_items:</span><br><span class="line">    - group11</span><br><span class="line">    - group12</span><br><span class="line">    - group13</span><br><span class="line">- name: add some users</span><br><span class="line">  user: name=&#123;&#123; item.name &#125;&#125; group=&#123;&#123; item.group &#125;&#125; state=present</span><br><span class="line">  with_items:</span><br><span class="line">    - &#123; name: &apos;user11&apos;, group: &apos;group11&apos; &#125;</span><br><span class="line">    - &#123; name: &apos;user12&apos;, group: &apos;group12&apos; &#125;</span><br><span class="line">    - &#123; name: &apos;user13&apos;, group: &apos;group13&apos; &#125;</span><br></pre></td></tr></table></figure></p><h4 id="9）角色订制：roles"><a href="#9）角色订制：roles" class="headerlink" title="9）角色订制：roles"></a>9）角色订制：roles</h4><p>① 简介<br>　　对于以上所有的方式有个弊端就是无法实现复用假设在同时部署Web、db、ha 时或不同服务器组合不同的应用就需要写多个yml文件。很难实现灵活的调用。<br>　　roles 用于层次性、结构化地组织playbook。roles 能够根据层次型结构自动装载变量文件、tasks以及handlers等。要使用roles只需要在playbook中使用include指令即可。简单来讲，roles就是通过分别将变量(vars)、文件(file)、任务(tasks)、模块(modules)及处理器(handlers)放置于单独的目录中，并可以便捷地include它们的一种机制。角色一般用于基于主机构建服务的场景中，但也可以是用于构建守护进程等场景中。<br>　　<br>② 角色集合<br>角色集合：<br>files/：存储由copy或script等模块调用的文件；<br>tasks/：此目录中至少应该有一个名为main.yml的文件，用于定义各task；其它的文件需要由main.yml进行“包含”调用；<br>handlers/：此目录中至少应该有一个名为main.yml的文件，用于定义各handler；其它的文件需要由main.yml进行“包含”调用；<br>vars/：此目录中至少应该有一个名为main.yml的文件，用于定义各variable；其它的文件需要由main.yml进行“包含”调用；<br>templates/：存储由template模块调用的模板文本；<br>meta/：此目录中至少应该有一个名为main.yml的文件，定义当前角色的特殊设定及其依赖关系；其它的文件需要由main.yml进行“包含”调用；<br>default/：此目录中至少应该有一个名为main.yml的文件，用于设定默认变量；</p><p>③ 角色定制实例</p><ol><li><p>在roles目录下生成对应的目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@server ansible]# cd roles/</span><br><span class="line">[root@server roles]# ls</span><br><span class="line">[root@server roles]# mkdir -pv ./&#123;nginx,mysql,httpd&#125;/&#123;files,templates,vars,tasks,handlers,meta,default&#125;</span><br><span class="line">[root@server roles]# tree</span><br><span class="line">.</span><br><span class="line">├── httpd</span><br><span class="line">│   ├── default</span><br><span class="line">│   ├── files</span><br><span class="line">│   ├── handlers</span><br><span class="line">│   ├── meta</span><br><span class="line">│   ├── tasks</span><br><span class="line">│   ├── templates</span><br><span class="line">│   └── vars</span><br><span class="line">├── mysql</span><br><span class="line">│   ├── default</span><br><span class="line">│   ├── files</span><br><span class="line">│   ├── handlers</span><br><span class="line">│   ├── meta</span><br><span class="line">│   ├── tasks</span><br><span class="line">│   ├── templates</span><br><span class="line">│   └── vars</span><br><span class="line">└── nginx</span><br><span class="line">    ├── default</span><br><span class="line">    ├── files</span><br><span class="line">    ├── handlers</span><br><span class="line">    ├── meta</span><br><span class="line">    ├── tasks</span><br><span class="line">    ├── templates</span><br><span class="line">    └── vars</span><br></pre></td></tr></table></figure></li><li><p>定义配置文件<br>我们需要修改的配置文件为/tasks/main.yml，下面，我们就来修改一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@server roles]# vim nginx/tasks/main.yml</span><br><span class="line">- name: cp</span><br><span class="line">  copy: src=nginx-1.10.2-1.el7.ngx.x86_64.rpm dest=/tmp/nginx-1.10.2-1.el7.ngx.x86_64.rpm</span><br><span class="line">- name: install</span><br><span class="line">  yum: name=/tmp/nginx-1.10.2-1.el7.ngx.x86_64.rpm state=latest</span><br><span class="line">- name: conf</span><br><span class="line">  template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf</span><br><span class="line">  tags: nginxconf</span><br><span class="line">  notify: new conf to reload</span><br><span class="line">- name: start service</span><br><span class="line">  service: name=nginx state=started enabled=true</span><br></pre></td></tr></table></figure></li><li><p>放置我们所需要的文件到指定目录<br>因为我们定义的角色已经有了新的组成方式，所以我们需要把文件都放到指定的位置，这样，才能让配置文件找到这些并进行加载。rpm包放在files目录下，模板放在templates目录下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@server nginx]# cp /tmp/nginx-1.10.2-1.el7.ngx.x86_64.rpm ./files/</span><br><span class="line">[root@server nginx]# cp /tmp/nginx.conf.j2 ./templates/</span><br><span class="line">[root@server nginx]# tree</span><br><span class="line">.</span><br><span class="line">├── default</span><br><span class="line">├── files</span><br><span class="line">│   └── nginx-1.10.2-1.el7.ngx.x86_64.rpm</span><br><span class="line">├── handlers</span><br><span class="line">├── meta</span><br><span class="line">├── tasks</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── templates</span><br><span class="line">│   └── nginx.conf.j2</span><br><span class="line">└── vars</span><br></pre></td></tr></table></figure></li><li><p>修改变量文件<br>我们在模板中定义的变量，也要去配置文件中加上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server nginx]# vim vars/main.yml</span><br><span class="line">nginxprot: 9999</span><br></pre></td></tr></table></figure></li><li><p>定义handlers文件<br>我们在配置文件中定义了notify，所以我么也需要定义handlers，我们来修改配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server nginx]# vim handlers/main.yml</span><br><span class="line">- name: new conf to reload</span><br><span class="line">  service: name=nginx state=restarted</span><br></pre></td></tr></table></figure></li><li><p>定义剧本文件<br>接下来，我们就来定义剧本文件，由于大部分设置我们都单独配置在了roles里面，所以，接下来剧本就只需要写一点点内容即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@server ansible]# vim roles.yml </span><br><span class="line">- hosts: web</span><br><span class="line">  remote_user: root</span><br><span class="line">  roles:</span><br><span class="line">    - nginx</span><br></pre></td></tr></table></figure></li><li><p>启动服务<br>剧本定义完成以后，我们就可以来启动服务了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@server ansible]# ansible-playbook roles.yml</span><br><span class="line"></span><br><span class="line">PLAY [web] *********************************************************************</span><br><span class="line"></span><br><span class="line">TASK [setup] *******************************************************************</span><br><span class="line">ok: [192.168.37.122]</span><br><span class="line">ok: [192.168.37.133]</span><br><span class="line"></span><br><span class="line">TASK [nginx : cp] **************************************************************</span><br><span class="line">ok: [192.168.37.122]</span><br><span class="line">ok: [192.168.37.133]</span><br><span class="line"></span><br><span class="line">TASK [nginx : install] *********************************************************</span><br><span class="line">changed: [192.168.37.122]</span><br><span class="line">changed: [192.168.37.133]</span><br><span class="line"></span><br><span class="line">TASK [nginx : conf] ************************************************************</span><br><span class="line">changed: [192.168.37.122]</span><br><span class="line">changed: [192.168.37.133]</span><br><span class="line"></span><br><span class="line">TASK [nginx : start service] ***************************************************</span><br><span class="line">changed: [192.168.37.122]</span><br><span class="line">changed: [192.168.37.133]</span><br><span class="line"></span><br><span class="line">RUNNING HANDLER [nginx : new conf to reload] ***********************************</span><br><span class="line">changed: [192.168.37.122]</span><br><span class="line">changed: [192.168.37.133]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************************************************************</span><br><span class="line">192.168.37.122             : ok=6    changed=4    unreachable=0    failed=0   </span><br><span class="line">192.168.37.133             : ok=6    changed=4    unreachable=0    failed=0</span><br></pre></td></tr></table></figure></li></ol><p>启动过后照例查看端口号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@server ansible]# ansible web -m shell -a &quot;ss -ntulp |grep 9999&quot;</span><br><span class="line">192.168.37.122 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">tcp    LISTEN     0      128       *:9999                  *:*                   users:((&quot;nginx&quot;,pid=7831,fd=6),(&quot;nginx&quot;,pid=7830,fd=6),(&quot;nginx&quot;,pid=7829,fd=6))</span><br><span class="line"></span><br><span class="line">192.168.37.133 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">tcp    LISTEN     0      128       *:9999                  *:*                   users:((&quot;nginx&quot;,pid=9654,fd=6),(&quot;nginx&quot;,pid=9653,fd=6),(&quot;nginx&quot;,pid=9652,fd=6))</span><br></pre></td></tr></table></figure></p><p>可以看出我们的剧本已经执行成功。</p><p>本文章转载自：<a href="https://www.cnblogs.com/keerya/p/8004566.html" target="_blank" rel="noopener">自动化运维工具——ansible详解(二)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Ansible-playbook-简介&quot;&gt;&lt;a href=&quot;#Ansible-playbook-简介&quot; class=&quot;headerlink&quot; title=&quot;Ansible playbook 简介&quot;&gt;&lt;/a&gt;Ansible playbook 简介&lt;/h3&gt;&lt;p&gt;pl
      
    
    </summary>
    
      <category term="Ansible" scheme="http://macintosh-c.coding.me/categories/Ansible/"/>
    
    
      <category term="ansible详解" scheme="http://macintosh-c.coding.me/tags/ansible%E8%AF%A6%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Ansible详解</title>
    <link href="http://macintosh-c.coding.me/2019/09/25/Ansible/ansible%E8%AF%A6%E8%A7%A3%E4%B8%80/"/>
    <id>http://macintosh-c.coding.me/2019/09/25/Ansible/ansible详解一/</id>
    <published>2019-09-25T02:45:56.000Z</published>
    <updated>2019-09-25T04:41:27.006Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ansible-简介"><a href="#ansible-简介" class="headerlink" title="ansible 简介"></a>ansible 简介</h3><h4 id="ansible-是什么？"><a href="#ansible-是什么？" class="headerlink" title="ansible 是什么？"></a>ansible 是什么？</h4><p>ansible是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（puppet、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。<br>ansible是基于 paramiko 开发的,并且基于模块化工作，本身没有批量部署的能力。真正具有批量部署的是ansible所运行的模块，ansible只是提供一种框架。ansible不需要在远程主机上安装client/agents，因为它们是基于ssh来和远程主机通讯的。ansible目前已经已经被红帽官方收购，是自动化运维工具中大家认可度最高的，并且上手容易，学习简单。是每位运维工程师必须掌握的技能之一。</p><h4 id="ansible-特点"><a href="#ansible-特点" class="headerlink" title="ansible 特点"></a>ansible 特点</h4><ol><li>部署简单，只需在主控端部署Ansible环境，被控端无需做任何操作；</li><li>默认使用SSH协议对设备进行管理；</li><li>有大量常规运维操作模块，可实现日常绝大部分操作；</li><li>配置简单、功能强大、扩展性强；</li><li>支持API及自定义模块，可通过Python轻松扩展；</li><li>通过Playbooks来定制强大的配置、状态管理；</li><li>轻量级，无需在客户端安装agent，更新时，只需在操作机上进行一次更新即可；</li><li>提供一个功能强大、操作性强的Web管理界面和REST API接口——AWX平台。</li></ol><h4 id="ansible-架构图"><a href="#ansible-架构图" class="headerlink" title="ansible 架构图"></a>ansible 架构图</h4><p><img src="/img/Ansible/ansible-1.png" alt="image"><br>上图中我们看到的主要模块如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Ansible：Ansible核心程序。</span><br><span class="line">HostInventory：记录由Ansible管理的主机信息，包括端口、密码、ip等。</span><br><span class="line">Playbooks：“剧本”YAML格式文件，多个任务定义在一个文件中，定义主机需要调用哪些模块来完成的功能。</span><br><span class="line">CoreModules：核心模块，主要操作是通过调用核心模块来完成管理任务。</span><br><span class="line">CustomModules：自定义模块，完成核心模块无法完成的功能，支持多种语言。</span><br><span class="line">ConnectionPlugins：连接插件，Ansible和Host通信使用</span><br></pre></td></tr></table></figure></p><h3 id="ansible-任务执行"><a href="#ansible-任务执行" class="headerlink" title="ansible 任务执行"></a>ansible 任务执行</h3><h4 id="ansible-任务执行模式"><a href="#ansible-任务执行模式" class="headerlink" title="ansible 任务执行模式"></a>ansible 任务执行模式</h4><p>Ansible 系统由控制主机对被管节点的操作方式可分为两类，即adhoc和playbook：</p><h5 id="ad-hoc模式-点对点模式"><a href="#ad-hoc模式-点对点模式" class="headerlink" title="ad-hoc模式(点对点模式)"></a>ad-hoc模式(点对点模式)</h5><p>使用单个模块，支持批量执行单条命令。ad-hoc 命令是一种可以快速输入的命令，而且不需要保存起来的命令。就相当于bash中的一句话shell。</p><h5 id="playbook模式-剧本模式"><a href="#playbook模式-剧本模式" class="headerlink" title="playbook模式(剧本模式)"></a>playbook模式(剧本模式)</h5><p>是Ansible主要管理方式，也是Ansible功能强大的关键所在。playbook通过多个task集合完成一类功能，如Web服务的安装部署、数据库服务器的批量备份等。可以简单地把playbook理解为通过组合多条ad-hoc操作的配置文件。<br>简单理解就是Ansible在运行时， 首先读取ansible.cfg中的配置， 根据规则获取Inventory中的管理主机列表， 并行的在这些主机中执行配置的任务， 最后等待执行返回的结果。　　</p><h4 id="ansible-命令执行过程"><a href="#ansible-命令执行过程" class="headerlink" title="ansible 命令执行过程　"></a>ansible 命令执行过程　</h4><ol><li>加载自己的配置文件，默认/etc/ansible/ansible.cfg；</li><li>查找对应的主机配置文件，找到要执行的主机或者组；</li><li>加载自己对应的模块文件，如 command；</li><li>通过ansible将模块或命令生成对应的临时py文件(python脚本)， 并将该文件传输至远程服务器；</li><li>对应执行用户的家目录的.ansible/tmp/XXX/XXX.PY文件；</li><li>给文件 +x 执行权限；</li><li>执行并返回结果；</li><li>删除临时py文件，sleep 0退出；</li></ol><h3 id="ansible-配置详解"><a href="#ansible-配置详解" class="headerlink" title="ansible 配置详解"></a>ansible 配置详解</h3><h4 id="ansible-安装方式"><a href="#ansible-安装方式" class="headerlink" title="ansible 安装方式"></a>ansible 安装方式</h4><p>ansible安装常用两种方式，yum安装和pip程序安装。下面我们来详细介绍一下这两种安装方式。</p><h5 id="使用-pip（python的包管理模块）安装"><a href="#使用-pip（python的包管理模块）安装" class="headerlink" title="使用 pip（python的包管理模块）安装"></a>使用 pip（python的包管理模块）安装</h5><p>首先，我们需要安装一个python-pip包，安装完成以后，则直接使用pip命令来安装我们的包，具体操作过程如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install python-pip</span><br><span class="line">pip install ansible</span><br></pre></td></tr></table></figure></p><h5 id="使用-yum-安装"><a href="#使用-yum-安装" class="headerlink" title="使用 yum 安装"></a>使用 yum 安装</h5><p>yum 安装是我们很熟悉的安装方式了。我们需要先安装一个epel-release包，然后再安装我们的 ansible 即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum install ansible –y</span><br></pre></td></tr></table></figure></p><h4 id="ansible-程序结构"><a href="#ansible-程序结构" class="headerlink" title="ansible 程序结构"></a>ansible 程序结构</h4><p>安装目录如下(yum安装)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　配置文件目录：/etc/ansible/</span><br><span class="line">　　执行文件目录：/usr/bin/</span><br><span class="line">　　Lib库依赖目录：/usr/lib/pythonX.X/site-packages/ansible/</span><br><span class="line">　　Help文档目录：/usr/share/doc/ansible-X.X.X/</span><br><span class="line">　　Man文档目录：/usr/share/man/man1/</span><br></pre></td></tr></table></figure></p><h4 id="ansible配置文件查找顺序"><a href="#ansible配置文件查找顺序" class="headerlink" title="ansible配置文件查找顺序"></a>ansible配置文件查找顺序</h4><p>ansible与我们其他的服务在这一点上有很大不同，这里的配置文件查找是从多个地方找的，顺序如下：</p><ol><li>检查环境变量ANSIBLE_CONFIG指向的路径文件(export ANSIBLE_CONFIG=/etc/ansible.cfg)；</li><li>~/.ansible.cfg，检查当前目录下的ansible.cfg配置文件；</li><li>/etc/ansible.cfg检查etc目录的配置文件。</li></ol><h4 id="ansible配置文件"><a href="#ansible配置文件" class="headerlink" title="ansible配置文件"></a>ansible配置文件</h4><p>ansible 的配置文件为/etc/ansible/ansible.cfg，ansible 有许多参数，下面我们列出一些常见的参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">inventory = /etc/ansible/hosts      #这个参数表示资源清单inventory文件的位置</span><br><span class="line">library = /usr/share/ansible        #指向存放Ansible模块的目录，支持多个目录方式，只要用冒号（：）隔开就可以</span><br><span class="line">forks = 5       #并发连接数，默认为5</span><br><span class="line">sudo_user = root        #设置默认执行命令的用户</span><br><span class="line">remote_port = 22        #指定连接被管节点的管理端口，默认为22端口，建议修改，能够更加安全</span><br><span class="line">host_key_checking = False       #设置是否检查SSH主机的密钥，值为True/False。关闭后第一次连接不会提示配置实例</span><br><span class="line">timeout = 60        #设置SSH连接的超时时间，单位为秒</span><br><span class="line">log_path = /var/log/ansible.log     #指定一个存储ansible日志的文件（默认不记录日志）</span><br></pre></td></tr></table></figure></p><h4 id="ansuble主机清单"><a href="#ansuble主机清单" class="headerlink" title="ansuble主机清单"></a>ansuble主机清单</h4><p>在配置文件中，我们提到了资源清单，这个清单就是我们的主机清单，里面保存的是一些 ansible 需要连接管理的主机列表。我们可以来看看他的定义方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、 直接指明主机地址或主机名：</span><br><span class="line">    ## green.example.com#</span><br><span class="line">    # blue.example.com#</span><br><span class="line">    # 192.168.100.1</span><br><span class="line">    # 192.168.100.10</span><br><span class="line">2、 定义一个主机组[组名]把地址或主机名加进去</span><br><span class="line">    [mysql_test]</span><br><span class="line">    192.168.253.159</span><br><span class="line">    192.168.253.160</span><br><span class="line">    192.168.253.153</span><br></pre></td></tr></table></figure></p><p>需要注意的是，这里的组成员可以使用通配符来匹配，这样对于一些标准化的管理来说就很轻松方便了。我们可以根据实际情况来配置我们的主机列表，具体操作如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">　　[root@server ~]# vim /etc/ansible/hosts</span><br><span class="line">[web]</span><br><span class="line">192.168.37.122</span><br><span class="line">192.168.37.133</span><br></pre></td></tr></table></figure></p><h3 id="ansible-常用命令"><a href="#ansible-常用命令" class="headerlink" title="ansible 常用命令"></a>ansible 常用命令</h3><h4 id="ansible-命令集"><a href="#ansible-命令集" class="headerlink" title="ansible 命令集"></a>ansible 命令集</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ansible　　Ansibe AD-Hoc 临时命令执行工具，常用于临时命令的执行</span><br><span class="line">/usr/bin/ansible-doc 　　Ansible 模块功能查看工具</span><br><span class="line">/usr/bin/ansible-galaxy　　下载/上传优秀代码或Roles模块 的官网平台，基于网络的</span><br><span class="line">/usr/bin/ansible-playbook　　Ansible 定制自动化的任务集编排工具</span><br><span class="line">/usr/bin/ansible-pull　　Ansible远程执行命令的工具，拉取配置而非推送配置（使用较少，海量机器时使用，对运维的架构能力要求较高）</span><br><span class="line">/usr/bin/ansible-vault　　Ansible 文件加密工具</span><br><span class="line">/usr/bin/ansible-console　　Ansible基于Linux Consoble界面可与用户交互的命令执行工具</span><br></pre></td></tr></table></figure><p>其中，我们比较常用的是/usr/bin/ansible和/usr/bin/ansible-playbook。</p><h4 id="ansible-doc-命令"><a href="#ansible-doc-命令" class="headerlink" title="ansible-doc 命令"></a>ansible-doc 命令</h4><p>ansible-doc 命令常用于获取模块信息及其使用帮助，一般用法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible-doc -l              #获取全部模块的信息</span><br><span class="line">ansible-doc -s MOD_NAME     #获取指定模块的使用帮助</span><br></pre></td></tr></table></figure></p><p>我们也可以查看一下ansible-doc的全部用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# ansible-doc</span><br><span class="line">Usage: ansible-doc [options] [module...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -h, --help  show this help message and exit　　# 显示命令参数API文档</span><br><span class="line">  -l, --list  List available modules　　#列出可用的模块</span><br><span class="line">  -M MODULE_PATH, --module-path=MODULE_PATH　　#指定模块的路径</span><br><span class="line">              specify path(s) to module library (default=None)</span><br><span class="line">  -s, --snippet  Show playbook snippet for specified module(s)　　#显示playbook制定模块的用法</span><br><span class="line">  -v, --verbose  verbose mode (-vvv for more, -vvvv to enable　　# 显示ansible-doc的版本号查看模块列表：connection debugging)</span><br><span class="line">  --version   show program&apos;s version number and exit</span><br></pre></td></tr></table></figure></p><h4 id="ansible-命令详解"><a href="#ansible-命令详解" class="headerlink" title="ansible 命令详解"></a>ansible 命令详解</h4><p>命令的具体格式如下：ansible <host-pattern> [-f forks] [-m module_name] [-a args]<br>也可以通过ansible -h来查看帮助，下面我们列出一些比较常用的选项，并解释其含义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-a MODULE_ARGS　#模块的参数，如果执行默认COMMAND的模块，即是命令参数，如： “date”，“pwd”等等</span><br><span class="line">-k，--ask-pass #ask for SSH password。登录密码，提示输入SSH密码而不是假设基于密钥的验证</span><br><span class="line">--ask-su-pass #ask for su password。su切换密码</span><br><span class="line">-K，--ask-sudo-pass #ask for sudo password。提示密码使用sudo，sudo表示提权操作</span><br><span class="line">--ask-vault-pass #ask for vault password。假设我们设定了加密的密码，则用该选项进行访问</span><br><span class="line">-B SECONDS #后台运行超时时间</span><br><span class="line">-C #模拟运行环境并进行预运行，可以进行查错测试</span><br><span class="line">-c CONNECTION #连接类型使用</span><br><span class="line">-f FORKS #并行任务数，默认为5</span><br><span class="line">-i INVENTORY #指定主机清单的路径，默认为/etc/ansible/hosts</span><br><span class="line">--list-hosts #查看有哪些主机组</span><br><span class="line">-m MODULE_NAME #执行模块的名字，默认使用 command 模块，所以如果是只执行单一命令可以不用 -m参数</span><br><span class="line">-o #压缩输出，尝试将所有结果在一行输出，一般针对收集工具使用</span><br><span class="line">-S #用 su 命令</span><br><span class="line">-R SU_USER #指定 su 的用户，默认为 root 用户</span><br><span class="line">-s #用 sudo 命令</span><br><span class="line">-U SUDO_USER #指定 sudo 到哪个用户，默认为 root 用户</span><br><span class="line">-T TIMEOUT #指定 ssh 默认超时时间，默认为10s，也可在配置文件中修改</span><br><span class="line">-u REMOTE_USER #远程用户，默认为 root 用户</span><br><span class="line">-v #查看详细信息，同时支持-vvv，-vvvv可查看更详细信息</span><br></pre></td></tr></table></figure></host-pattern></p><h4 id="ansible-配置公私钥"><a href="#ansible-配置公私钥" class="headerlink" title="ansible 配置公私钥"></a>ansible 配置公私钥</h4><p>上面我们已经提到过 ansible 是基于 ssh 协议实现的，所以其配置公私钥的方式与 ssh 协议的方式相同，具体操作步骤如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#1.生成私钥</span><br><span class="line">[root@server ~]# ssh-keygen </span><br><span class="line">#2.向主机分发私钥</span><br><span class="line">[root@server ~]# ssh-copy-id root@192.168.37.122</span><br><span class="line">[root@server ~]# ssh-copy-id root@192.168.37.133</span><br></pre></td></tr></table></figure></p><p>这样的话，就可以实现无密码登录，我们的实验过程也会顺畅很多。注意，如果出现了一下报错：<br>　　-bash: ssh-copy-id: command not found<br>那么就证明我们需要安装一个包：yum -y install openssh-clientsansible,把包安装上即可。</p><h3 id="ansible-常用模块"><a href="#ansible-常用模块" class="headerlink" title="ansible 常用模块"></a>ansible 常用模块</h3><p>ansible 常用模块</p><h4 id="1）主机连通性测试"><a href="#1）主机连通性测试" class="headerlink" title="1）主机连通性测试"></a>1）主机连通性测试</h4><p>我们使用ansible web -m ping命令来进行主机连通性测试</p><h4 id="2）command-模块"><a href="#2）command-模块" class="headerlink" title="2）command 模块"></a>2）command 模块</h4><p>这个模块可以直接在远程主机上执行命令，并将结果返回本主机。<br>命令模块接受命令名称，后面是空格分隔的列表参数。给定的命令将在所有选定的节点上执行。它不会通过shell进行处理，比如$HOME和操作如”&lt;”，”&gt;”，”|”，”;”，”&amp;” 工作（需要使用（shell）模块实现这些功能）。注意，该命令不支持| 管道命令。<br>下面来看一看该模块下常用的几个命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chdir　　　　　　 # 在执行命令之前，先切换到该目录</span><br><span class="line">executable # 切换shell来执行命令，需要使用命令的绝对路径</span><br><span class="line">free_form 　 # 要执行的Linux指令，一般使用Ansible的-a参数代替。</span><br><span class="line">creates 　# 一个文件名，当这个文件存在，则该命令不执行,可以</span><br><span class="line">用来做判断</span><br><span class="line">removes # 一个文件名，这个文件不存在，则该命令不执行</span><br></pre></td></tr></table></figure></p><p>例：ansible web -m command -a ‘chdir=/data/ ls’    #先切换到/data/ 目录，再执行“ls”命令</p><h4 id="3）shell-模块"><a href="#3）shell-模块" class="headerlink" title="3）shell 模块"></a>3）shell 模块</h4><p>shell模块可以在远程主机上调用shell解释器运行命令，支持shell的各种功能，例如管道等。<br>例：ansible web -m shell -a ‘cat /etc/passwd |grep “keer”‘</p><h4 id="4）copy-模块"><a href="#4）copy-模块" class="headerlink" title="4）copy 模块"></a>4）copy 模块</h4><p>这个模块用于将文件复制到远程主机，同时支持给定内容生成文件和修改权限等。<br>其相关选项如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src　　　　#被复制到远程主机的本地文件。可以是绝对路径，也可以是相对路径。如果路径是一个目录，则会递归复制，用法类似于&quot;rsync&quot;</span><br><span class="line">content　　　#用于替换&quot;src&quot;，可以直接指定文件的值</span><br><span class="line">dest　　　　#必选项，将源文件复制到的远程主机的绝对路径</span><br><span class="line">backup　　　#当文件内容发生改变后，在覆盖之前把源文件备份，备份文件包含时间信息</span><br><span class="line">directory_mode　　　　#递归设定目录的权限，默认为系统默认权限</span><br><span class="line">force　　　　#当目标主机包含该文件，但内容不同时，设为&quot;yes&quot;，表示强制覆盖；设为&quot;no&quot;，表示目标主机的目标位置不存在该文件才复制。默认为&quot;yes&quot;</span><br><span class="line">others　　　　#所有的 file 模块中的选项可以在这里使用</span><br></pre></td></tr></table></figure></p><p>例：ansible web -m copy -a ‘src=~/hello dest=/data/hello’ </p><h4 id="5）file-模块"><a href="#5）file-模块" class="headerlink" title="5）file 模块"></a>5）file 模块</h4><p>该模块主要用于设置文件的属性，比如创建文件、创建链接文件、删除文件等。<br>　　下面是一些常见的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">force　　#需要在两种情况下强制创建软链接，一种是源文件不存在，但之后会建立的情况下；另一种是目标软链接已存在，需要先取消之前的软链，然后创建新的软链，有两个选项：yes|no</span><br><span class="line">group　　#定义文件/目录的属组。后面可以加上mode：定义文件/目录的权限</span><br><span class="line">owner　　#定义文件/目录的属主。后面必须跟上path：定义文件/目录的路径</span><br><span class="line">recurse　　#递归设置文件的属性，只对目录有效，后面跟上src：被链接的源文件路径，只应用于state=link的情况</span><br><span class="line">dest　　#被链接到的路径，只应用于state=link的情况</span><br><span class="line">state　　#状态，有以下选项：</span><br><span class="line">directory：如果目录不存在，就创建目录</span><br><span class="line">file：即使文件不存在，也不会被创建</span><br><span class="line">link：创建软链接</span><br><span class="line">hard：创建硬链接</span><br><span class="line">touch：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间</span><br><span class="line">absent：删除目录、文件或者取消链接文件</span><br></pre></td></tr></table></figure></p><p>例：ansible web -m file -a ‘path=/data/app state=directory’</p><h4 id="6）fetch-模块"><a href="#6）fetch-模块" class="headerlink" title="6）fetch 模块"></a>6）fetch 模块</h4><p>该模块用于从远程某主机获取（复制）文件到本地。<br>　　有两个选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dest：用来存放文件的目录</span><br><span class="line">src：在远程拉取的文件，并且必须是一个file，不能是目录</span><br></pre></td></tr></table></figure></p><p>例：ansible web -m fetch -a ‘src=/data/hello dest=/data’</p><h4 id="7）cron-模块"><a href="#7）cron-模块" class="headerlink" title="7）cron 模块"></a>7）cron 模块</h4><p>该模块适用于管理cron计划任务的。<br>　　其使用的语法跟我们的crontab文件中的语法一致，同时，可以指定以下选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">day= #日应该运行的工作( 1-31, , /2, )</span><br><span class="line">hour= # 小时 ( 0-23, , /2, )</span><br><span class="line">minute= #分钟( 0-59, , /2, )</span><br><span class="line">month= # 月( 1-12, *, /2, )</span><br><span class="line">weekday= # 周 ( 0-6 for Sunday-Saturday,, )</span><br><span class="line">job= #指明运行的命令是什么</span><br><span class="line">name= #定时任务描述</span><br><span class="line">reboot # 任务在重启时运行，不建议使用，建议使用special_time</span><br><span class="line">special_time #特殊的时间范围，参数：reboot（重启时），annually（每年），monthly（每月），weekly（每周），daily（每天），hourly（每小时）</span><br><span class="line">state #指定状态，present表示添加定时任务，也是默认设置，absent表示删除定时任务</span><br><span class="line">user # 以哪个用户的身份执行</span><br></pre></td></tr></table></figure></p><p>例：ansible web -m cron -a ‘name=”ntp update every 5 min” minute=*/5 job=”/sbin/ntpdate 172.17.0.1 &amp;&gt; /dev/null”‘</p><h4 id="8）yum-模块"><a href="#8）yum-模块" class="headerlink" title="8）yum 模块"></a>8）yum 模块</h4><p>顾名思义，该模块主要用于软件的安装。<br>　　其选项如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name=　　#所安装的包的名称</span><br><span class="line">state=　　#present---&gt;安装， latest---&gt;安装最新的, absent---&gt; 卸载软件。</span><br><span class="line">update_cache　　#强制更新yum的缓存</span><br><span class="line">conf_file　　#指定远程yum安装时所依赖的配置文件（安装本地已有的包）。</span><br><span class="line">disable_pgp_check　　#是否禁止GPG checking，只用于presentor latest。</span><br><span class="line">disablerepo　　#临时禁止使用yum库。 只用于安装或更新时。</span><br><span class="line">enablerepo　　#临时使用的yum库。只用于安装或更新时。</span><br></pre></td></tr></table></figure></p><p>例：ansible web -m yum -a ‘name=htop state=present’</p><h4 id="9）service-模块"><a href="#9）service-模块" class="headerlink" title="9）service 模块"></a>9）service 模块</h4><p>该模块用于服务程序的管理。<br>　　其主要选项如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arguments #命令行提供额外的参数</span><br><span class="line">enabled #设置开机启动。</span><br><span class="line">name= #服务名称</span><br><span class="line">runlevel #开机启动的级别，一般不用指定。</span><br><span class="line">sleep #在重启服务的过程中，是否等待。如在服务关闭以后等待2秒再启动。(定义在剧本中。)</span><br><span class="line">state #有四种状态，分别为：started---&gt;启动服务， stopped---&gt;停止服务， restarted---&gt;重启服务， reloaded---&gt;重载配置</span><br></pre></td></tr></table></figure></p><p>例：ansible web -m service -a ‘name=nginx state=started enabled=true’</p><h4 id="10）user-模块"><a href="#10）user-模块" class="headerlink" title="10）user 模块"></a>10）user 模块</h4><p>该模块主要是用来管理用户账号。<br>　　其主要选项如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">comment　　# 用户的描述信息</span><br><span class="line">createhome　　# 是否创建家目录</span><br><span class="line">force　　# 在使用state=absent时, 行为与userdel –force一致.</span><br><span class="line">group　　# 指定基本组</span><br><span class="line">groups　　# 指定附加组，如果指定为(groups=)表示删除所有组</span><br><span class="line">home　　# 指定用户家目录</span><br><span class="line">move_home　　# 如果设置为home=时, 试图将用户主目录移动到指定的目录</span><br><span class="line">name　　# 指定用户名</span><br><span class="line">non_unique　　# 该选项允许改变非唯一的用户ID值</span><br><span class="line">password　　# 指定用户密码</span><br><span class="line">remove　　# 在使用state=absent时, 行为是与userdel –remove一致</span><br><span class="line">shell　　# 指定默认shell</span><br><span class="line">state　　# 设置帐号状态，不指定为创建，指定值为absent表示删除</span><br><span class="line">system　　# 当创建一个用户，设置这个用户是系统用户。这个设置不能更改现有用户</span><br><span class="line">uid　　# 指定用户的uid</span><br></pre></td></tr></table></figure></p><p>例：ansible web -m user -a ‘name=keer uid=11111’</p><h4 id="11）group-模块"><a href="#11）group-模块" class="headerlink" title="11）group 模块"></a>11）group 模块</h4><p>该模块主要用于添加或删除组。<br>　　常用的选项如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gid=　　#设置组的GID号</span><br><span class="line">name=　　#指定组的名称</span><br><span class="line">state=　　#指定组的状态，默认为创建，设置值为absent为删除</span><br><span class="line">system=　　#设置值为yes，表示创建为系统组</span><br></pre></td></tr></table></figure></p><p>例：ansible web -m group -a ‘name=sanguo gid=12222’</p><h4 id="12）script-模块"><a href="#12）script-模块" class="headerlink" title="12）script 模块"></a>12）script 模块</h4><p>该模块用于将本机的脚本在被管理端的机器上运行。<br>　　该模块直接指定脚本的路径即可，我们通过例子来看一看到底如何使用的：<br>　　首先，我们写一个脚本，并给其加上执行权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# vim /tmp/df.sh</span><br><span class="line">    #!/bin/bash</span><br><span class="line"></span><br><span class="line">    date &gt;&gt; /tmp/disk_total.log</span><br><span class="line">    df -lh &gt;&gt; /tmp/disk_total.log </span><br><span class="line">[root@server ~]# chmod +x /tmp/df.sh</span><br></pre></td></tr></table></figure></p><p>然后，我们直接运行命令来实现在被管理端执行该脚本：<br>例：ansible web -m script -a ‘/tmp/df.sh’</p><h4 id="13）setup-模块"><a href="#13）setup-模块" class="headerlink" title="13）setup 模块"></a>13）setup 模块</h4><p>该模块主要用于收集信息，是通过调用facts组件来实现的。<br>　　facts组件是Ansible用于采集被管机器设备信息的一个功能，我们可以使用setup模块查机器的所有facts信息，可以使用filter来查看指定信息。整个facts信息被包装在一个JSON格式的数据结构中，ansible_facts是最上层的值。<br>　　facts就是变量，内建变量 。每个主机的各种信息，cpu颗数、内存大小等。会存在facts中的某个变量中。调用后返回很多对应主机的信息，在后面的操作中可以根据不同的信息来做不同的操作。如redhat系列用yum安装，而debian系列用apt来安装软件。<br>例：ansible web -m setup -a ‘filter=”<em>mem</em>“‘   #查看内存</p><p>各模块具体的使用及详细返回案例见转载出处。</p><p>本文章转载自：<a href="https://www.cnblogs.com/keerya/p/7987886.html" target="_blank" rel="noopener">自动化运维工具——ansible详解(一)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ansible-简介&quot;&gt;&lt;a href=&quot;#ansible-简介&quot; class=&quot;headerlink&quot; title=&quot;ansible 简介&quot;&gt;&lt;/a&gt;ansible 简介&lt;/h3&gt;&lt;h4 id=&quot;ansible-是什么？&quot;&gt;&lt;a href=&quot;#ansible-是
      
    
    </summary>
    
      <category term="Ansible" scheme="http://macintosh-c.coding.me/categories/Ansible/"/>
    
    
      <category term="ansible详解" scheme="http://macintosh-c.coding.me/tags/ansible%E8%AF%A6%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>centos安装docker</title>
    <link href="http://macintosh-c.coding.me/2019/09/24/Docker/docker%E5%AE%89%E8%A3%85/"/>
    <id>http://macintosh-c.coding.me/2019/09/24/Docker/docker安装/</id>
    <published>2019-09-24T05:45:56.000Z</published>
    <updated>2019-09-25T07:09:34.756Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看一些关于cicd方面的资料时，看到一些不错的博文，适当记录，加深理解。这篇是关于Docker的，顺便记录下docker的安装。</p><h3 id="Docker-简介"><a href="#Docker-简介" class="headerlink" title="Docker 简介"></a>Docker 简介</h3><p>docker 是一种容器技术，作用是用来快速部署服务。</p><p><strong>为什么说 docker 是快速部署</strong></p><p>我们做一个项目，最不想面对的不是开发，也不是调试，而是部署！！！！<br>比如你这个机器上的环境是 python3 你用另一个机器上却是 python2 或者压根就没有 python 环境。<br>好了，这个时候你怎么解决呢。 对，只要去新机器上你就要部署 python。<br>嗯~ 好吧， 部署 python 就 python，但是你的项目里面还要用到 MySQL，好的没问题， 你又要去用 pip 去安装 python 的 mysql 模块。 哦对了， 我记我们的项目里面还有 redis， 两种非对称加密，还有三方队列， 哦， 还有阿里云的接口，对对对对对对哦。 乱七八糟的东西真的好多，搞完了几个小时没有了，遇到网络卡了，那就更没有谱了。</p><p><strong>好了， 我们进化到，快速1.0 时代</strong></p><p>我们把要安装的东西全都放进离线安装包里面，再写个 bash 脚本<br>对，这种事情真的有过。 部署全靠一个 bash 脚本，毕竟不用手动了么。 可是就是苦了写脚本的人，我就写过一个脚本写了好久。</p><p><strong>于是， 我们又进化了， 快速2.0时代</strong></p><p>我们把整个系统做成了镜像，存在了光盘里面，每当要架设的时候赶快用镜像做出一个新的系统！<br>可能经历过的自然会懂，还特么要做镜像啊，离机房远咋办啊！！我们做游戏，开服快，更新更快！我们版本更新过快怎么办啊！！我们还要刻刻刻么？ 我们的 tornado 又更新了，我去，我们客户端的 protobuf 也更新了，可是我们有100台服务器啊，为了这一点小小的东西更新么？西八！</p><p><strong>于是，我们再次加入光荣的进化， 快速3.0时代</strong></p><p>我们把服务装进了 docker 中<br>我们把做好的镜像，一个命令 pull 了下来，嗯，蛮快又一个命令 docker start XXXXXX 服务起来了。哦，你说多服务？好吧那就写个docker-compose.file吧。 嗯哼？ 你说集群部署 来来来， 有Kubernetes、Mesos，Fleet和Swarm 任君挑选，不好用不要钱。</p><p>docker 是部署的最佳辅助，即使你烂成渣渣，docker 也可以扶你上王者。<br>那Docker由什么组成呢， 包括三个基本概念:</p><ul><li>仓库(Repository)</li><li>镜像(Image)</li><li>容器(Container)</li></ul><p>1，其中Registry是Docker用于存放镜像文件的仓库，Docker 仓库的概念跟Git 类似.<br>2，所谓镜像就是构建容器的源代码，是一个只读的模板，由一层一层的文件系统组成的，类似于虚拟机的镜像.<br>3，那么容器就是由Docker镜像创建的运行实例，类似于虚拟机，容器之间是相互隔离的，包含特定的应用及其所需的依赖文件.</p><h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><p>如下命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">yum install docker-ce</span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br><span class="line">docker version</span><br></pre></td></tr></table></figure></p><p>1安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的。<br>2设置yum源。<br>3安装Docker，命令：yum install docker-ce-版本号，版本号可以通过yum list docker-ce –showduplicates | sort -r查看，我这边不带版本号用的是默认最新。<br>4启动Docker。<br>5加入开机启动。<br>6验证安装是否成功(有client和service两部分表示docker安装启动都成功了)。</p><h3 id="常用Docker命令"><a href="#常用Docker命令" class="headerlink" title="常用Docker命令"></a>常用Docker命令</h3><ol><li>docker ps 查看当前正在运行的容器</li><li>docker ps -a 查看所有容器的状态</li><li>docker start/stop id/name 启动/停止某个容器</li><li>docker attach id 进入某个容器(使用exit退出后容器也跟着停止运行)</li><li>docker exec -ti id /bin/bash启动一个伪终端以交互式的方式进入某个容器（使用exit退出后容器不停止运行）</li><li>docker images 查看本地镜像</li><li>docker rm id/name 删除某个容器</li><li>docker rmi id/name 删除某个镜像</li><li>docker run –name test -ti ubuntu /bin/bash  复制ubuntu容器并且重命名为test且运行，然后以伪终端交互式方式进入容器，运行bash</li><li>docker build -t soar/centos:7.1 .  通过当前目录下的Dockerfile创建一个名为soar/centos:7.1的镜像</li><li>docker run -d -p 2222:22 –name test soar/centos:7.1  以镜像soar/centos:7.1创建名为test的容器，并以后台模式运行，并做端口映射到宿主机2222端口，P参数重启容器宿主机端口会发生改变</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在看一些关于cicd方面的资料时，看到一些不错的博文，适当记录，加深理解。这篇是关于Docker的，顺便记录下docker的安装。&lt;/p&gt;
&lt;h3 id=&quot;Docker-简介&quot;&gt;&lt;a href=&quot;#Docker-简介&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Docker" scheme="http://macintosh-c.coding.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://macintosh-c.coding.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Mac下安装docker</title>
    <link href="http://macintosh-c.coding.me/2019/09/24/Docker/Mac%E4%B8%8Bdocker%E5%AE%89%E8%A3%85/"/>
    <id>http://macintosh-c.coding.me/2019/09/24/Docker/Mac下docker安装/</id>
    <published>2019-09-24T05:45:56.000Z</published>
    <updated>2019-09-25T08:47:00.340Z</updated>
    
    <content type="html"><![CDATA[<p>本地Mac下安装docker</p><h3 id="Mac下安装指令"><a href="#Mac下安装指令" class="headerlink" title="Mac下安装指令"></a>Mac下安装指令</h3><p>只需要一条指令：<code>brew cask install docker</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">itlocals-MacBook-Pro:~ barry.cao$ brew cask install docker</span><br><span class="line">Updating Homebrew...</span><br><span class="line">^C==&gt; Satisfying dependencies</span><br><span class="line">==&gt; Downloading https://download.docker.com/mac/stable/31259/Docker.dmg</span><br><span class="line">######################################################################## 100.0%</span><br><span class="line">==&gt; Verifying SHA-256 checksum for Cask &apos;docker&apos;.</span><br><span class="line">==&gt; Installing Cask docker</span><br><span class="line">==&gt; Moving App &apos;Docker.app&apos; to &apos;/Applications/Docker.app&apos;.</span><br><span class="line">docker was successfully installed!</span><br></pre></td></tr></table></figure></p><p>即安装成功。</p><h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><p>下载完毕后，你会发现电脑的程序里多了一个docker.app<br>此时若未点击启动过，终端输入：docker –version会显示如下：<br>-bash: docker: command not found<br>点击程序docker，启动并登陆后，再到终端执行如下指令，才起效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br><span class="line">docker images</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure></p><p>如此时退出Docker Desktop,则执行docker images命令结果如下：<br>Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?<br>守护线程被干掉了，😹</p><h3 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h3><p>国内网络问题，后续拉取 Docker 镜像十分缓慢，可以需要配置加速器来解决 使用的是网易的镜像地址：<a href="http://hub-mirror.c.163.com。" target="_blank" rel="noopener">http://hub-mirror.c.163.com。</a><br>在任务栏点击 Docker for mac 应用图标 -&gt; Perferences… -&gt; Daemon -&gt; Registry mirrors。在列表中填写加速器地址即可。修改完成之后，点击 Apply &amp; Restart 按钮，Docker 就会重启并应用配置的镜像地址了。<br>我们可以通过 docker info 来查看是否配置成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker info</span><br><span class="line">...</span><br><span class="line">Registry Mirrors:</span><br><span class="line">http://hub-mirror.c.163.com</span><br><span class="line">Live Restore Enabled: false</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本地Mac下安装docker&lt;/p&gt;
&lt;h3 id=&quot;Mac下安装指令&quot;&gt;&lt;a href=&quot;#Mac下安装指令&quot; class=&quot;headerlink&quot; title=&quot;Mac下安装指令&quot;&gt;&lt;/a&gt;Mac下安装指令&lt;/h3&gt;&lt;p&gt;只需要一条指令：&lt;code&gt;brew cask 
      
    
    </summary>
    
      <category term="Docker" scheme="http://macintosh-c.coding.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://macintosh-c.coding.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Mac下安装Memcached</title>
    <link href="http://macintosh-c.coding.me/2019/09/18/Databases/memcached/Mac%E4%B8%8B%E5%AE%89%E8%A3%85memcached/"/>
    <id>http://macintosh-c.coding.me/2019/09/18/Databases/memcached/Mac下安装memcached/</id>
    <published>2019-09-18T14:20:29.000Z</published>
    <updated>2019-09-18T14:42:14.676Z</updated>
    
    <content type="html"><![CDATA[<p>临时用到Memcached，本地安装了个调试，安装过程记录如下，后续使用学习，再另起笔记</p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>使用homebrew，方便快捷：（今天接收新项目，新安装了许多组件，感觉到了brew的强大，神器）<br>brew install memcached</p><p>安装完成后，透过安装日记提示可以看到启动方式<br>To have launchd start memcached now and restart at login:<br>  brew services start memcached<br>Or, if you don’t want/need a background service you can just run:<br>  /usr/local/opt/memcached/bin/memcached</p><p>提示了后台和非后台启动的两种方式</p><h2 id="启动memcached"><a href="#启动memcached" class="headerlink" title="启动memcached"></a>启动memcached</h2><p>上述的brew启动指令即可，也可使用如下：<br>输入命令：memcached -d -p 11211 -u nobody -c 1024 -m 64</p><p>启动命令说明：<br>memcached -p 11211 -m 64m -d -vv<br>memcached启动选项如下：<br>-p  使用的TCP端口，默认为11211<br>-m  最大内存大小默认为64m<br>-vv 用very verbose模式启动，调试信息和错误输出到控制台<br>-d  作为daemon在后台启动</p><h2 id="连接到memcached"><a href="#连接到memcached" class="headerlink" title="连接到memcached"></a>连接到memcached</h2><p>直接使用telnet连接到memcached端口，输入命令即可：telnet localhost 11211<br>Trying 127.0.0.1…<br>Connected to localhost.<br>Escape character is ‘^]’.</p><p>mac如果不支持telnet指令，需要安装，使用brew直接安装很快捷：brew install telnet，是不是很神器 </p><p>结束telnet，输入telnet退出命令：quit命令退出。</p><h2 id="简单测试指令"><a href="#简单测试指令" class="headerlink" title="简单测试指令"></a>简单测试指令</h2><p>保存数据，输入命令：<br>set foo 0 0 3<br>bar<br>显示STORED 表示成功。</p><p>数据读取，输入命令：get foo<br>得到输出：<br>VALUE foo 0 3<br>bar<br>END</p><p>这样基本就安装ok了，代码上做好地址调整，即可连接到本地的memcached上。更复杂的指令，学习后续具体用到再笔记。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;临时用到Memcached，本地安装了个调试，安装过程记录如下，后续使用学习，再另起笔记&lt;/p&gt;
&lt;h2 id=&quot;下载安装&quot;&gt;&lt;a href=&quot;#下载安装&quot; class=&quot;headerlink&quot; title=&quot;下载安装&quot;&gt;&lt;/a&gt;下载安装&lt;/h2&gt;&lt;p&gt;使用homebrew
      
    
    </summary>
    
      <category term="Database" scheme="http://macintosh-c.coding.me/categories/Database/"/>
    
    
      <category term="Memcached安装" scheme="http://macintosh-c.coding.me/tags/Memcached%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
</feed>
