<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>macintosh-c&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/aec2ea475468bef1ef6aafb32d76a922</icon>
  <subtitle>当你的才华撑不起你的野心时，就应该静下心来好好学习。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://macintosh-c.coding.me/"/>
  <updated>2020-03-19T07:22:09.543Z</updated>
  <id>http://macintosh-c.coding.me/</id>
  
  <author>
    <name>Macintosh-c</name>
    <email>657582163@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis批量写入</title>
    <link href="http://macintosh-c.coding.me/2020/03/19/Databases/Redis/redis%E6%89%B9%E9%87%8F%E5%86%99%E5%85%A5/"/>
    <id>http://macintosh-c.coding.me/2020/03/19/Databases/Redis/redis批量写入/</id>
    <published>2020-03-19T04:20:29.000Z</published>
    <updated>2020-03-19T07:22:09.543Z</updated>
    
    <content type="html"><![CDATA[<p>最近接到需求，提前数据预热，需要导入千万级数据到redis，如果还是使用普通的逐条插入的方法，可能需要耗费大量的时间，于是调研了redis pipe管道，批量导入，避免以往的插一条数据，建立一次连接的消耗。记录一下两种实现方法，一种是通过shell脚本批量导入，另一种是代码端的实现。接收的均为csv文件。</p><h3 id="shell脚本批量导入"><a href="#shell脚本批量导入" class="headerlink" title="shell脚本批量导入"></a>shell脚本批量导入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">timeStamp=`date -d &quot;$current&quot; +%s`   </span><br><span class="line">echo $timeStamp</span><br><span class="line"></span><br><span class="line">REDIS_HOST=localhost</span><br><span class="line">REDIS_PORT=6379</span><br><span class="line"></span><br><span class="line">KEYNAME=BFF:TIMER:</span><br><span class="line">TEMPFILE=/c/Users/barry.cao/Desktop/Time.csv</span><br><span class="line">OUTFILE=/c/Users/barry.cao/Desktop/test.text</span><br><span class="line"></span><br><span class="line">cat $TEMPFILE |awk -F &quot;,&quot; &apos;&#123;print &quot;SET BFF:TIMER:&quot; $12 &quot; \&quot;&#123;\\\&quot;favorite\\\&quot;:\\\&quot;&quot;$6&quot;\\\&quot;,\\\&quot;firstGoldTime\\\&quot;:\\\&quot;&quot;$2&quot;\\\&quot;,\\\&quot;firstStore\\\&quot;:\\\&quot;&quot;$11&quot;\\\&quot;,\\\&quot;partner_member_id\\\&quot;:\\\&quot;&quot;$12&quot;\\\&quot;,\\\&quot;since\\\&quot;:\\\&quot;&quot;$1&quot;\\\&quot;,\\\&quot;topLevel\\\&quot;:\\\&quot;&quot;$3&quot;\\\&quot;,\\\&quot;totalCities\\\&quot;:&quot;$7&quot;,\\\&quot;totalFreeCups\\\&quot;:&quot;$5&quot;,\\\&quot;totalPoints\\\&quot;:&quot;$4&quot;,\\\&quot;totalStores\\\&quot;:&quot;$8&quot;,\\\&quot;totalVolume\\\&quot;:\\\&quot;&quot;$9&quot;\\\&quot;,\\\&quot;withFriendsVisits\\\&quot;:&quot;$10&quot;&#125;\&quot;&quot;&#125;&apos; &gt; $OUTFILE</span><br><span class="line"></span><br><span class="line">unix2dos $OUTFILE</span><br><span class="line"></span><br><span class="line">timeStamp2=`date -d &quot;$current2&quot; +%s`   </span><br><span class="line">echo $timeStamp2</span><br><span class="line">echo &quot;生成文件耗时： $(($timeStamp2-$timeStamp))&quot;</span><br><span class="line"></span><br><span class="line">cat $OUTFILE | redis-cli -p 6379 --pipe</span><br><span class="line"></span><br><span class="line">timeStamp3=`date -d &quot;$current3&quot; +%s`   </span><br><span class="line">echo $timeStamp3</span><br><span class="line">echo &quot;存入数据库耗时： $(($timeStamp3-$timeStamp2))&quot;</span><br></pre></td></tr></table></figure><p>在redis服务器上执行此sh文件即可<br>脚本记录了每一步的耗时，先将接收到的csv文件处理，通过awk命令每一行根据’,’分割作为入参，根据插入到redis里的数据要求格式，组装redis单条插入set key value指令，生成txt文件，然后通过unix2dos转码，如果无此命令需要先安装，然后通过redis-cli + –pipe插入到数据库</p><h3 id="java代码实现"><a href="#java代码实现" class="headerlink" title="java代码实现"></a>java代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">ArrayList&lt;String&gt; csvs = new ArrayList&lt;&gt;();</span><br><span class="line">CsvReader reader = new CsvReader(filePath, &apos;,&apos;, Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">        // 跳过表头 如果需要表头的话，这句可以忽略</span><br><span class="line">        //reader.readHeaders();</span><br><span class="line"></span><br><span class="line">        while (reader.readRecord()) &#123;</span><br><span class="line">            String[] strs = reader.getValues();</span><br><span class="line">            String customerId = strs[0];</span><br><span class="line"></span><br><span class="line">            if (customerId != null &amp;&amp; customerId != &quot; &quot; &amp;&amp; customerId != &quot;&quot;) &#123;</span><br><span class="line">                csvs.add(customerId);</span><br><span class="line">            &#125;</span><br><span class="line">            if (csvs.size() &gt;= 1000000) &#123;</span><br><span class="line">                batchCacheCustomerIdInfo(csvs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(csvs.size()&gt;0)&#123;</span><br><span class="line">            batchCacheCustomerIdInfo(csvs);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void batchCacheCustomerIdInfo(List&lt;String&gt; dataList) &#123;</span><br><span class="line">        //使用pipeline方式</span><br><span class="line">        redisTemplate.executePipelined(new RedisCallback&lt;List&lt;Object&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public List&lt;Object&gt; doInRedis(RedisConnection connection) throws DataAccessException &#123;</span><br><span class="line">                for (String customerId : dataList) &#123;</span><br><span class="line">                    String key = &quot;CUSTOMER_CENTER_MEMBERID&quot;;</span><br><span class="line">                    byte[] rawKey = redisTemplate.getKeySerializer().serialize(key);</span><br><span class="line">                    connection.lPush(rawKey,redisTemplate.getValueSerializer().serialize(customerId));</span><br><span class="line">                &#125;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private void batchCacheBearInfo(List&lt;String&gt; dataList, long expire) &#123;</span><br><span class="line">        //使用pipeline方式</span><br><span class="line">        redisTemplate.executePipelined(new RedisCallback&lt;List&lt;Object&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public List&lt;Object&gt; doInRedis(RedisConnection connection) throws DataAccessException &#123;</span><br><span class="line">                for (String openId : dataList) &#123;</span><br><span class="line">                    String key = RedisHashKey.BFF_ILLEGAL_OPENID + openId;</span><br><span class="line">                    byte[] rawKey = redisTemplate.getKeySerializer().serialize(key);</span><br><span class="line">                    if (expire &gt; 0) &#123;</span><br><span class="line">                        connection.setEx(rawKey, expire, redisTemplate.getValueSerializer().serialize(&quot;YES&quot;));</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        connection.setNX(rawKey, redisTemplate.getValueSerializer().serialize(&quot;YES&quot;));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以通过接口接收一个csv文件，通过CsvReader 逐行读取文件，封装成数据List<string>，然后通过batchCacheCustomerIdInfo方法，批量导入到redis，本段代码是批量插入到redis一个list中。也可通过batchCacheBearInfo方法，插入key-value类型数据。</string></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近接到需求，提前数据预热，需要导入千万级数据到redis，如果还是使用普通的逐条插入的方法，可能需要耗费大量的时间，于是调研了redis pipe管道，批量导入，避免以往的插一条数据，建立一次连接的消耗。记录一下两种实现方法，一种是通过shell脚本批量导入，另一种是代码
      
    
    </summary>
    
      <category term="Redis" scheme="http://macintosh-c.coding.me/categories/Redis/"/>
    
    
      <category term="Redis批量写入" scheme="http://macintosh-c.coding.me/tags/Redis%E6%89%B9%E9%87%8F%E5%86%99%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Redis安装</title>
    <link href="http://macintosh-c.coding.me/2020/03/12/Databases/Redis/Mac%E4%B8%8Bredis%E5%AE%89%E8%A3%85%E4%B8%8E%E5%90%AF%E5%8A%A8/"/>
    <id>http://macintosh-c.coding.me/2020/03/12/Databases/Redis/Mac下redis安装与启动/</id>
    <published>2020-03-12T04:20:29.000Z</published>
    <updated>2020-03-13T09:16:33.460Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mac下redis安装与启动"><a href="#Mac下redis安装与启动" class="headerlink" title="Mac下redis安装与启动"></a>Mac下redis安装与启动</h2><p>一  用brew安装<br>1.查看系统是否已经安装了Redis<br><code>brew info redis</code><br>这个命令会展示此系统下的redis信息，如果没有安装，会展示not install<br>2.输入命令安装Redis<br><code>brew install redis</code><br>可能需要等一会，系统下载完redis的包，会自动进行安装<br>3.启动redis<br><code>brew services start redis</code><br>这个命令会在后台启动redis服务，并且每一次登录系统，都会自动重启<br>4.假如你不需要后台启动服务，你可以使用配置文件启动：<br><code>redis-server /usr/local/etc/redis.conf</code><br>这个命令会读取redis的配置文件，并且在redis运行的过程中也会看到实时的日志打印。启动成功。</p><p>二 手动安装<br>下载稳定版安装包：redis官网下载，选择Stable版本进行安装<br>下载完成后进入到安装包的目录，依次输入如下的命令：<br>2.1解压<br>tar zxvf redis-4.0.9.tar.gz<br>2.2移动<br>mv redis-4.0.9 /usr/local/<br>2.3切换到目录<br>cd /usr/local/redis-4.0.9/<br>2.4编译测试<br>sudo make test<br>2.5编译安装<br>sudo make install<br>2.6redis的启动和停止<br>redis-server 和 redis-cli 位于 redis-4.0.9/src 目录下 :<br>启动redis：redis-server，就能直接启动成功；如果想要加上配置文件启动可以：redis-server /etc/redis.conf</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mac下redis安装与启动&quot;&gt;&lt;a href=&quot;#Mac下redis安装与启动&quot; class=&quot;headerlink&quot; title=&quot;Mac下redis安装与启动&quot;&gt;&lt;/a&gt;Mac下redis安装与启动&lt;/h2&gt;&lt;p&gt;一  用brew安装&lt;br&gt;1.查看系统是否
      
    
    </summary>
    
      <category term="Redis" scheme="http://macintosh-c.coding.me/categories/Redis/"/>
    
    
      <category term="redis安装" scheme="http://macintosh-c.coding.me/tags/redis%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>解决spring boot中rest接口404,500等错误返回统一的json格式</title>
    <link href="http://macintosh-c.coding.me/2020/03/03/spring/Springboot/%E8%A7%A3%E5%86%B3spring%20boot%E4%B8%ADrest%E6%8E%A5%E5%8F%A3404,500%E7%AD%89%E9%94%99%E8%AF%AF%E8%BF%94%E5%9B%9E%E7%BB%9F%E4%B8%80%E7%9A%84json%E6%A0%BC%E5%BC%8F/"/>
    <id>http://macintosh-c.coding.me/2020/03/03/spring/Springboot/解决spring boot中rest接口404,500等错误返回统一的json格式/</id>
    <published>2020-03-02T17:29:05.000Z</published>
    <updated>2020-03-03T06:09:34.871Z</updated>
    
    <content type="html"><![CDATA[<p>在开发rest接口时，我们往往会定义统一的返回格式，列如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;code&quot;:200,</span><br><span class="line">&quot;message&quot;:&quot;123&quot;,</span><br><span class="line">&quot;success&quot;:true,</span><br><span class="line">&quot;data&quot;:null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是如果调用方请求我们的api时把接口地址写错了，就会得到一个404错误，在传统的web系统中我们可自定义404错误页面，展示更友好。在spring boot中其实也是返回了一个json格式的数据，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;timestamp&quot;: 1492063521109,</span><br><span class="line">  &quot;status&quot;: 404,</span><br><span class="line">  &quot;error&quot;: &quot;Not Found&quot;,</span><br><span class="line">  &quot;message&quot;: &quot;No message available&quot;,</span><br><span class="line">  &quot;path&quot;: &quot;/rest11/auth&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>告诉我们哪个地址是没找到，其实也挺友好的，但是因为我们上面自定义的数据格式跟下面的不一致，当用户拿到这个返回的时候是无法识别的，其中最明显的是status字段。我们自定义的是boolean类型，表示是否成功,这边返回的就是http的状态码,所以我们需要在发生这种系统错误时也能返回我们自定义的那种格式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@ControllerAdvice</span><br><span class="line">@ResponseBody</span><br><span class="line">@Component</span><br><span class="line">public class GlobalExceptionHandler &#123;</span><br><span class="line"></span><br><span class="line">    private final static Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);</span><br><span class="line"></span><br><span class="line">    @ExceptionHandler(NoHandlerFoundException.class)</span><br><span class="line">    public Result handleNoHandlerFoundException(NoHandlerFoundException e) &#123;</span><br><span class="line">        return new Result(400,&quot;api not found&quot;,false,null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Result是我们返回格式的实体类,这种在发生错误时这边会捕获到，然后封装好返回格式，返回给调用方。<br>最后关键的一步是在spring boot的配置文件中加上如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#出现错误时, 直接抛出异常</span><br><span class="line">spring.mvc.throw-exception-if-no-handler-found=true</span><br><span class="line">#不要为我们工程中的资源文件建立映射</span><br><span class="line">spring.resources.add-mappings=false</span><br></pre></td></tr></table></figure></p><p>然后我们调用一个不存在的接口时，返回的错误信息就是我们自定义的那种格式了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;code&quot;:400,</span><br><span class="line">&quot;message&quot;:&quot;api not found&quot;,</span><br><span class="line">&quot;success&quot;:false,</span><br><span class="line">&quot;data&quot;:null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>引发的问题<br>添加上面2个配置后，会过滤静态资源，导致某些资源找不到，比如swagger,解决方案如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfiguration implements WebMvcConfigurer &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将swagger-ui.html 添加 到 resources目录下</span><br><span class="line">     *</span><br><span class="line">     * @param registry</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">        registry.addResourceHandler(&quot;swagger-ui.html&quot;).addResourceLocations(&quot;classpath:/META-INF/resources/&quot;);</span><br><span class="line">        registry.addResourceHandler(&quot;/webjars/**&quot;).addResourceLocations(&quot;classpath:/META-INF/resources/webjars/&quot;);</span><br><span class="line">        registry.addResourceHandler(&quot;/web_frontend/**&quot;).addResourceLocations(&quot;classpath:/web_frontend/&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>备份一份SpringMVC-config配置代码，里面也包含统一异常处理代码，贴上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfigurer extends WebMvcConfigurerAdapter &#123;</span><br><span class="line"> </span><br><span class="line">    private final Logger logger = LoggerFactory.getLogger(WebMvcConfigurer.class);</span><br><span class="line">    @Value(&quot;$&#123;spring.profiles.active&#125;&quot;)</span><br><span class="line">    private String env;//当前激活的配置文件</span><br><span class="line"> </span><br><span class="line">    //使用阿里 FastJson 作为JSON MessageConverter</span><br><span class="line">    @Override</span><br><span class="line">    public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;</span><br><span class="line">        FastJsonHttpMessageConverter converter = new FastJsonHttpMessageConverter();</span><br><span class="line">        FastJsonConfig config = new FastJsonConfig();</span><br><span class="line">        config.setSerializerFeatures(SerializerFeature.WriteMapNullValue,//保留空的字段</span><br><span class="line">                SerializerFeature.WriteNullStringAsEmpty,//String null -&gt; &quot;&quot;</span><br><span class="line">                SerializerFeature.WriteNullNumberAsZero);//Number null -&gt; 0</span><br><span class="line">        converter.setFastJsonConfig(config);</span><br><span class="line">        converter.setDefaultCharset(Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">        converters.add(converter);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    //统一异常处理</span><br><span class="line">    @Override</span><br><span class="line">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; exceptionResolvers) &#123;</span><br><span class="line">        exceptionResolvers.add(new HandlerExceptionResolver() &#123;</span><br><span class="line">            public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception e) &#123;</span><br><span class="line">                ResponseMsg result;</span><br><span class="line">                if (e instanceof ServiceException) &#123;//业务失败的异常，如“账号或密码错误”</span><br><span class="line">                    result = new ResponseMsg(&quot;501&quot;, &quot;业务层出错：&quot; + e.getMessage());</span><br><span class="line">                    logger.info(e.getMessage());</span><br><span class="line">                &#125; else if (e instanceof NoHandlerFoundException) &#123;</span><br><span class="line">                    result = new ResponseMsg(&quot;404&quot;, &quot;接口 [&quot; + request.getRequestURI() + &quot;] 不存在&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    result = new ResponseMsg(&quot;500&quot;, &quot;接口 [&quot; + request.getRequestURI() + &quot;] 错误，请联系管理员！&quot;);</span><br><span class="line">                    String message;</span><br><span class="line">                    if (handler instanceof HandlerMethod) &#123;</span><br><span class="line">                        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">                        message = String.format(&quot;接口 [%s] 出现异常，方法：%s.%s，异常摘要：%s&quot;,</span><br><span class="line">                                request.getRequestURI(),</span><br><span class="line">                                handlerMethod.getBean().getClass().getName(),</span><br><span class="line">                                handlerMethod.getMethod().getName(),</span><br><span class="line">                                e.getMessage());</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        message = e.getMessage();</span><br><span class="line">                    &#125;</span><br><span class="line">                    logger.error(message, e);</span><br><span class="line">                &#125;</span><br><span class="line">                responseResult(response, result);</span><br><span class="line">                return new ModelAndView();</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    //解决跨域问题</span><br><span class="line">    @Override</span><br><span class="line">    public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class="line">        registry.addMapping(&quot;/**&quot;) // **代表所有路径</span><br><span class="line">                .allowedOrigins(&quot;*&quot;) // allowOrigin指可以通过的ip，*代表所有，可以使用指定的ip，多个的话可以用逗号分隔，默认为*</span><br><span class="line">                .allowedMethods(&quot;GET&quot;, &quot;POST&quot;, &quot;HEAD&quot;, &quot;PUT&quot;, &quot;DELETE&quot;) // 指请求方式 默认为*</span><br><span class="line">                .allowCredentials(false) // 支持证书，默认为true</span><br><span class="line">                .maxAge(3600) // 最大过期时间，默认为-1</span><br><span class="line">                .allowedHeaders(&quot;*&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    //添加拦截器</span><br><span class="line">    @Override</span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">        //接口登录验证拦截器</span><br><span class="line">        if (!&quot;dev&quot;.equals(env)) &#123; //开发环境忽略登录验证</span><br><span class="line">            registry.addInterceptor(new HandlerInterceptorAdapter() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">                    //验证登录</span><br><span class="line">                    Object obj = request.getSession().getAttribute(Const.LOGIN_SESSION_KEY);</span><br><span class="line">                    if (obj != null) &#123;</span><br><span class="line">                        return true;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        logger.warn(&quot;请先登录！==&gt; 请求接口：&#123;&#125;，请求IP：&#123;&#125;，请求参数：&#123;&#125;&quot;,</span><br><span class="line">                                request.getRequestURI(), getIpAddress(request), JSON.toJSONString(request.getParameterMap()));</span><br><span class="line"> </span><br><span class="line">                        responseResult(response, new ResponseMsg(Result.SIGNERROR));</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    private void responseResult(HttpServletResponse response, ResponseMsg result) &#123;</span><br><span class="line">        response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        response.setHeader(&quot;Content-type&quot;, &quot;application/json;charset=UTF-8&quot;);</span><br><span class="line">        response.setStatus(200);</span><br><span class="line">        try &#123;</span><br><span class="line">            response.getWriter().write(JSON.toJSONString(result));</span><br><span class="line">        &#125; catch (IOException ex) &#123;</span><br><span class="line">            logger.error(ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    private String getIpAddress(HttpServletRequest request) &#123;</span><br><span class="line">        String ip = request.getHeader(&quot;x-forwarded-for&quot;);</span><br><span class="line">        if (ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(&quot;Proxy-Client-IP&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(&quot;WL-Proxy-Client-IP&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(&quot;HTTP_CLIENT_IP&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(&quot;HTTP_X_FORWARDED_FOR&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getRemoteAddr();</span><br><span class="line">        &#125;</span><br><span class="line">        // 如果是多级代理，那么取第一个ip为客户端ip</span><br><span class="line">        if (ip != null &amp;&amp; ip.indexOf(&quot;,&quot;) != -1) &#123;</span><br><span class="line">            ip = ip.substring(0, ip.indexOf(&quot;,&quot;)).trim();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        return ip;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * druidServlet注册</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public ServletRegistrationBean druidServletRegistration() &#123;</span><br><span class="line">        ServletRegistrationBean registration = new ServletRegistrationBean(new StatViewServlet());</span><br><span class="line">        registration.addUrlMappings(&quot;/druid/*&quot;);</span><br><span class="line">        return registration;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * druid监控 配置URI拦截策略</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean druidStatFilter() &#123;</span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean(new WebStatFilter());</span><br><span class="line">        // 添加过滤规则.</span><br><span class="line">        filterRegistrationBean.addUrlPatterns(&quot;/*&quot;);</span><br><span class="line">        // 添加不需要忽略的格式信息.</span><br><span class="line">        filterRegistrationBean.addInitParameter(&quot;exclusions&quot;, &quot;/web_frontend/*,*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid,/druid/*,/error,/login*&quot;);</span><br><span class="line">        // 用于session监控页面的用户名显示 需要登录后主动将username注入到session里</span><br><span class="line">        filterRegistrationBean.addInitParameter(&quot;principalSessionName&quot;, &quot;username&quot;);</span><br><span class="line">        return filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * druid数据库连接池监控</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public DruidStatInterceptor druidStatInterceptor() &#123;</span><br><span class="line">        return new DruidStatInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * druid数据库连接池监控</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public BeanTypeAutoProxyCreator beanTypeAutoProxyCreator() &#123;</span><br><span class="line">        BeanTypeAutoProxyCreator beanTypeAutoProxyCreator = new BeanTypeAutoProxyCreator();</span><br><span class="line">        beanTypeAutoProxyCreator.setTargetBeanType(DruidDataSource.class);</span><br><span class="line">        beanTypeAutoProxyCreator.setInterceptorNames(&quot;druidStatInterceptor&quot;);</span><br><span class="line">        return beanTypeAutoProxyCreator;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * RequestContextListener注册</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public ServletListenerRegistrationBean&lt;RequestContextListener&gt; requestContextListenerRegistration() &#123;</span><br><span class="line">        return new ServletListenerRegistrationBean&lt;&gt;(new RequestContextListener());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 将swagger-ui.html 添加 到 resources目录下</span><br><span class="line">     *</span><br><span class="line">     * @param registry</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">        registry.addResourceHandler(&quot;swagger-ui.html&quot;).addResourceLocations(&quot;classpath:/META-INF/resources/&quot;);</span><br><span class="line">        registry.addResourceHandler(&quot;/webjars/**&quot;).addResourceLocations(&quot;classpath:/META-INF/resources/webjars/&quot;);</span><br><span class="line">        registry.addResourceHandler(&quot;/web_frontend/**&quot;).addResourceLocations(&quot;classpath:/web_frontend/&quot;);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开发rest接口时，我们往往会定义统一的返回格式，列如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="Springboot" scheme="http://macintosh-c.coding.me/categories/Springboot/"/>
    
    
      <category term="Springboot response" scheme="http://macintosh-c.coding.me/tags/Springboot-response/"/>
    
  </entry>
  
  <entry>
    <title>使用Ehcache缓存同步启动时抛出异常Can&#39;t assign requested address</title>
    <link href="http://macintosh-c.coding.me/2019/12/13/Databases/ehcache/%E4%BD%BF%E7%94%A8Ehcache%E7%BC%93%E5%AD%98%E5%90%8C%E6%AD%A5%E5%90%AF%E5%8A%A8%E6%97%B6%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8Can&#39;t%20assign%20requested%20address/"/>
    <id>http://macintosh-c.coding.me/2019/12/13/Databases/ehcache/使用Ehcache缓存同步启动时抛出异常Can&#39;t assign requested address/</id>
    <published>2019-12-13T05:40:29.000Z</published>
    <updated>2019-12-13T09:26:41.691Z</updated>
    
    <content type="html"><![CDATA[<p>问题：在使用Ehcache缓存，采用RMI(UDP传输协议)进行数据广播同步，启动项目时报异常： net.sf.ehcache.CacheException: Can’t assign requested address</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;cacheManagerFactory&apos; defined in class path resource [app-ehcache.xml]: Invocation of init method failed; nested exception is net.sf.ehcache.CacheException: Can&apos;t assign requested address</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1553)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)</span><br><span class="line">    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)</span><br><span class="line">    at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:328)</span><br><span class="line">    ... 128 more</span><br><span class="line">Caused by: net.sf.ehcache.CacheException: Can&apos;t assign requested address</span><br></pre></td></tr></table></figure><p>问题分析：<br>定位：“无法分配请求地址”的异常常出现在网络分配问题上。这个问题之前在Windows电脑上使用ehcache未出现此问题。当前使用的电脑是Macbook Pro无线网络环境，网络环境使用的公司内网。防火墙处于关闭状态。网络是可以正常指配的。<br>经过调试发现，在创建心跳接受器时，调用java虚拟机，系统默认使用的网络接口是ipv6，配置的ipv4的广播端口230.0.0.1，无法join进去，所以报了无法分配请求地址的异常。</p><p>解决办法：<br>在启动服务时，指定使用默认ipv4的网络接口。可以在启动jvm时添加参数-Djava.net.preferIPv4Stack=true。<br>打包时同理加上：mvn package -Djava.net.preferIPv4Stack=true -Dmaven.test.skip=true -Pdev</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题：在使用Ehcache缓存，采用RMI(UDP传输协议)进行数据广播同步，启动项目时报异常： net.sf.ehcache.CacheException: Can’t assign requested address&lt;/p&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
      <category term="Ehcache" scheme="http://macintosh-c.coding.me/categories/Ehcache/"/>
    
    
      <category term="Ehcache" scheme="http://macintosh-c.coding.me/tags/Ehcache/"/>
    
  </entry>
  
  <entry>
    <title>认识Ehcache</title>
    <link href="http://macintosh-c.coding.me/2019/12/13/Databases/ehcache/%E8%AE%A4%E8%AF%86ehcache/"/>
    <id>http://macintosh-c.coding.me/2019/12/13/Databases/ehcache/认识ehcache/</id>
    <published>2019-12-13T04:40:29.000Z</published>
    <updated>2019-12-13T09:19:22.119Z</updated>
    
    <content type="html"><![CDATA[<p>最近接手一个老项目，里面有用到EhCache，而且启动时总是报错，于是百度认识了一下Ehcache，记录如下，加强理解，报错详细及解决办法见下篇</p><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>EhCache 是一个纯Java的进程内缓存框架，具有快速、精干等特点，是Hibernate中默认CacheProvider。Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存,Java EE和轻量级容器。它具有内存和磁盘存储，缓存加载器,缓存扩展,缓存异常处理程序,一个gzip缓存servlet过滤器,支持REST和SOAP api等特点。</p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul><li>快速、简单</li><li>多种缓存策略</li><li>缓存数据有两级：内存和磁盘，因此无需担心容量问题</li><li>缓存数据会在虚拟机重启的过程中写入磁盘</li><li>可以通过RMI、可插入API等方式进行分布式缓存</li><li>具有缓存和缓存管理器的侦听接口</li><li>支持多缓存管理器实例，以及一个实例的多个缓存区域</li><li>提供Hibernate的缓存实现</li></ul><h4 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h4><p>可以单独使用，一般在第三方库中被用到的比较多（如mybatis、shiro等）ehcache 对分布式支持不够好，多个节点不能同步，通常和redis一块使用</p><h4 id="灵活性"><a href="#灵活性" class="headerlink" title="灵活性"></a>灵活性</h4><p>ehcache具备对象api接口和可序列化api接口<br>不能序列化的对象可以使用出磁盘存储外ehcache的所有功能<br>支持基于Cache和基于Element的过期策略，每个Cache的存活时间都是可以设置和控制的。<br>提供了LRU、LFU和FIFO缓存淘汰算法，Ehcache 1.2引入了最少使用和先进先出缓存淘汰算法，构成了完整的缓存淘汰算法。<br>提供内存和磁盘存储，Ehcache和大多数缓存解决方案一样，提供高性能的内存和磁盘存储。<br>动态、运行时缓存配置，存活时间、空闲时间、内存和磁盘存放缓存的最大数目都是可以在运行时修改的。</p><h4 id="应用持久化"><a href="#应用持久化" class="headerlink" title="应用持久化"></a>应用持久化</h4><p>在vm重启后，持久化到磁盘的存储可以复原数据<br>Ehache是第一个引入缓存数据持久化存储的开源java缓存框架，缓存的数据可以在机器重启后从磁盘上重新获得<br>根据需要将缓存刷到磁盘。将缓存条目刷到磁盘的操作可以通过cache.fiush方法执行,这大大方便了ehcache的使用</p><h4 id="ehcache-和-redis-比较"><a href="#ehcache-和-redis-比较" class="headerlink" title="ehcache 和 redis 比较"></a>ehcache 和 redis 比较</h4><p>ehcache直接在jvm虚拟机中缓存，速度快，效率高；但是缓存共享麻烦，集群分布式应用不方便。<br>redis是通过socket访问到缓存服务，效率比ecache低，比数据库要快很多，<br>处理集群和分布式缓存方便，有成熟的方案。如果是单个应用或者对缓存访问要求很高的应用，用ehcache。如果是大型系统，存在缓存共享、分布式部署、缓存内容很大的，建议用redis。<br>Redis：属于独立的运行程序，需要单独安装后，使用JAVA中的Jedis来操纵。因为它是独立，所以如果你写个单元测试程序，放一些数据在Redis中，然后又写一个程序去拿数据，那么是可以拿到这个数据的。，<br>ehcache：与Redis明显不同，它与java程序是绑在一起的，java程序活着，它就活着。譬如，写一个独立程序放数据，再写一个独立程序拿数据，那么是拿不到数据的。只能在独立程序中才能拿到数据。</p><h4 id="贴一段基本使用代码"><a href="#贴一段基本使用代码" class="headerlink" title="贴一段基本使用代码"></a>贴一段基本使用代码</h4><p>CacheManager manager = CacheManager.newInstance(“src/config/ehcache.xml”);<br>Ehcache cache = new Cache(“testCache”, 5000, false, false, 5, 2);<br>cacheManager.addCache(cache);</p><h4 id="配置文件细解"><a href="#配置文件细解" class="headerlink" title="配置文件细解"></a>配置文件细解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;ehcache xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:noNamespaceSchemaLocation=&quot;http://ehcache.org/ehcache.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 磁盘缓存位置 --&gt;</span><br><span class="line">  &lt;diskStore path=&quot;java.io.tmpdir/ehcache&quot;/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 默认缓存 --&gt;</span><br><span class="line">  &lt;defaultCache</span><br><span class="line">          maxEntriesLocalHeap=&quot;10000&quot;</span><br><span class="line">          eternal=&quot;false&quot;</span><br><span class="line">          timeToIdleSeconds=&quot;120&quot;</span><br><span class="line">          timeToLiveSeconds=&quot;120&quot;</span><br><span class="line">          maxEntriesLocalDisk=&quot;10000000&quot;</span><br><span class="line">          diskExpiryThreadIntervalSeconds=&quot;120&quot;</span><br><span class="line">          memoryStoreEvictionPolicy=&quot;LRU&quot;&gt;</span><br><span class="line">    &lt;persistence strategy=&quot;localTempSwap&quot;/&gt;</span><br><span class="line">  &lt;/defaultCache&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- helloworld缓存 --&gt;</span><br><span class="line">  &lt;cache name=&quot;HelloWorldCache&quot;</span><br><span class="line">         maxElementsInMemory=&quot;1000&quot;</span><br><span class="line">         eternal=&quot;false&quot;</span><br><span class="line">         timeToIdleSeconds=&quot;5&quot;</span><br><span class="line">         timeToLiveSeconds=&quot;5&quot;</span><br><span class="line">         overflowToDisk=&quot;false&quot;</span><br><span class="line">         memoryStoreEvictionPolicy=&quot;LRU&quot;/&gt;</span><br><span class="line">&lt;/ehcache&gt;</span><br></pre></td></tr></table></figure><p>配置文件说明：<br>diskStore </p><ul><li>path ：指定磁盘存储的位置</li></ul><p>defaultCache:默认的缓存</p><p>cache</p><ul><li>name:缓存名称。</li><li>maxElementsInMemory：缓存最大个数。</li><li>eternal:对象是否永久有效，一但设置了，timeout将不起作用。</li><li>timeToIdleSeconds：设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</li><li>timeToLiveSeconds：设置对象在失效前允许存活时间,最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时 间无穷大。</li><li>overflowToDisk：当内存中对象数量达到maxElementsInMemory时，Ehcache将会对象写到磁盘中。</li><li>diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</li><li>maxElementsOnDisk：硬盘最大缓存个数。</li><li>diskPersistent： 是否缓存虚拟机重启期数 据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</li><li>diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</li><li>memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU。你可以设置为 FIFO或是LFU。</li><li>clearOnFlush：内存数量最大时是否清除。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近接手一个老项目，里面有用到EhCache，而且启动时总是报错，于是百度认识了一下Ehcache，记录如下，加强理解，报错详细及解决办法见下篇&lt;/p&gt;
&lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Ehcache" scheme="http://macintosh-c.coding.me/categories/Ehcache/"/>
    
    
      <category term="Ehcache" scheme="http://macintosh-c.coding.me/tags/Ehcache/"/>
    
  </entry>
  
  <entry>
    <title>Redis指令整理</title>
    <link href="http://macintosh-c.coding.me/2019/12/13/Databases/Redis/redis%E6%8C%87%E4%BB%A4/"/>
    <id>http://macintosh-c.coding.me/2019/12/13/Databases/Redis/redis指令/</id>
    <published>2019-12-13T04:20:29.000Z</published>
    <updated>2020-03-19T06:53:44.094Z</updated>
    
    <content type="html"><![CDATA[<p>平时用到的redis指令整理：</p><ol><li>查询所以key：keys *</li><li>查看redis状态：info</li><li>获取随机一个key：randomkey</li><li>清空库：flushall</li><li>删除某个key: del key</li><li>查询list的长度：llen key</li><li>往list里存入一条数据：LPUSH key value</li><li>查询key的有效时间：ttl key</li><li>查询某个hash：HGETALL key</li><li>将key中储存的数字值增一：INCR key（如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作）</li><li>redis使用 Lua 解释器执行脚本：EVAL script numkeys key [key …] arg [arg …]<br>参数说明：</li></ol><ul><li>script： 参数是一段 Lua 5.1 脚本程序。脚本不必(也不应该)定义为一个 Lua 函数。</li><li>numkeys： 用于指定键名参数的个数。</li><li>key [key …]： 从 EVAL 的第三个参数开始算起，表示在脚本中所用到的那些 Redis 键(key)，这些键名参数可以在 Lua 中通过全局变量 KEYS 数组，用 1 为基址的形式访问( KEYS[1] ， KEYS[2] ，以此类推)。</li><li>arg [arg …]： 附加参数，在 Lua 中通过全局变量 ARGV 数组访问，访问的形式和 KEYS 变量类似( ARGV[1] 、 ARGV[2] ，诸如此类)。<br>实例：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; eval &quot;return &#123;KEYS[1],KEYS[2],ARGV[1],ARGV[2]&#125;&quot; 2 key1 key2 first second</span><br><span class="line">1) &quot;key1&quot;</span><br><span class="line">2) &quot;key2&quot;</span><br><span class="line">3) &quot;first&quot;</span><br><span class="line">4) &quot;second&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平时用到的redis指令整理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查询所以key：keys *&lt;/li&gt;
&lt;li&gt;查看redis状态：info&lt;/li&gt;
&lt;li&gt;获取随机一个key：randomkey&lt;/li&gt;
&lt;li&gt;清空库：flushall&lt;/li&gt;
&lt;li&gt;删除某个key: 
      
    
    </summary>
    
      <category term="Redis" scheme="http://macintosh-c.coding.me/categories/Redis/"/>
    
    
      <category term="redis指令" scheme="http://macintosh-c.coding.me/tags/redis%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>log4j日志不输出的问题</title>
    <link href="http://macintosh-c.coding.me/2019/12/13/spring/SpringMVC/log4j%E6%97%A5%E5%BF%97%E4%B8%8D%E8%BE%93%E5%87%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://macintosh-c.coding.me/2019/12/13/spring/SpringMVC/log4j日志不输出的问题/</id>
    <published>2019-12-12T17:29:05.000Z</published>
    <updated>2019-12-13T10:00:30.804Z</updated>
    
    <content type="html"><![CDATA[<p>记一次日记不输出的排查过程</p><p>刚接手一个springMVC的老项目，系统起来后，控制台不输出日记，日记文件中也没日记</p><p>1.首先确认了下，系统启动后是会生成指定的日记文件的，且控制台能输出system.out.print的日记，不能输出Logger输出的日记。</p><p>2.百度了解了下，可能是log4j的依赖冲突，导致并没有这个包加载进来，于是使用<a href="https://macintosh-c.coding.me/2019/12/06/Maven/输出工程依赖关系/">mvn dependency:tree -Dverbose&gt;temp/tree.txt(点击见详解)</a>指令查看依赖关系，发现有很多的org.slf4j:slf4j-api conflict</p><p>3.使用exclusions在所有冲突的包下去除掉slf4j依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;exclusions&gt;</span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line">&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">&lt;/exclusion&gt;</span><br><span class="line">&lt;/exclusions&gt;</span><br></pre></td></tr></table></figure></p><p>4.重启项目后发现，日记文件里有日记进去了，但是控制台还是一直没有输出，继续排查<br>log4j.properties配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger = stdout,D</span><br><span class="line"></span><br><span class="line">log4j.appender.stdout = org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Threshold = INFO</span><br><span class="line">log4j.appender.stdout.Target = System.out</span><br><span class="line">log4j.appender.stdout.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern = [%d] [%t] %-5p [%c] [x-transaction-id: %X&#123;x-transaction-id&#125;] - %m%n</span><br><span class="line"></span><br><span class="line">log4j.appender.D = org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.D.File = ./log/log.log</span><br><span class="line">log4j.appender.D.Append = true</span><br><span class="line">log4j.appender.D.Threshold = INFO</span><br><span class="line">log4j.appender.D.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.D.layout.ConversionPattern = [%-d&#123;yyyy-MM-dd HH:mm:ss&#125;] [%c]-[%p] [x-transaction-id: %X&#123;x-transaction-id&#125;] - %m%n </span><br><span class="line">log4j.appender.D.ImmediateFlush = true</span><br><span class="line">log4j.appender.D.DatePattern = &apos;.&apos;yyyy-MM-dd</span><br></pre></td></tr></table></figure><p>log4j.rootLogger认识<br>log4j.rootLogger = [ level ] , appenderName1, appenderName2, …<br>     level : 是日志记录的优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。Log4j建议只使用四个级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG。通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来。<br>     appenderName:就是指定日志信息输出到哪个地方。您可以同时指定多个输出目的地。<br>     例如：log4j.rootLogger＝info,A1,B2,C3 配置了3个输出地方，这个名字可以任意（如上面的db）,但必须与我们在后面进行的设置名字对应；</p><p>控制台不输出的原因是我把level给去掉了，stdout为控制台输出放到了最前面导致的，修改log4j.rootLogger配置如下：<br><code>log4j.rootLogger = INFO,stdout,D</code></p><p>至此，问题解决！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记一次日记不输出的排查过程&lt;/p&gt;
&lt;p&gt;刚接手一个springMVC的老项目，系统起来后，控制台不输出日记，日记文件中也没日记&lt;/p&gt;
&lt;p&gt;1.首先确认了下，系统启动后是会生成指定的日记文件的，且控制台能输出system.out.print的日记，不能输出Logger输
      
    
    </summary>
    
      <category term="SpringMVC" scheme="http://macintosh-c.coding.me/categories/SpringMVC/"/>
    
    
      <category term="log4j日志" scheme="http://macintosh-c.coding.me/tags/log4j%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>IDEA中自动生成serialVersionUID的方法</title>
    <link href="http://macintosh-c.coding.me/2019/12/06/java/basic/idea%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%20serialVersionUID%20%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://macintosh-c.coding.me/2019/12/06/java/basic/idea自动生成 serialVersionUID 的方法/</id>
    <published>2019-12-06T09:39:56.000Z</published>
    <updated>2019-12-06T09:58:01.591Z</updated>
    
    <content type="html"><![CDATA[<p>当我们用 IntelliJ IDEA 编写类并实现 Serializable（序列化）接口的时候，可能会遇到这样一个问题，那就是：</p><ul><li>无法自动生成serialVersionUID.</li></ul><p>而serialVersionUID又是一个非常重要的字段，因为 Java 的序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的。在进行反序列化时，JVM 会把传来的字节流中的serialVersionUID与本地相应实体（类）的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常。</p><p>一般来说，定义serialVersionUID的方式有两种，分别为：</p><ol><li>采用默认的1L，具体为private static final long serialVersionUID = 1L;</li><li>根据类名、接口名、成员方法及属性等来生成一个64位的哈希字段，例如 private static final long serialVersionUID = XXXL;</li></ol><p>而 Java 类进行序列化也两个主要目的，分别为：</p><ol><li>把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中；</li><li>在网络上传送对象的字节序列。</li></ol><p>在这里，我们就一起来看看如何利用 IntelliJ IDEA 自动生成serialVersionUID:</p><p>第 1 步：安装GenerateSerialVersionUID插件<br>第 2 步：设置Inspections功能<br><img src="/img/java/idea-uid-4.png" alt="idea"><br>如上图所示，进入Default Settings，在Inspections设置页面中，勾选Serializable class without ‘serialVersionUID’，并且还可以在Severity中设置提示级别，如Warning、Error等，默认为Warning，也建议选择Warning级别的提示。<br>第 3 步：生成serialVersionUID<br><img src="/img/java/idea-uid-5.jpg" alt="idea"><br>如上图所示，创建一个类并实现Serializable接口，然后按alt+Enter键，即可收到提示，然后选择SerialVersionUID：<br><img src="/img/java/idea-uid-6.png" alt="idea"><br>如上图所示，显然我们已经利用 IntelliJ IDEA 中自动生成serialVersionUID啦！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当我们用 IntelliJ IDEA 编写类并实现 Serializable（序列化）接口的时候，可能会遇到这样一个问题，那就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无法自动生成serialVersionUID.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而serialVersionUID又是一
      
    
    </summary>
    
      <category term="java基础" scheme="http://macintosh-c.coding.me/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="serialVersionUID" scheme="http://macintosh-c.coding.me/tags/serialVersionUID/"/>
    
  </entry>
  
  <entry>
    <title>Nginx常用命令（启动/重启/停止/测试配置文件/重新加载配置文件）</title>
    <link href="http://macintosh-c.coding.me/2019/12/06/Nginx/nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://macintosh-c.coding.me/2019/12/06/Nginx/nginx常用命令/</id>
    <published>2019-12-06T07:19:52.000Z</published>
    <updated>2019-12-06T09:12:34.805Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx 安装后只有一个程序文件，本身并不提供各种管理程序，它是使用参数和系统信号机制对 Nginx 进程本身进行控制的。Nginx 的参数包括有如下几个：</p><ul><li>-c：使用指定的配置文件而不是conf目录下的nginx.conf 。</li><li>-t：测试配置文件是否正确，在运行时需要重新加载配置的时候，此命令非常重要，用来检测所修改的配置文件是否有语法错误。</li><li>-s：reload 重载</li><li>-s：stop 停止</li></ul><h4 id="启动-重启-停止"><a href="#启动-重启-停止" class="headerlink" title="启动/重启/停止"></a>启动/重启/停止</h4><p><code>sudo /etc/init.d/nginx {start|restart|stop}</code></p><p>上面的命令其实是基于服务的形式，还可以这样写：</p><p><code>sudo service nginx {start|stop|restart|reload|force-reload|status|configtest|rotate|upgrade}</code></p><p>当然还有基于信号的方式，这个访问效果更好：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#假设Nginx安装在/usr/local/nginx</span><br><span class="line">sudo /usr/local/nginx/nginx -s &#123;参数&#125;</span><br><span class="line">stop - 快速关机</span><br><span class="line">quit - 优雅的关机</span><br><span class="line">reload - 重新加载配置文件</span><br><span class="line">reopen - 重新打开日志文件</span><br></pre></td></tr></table></figure><p>检查配置，同时也是输出配置文件所在位置<br><code>/usr/local/nginx/nginx -t</code></p><p>修改配置后重载<br><code>/usr/local/nginx/nginx -s reload</code>  </p><h4 id="nginx启动和重新加载配置命令"><a href="#nginx启动和重新加载配置命令" class="headerlink" title="nginx启动和重新加载配置命令"></a>nginx启动和重新加载配置命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/openresty/nginx/sbin/nginx  -c /etc/nginx/nginx.conf</span><br><span class="line">/usr/local/openresty/nginx/sbin/nginx -s reload -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Nginx 安装后只有一个程序文件，本身并不提供各种管理程序，它是使用参数和系统信号机制对 Nginx 进程本身进行控制的。Nginx 的参数包括有如下几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-c：使用指定的配置文件而不是conf目录下的nginx.conf 。&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="nginx" scheme="http://macintosh-c.coding.me/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://macintosh-c.coding.me/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux下安装和升级Git</title>
    <link href="http://macintosh-c.coding.me/2019/12/06/Git/Linux%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%87%E7%BA%A7Git/"/>
    <id>http://macintosh-c.coding.me/2019/12/06/Git/Linux上安装和升级Git/</id>
    <published>2019-12-06T05:56:56.000Z</published>
    <updated>2019-12-06T07:23:16.950Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux-下安装和升级Git-系统版本为CentOS7"><a href="#Linux-下安装和升级Git-系统版本为CentOS7" class="headerlink" title="Linux 下安装和升级Git 系统版本为CentOS7"></a>Linux 下安装和升级Git 系统版本为CentOS7</h3><p>yum 安装<br><code>yum install git</code><br>查看git版本<br><code>git --version</code><br>但是通过 yum 安装的 git 版本为 1.8.3 版本太老，本人近期就遇到了git版本太老，导致clone代码仓库报错的问题，以下为升级操作，升级之前先要卸载之前的老版本Git<br><code>yum remove git</code></p><h4 id="1、查看-git-的版本发版界面"><a href="#1、查看-git-的版本发版界面" class="headerlink" title="1、查看 git 的版本发版界面"></a>1、查看 git 的版本发版界面</h4><p><a href="https://github.com/git/git/releases；发现最新版本为2.2.0" target="_blank" rel="noopener">https://github.com/git/git/releases；发现最新版本为2.2.0</a></p><h4 id="2、下载安装包"><a href="#2、下载安装包" class="headerlink" title="2、下载安装包"></a>2、下载安装包</h4><p>进入/usr/src目录，通过wget执行下载包的操作，我习惯在/usr/src下使用wget下载，只是个人习惯<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/src</span><br><span class="line">wget https://github.com/git/git/archive/v2.22.0.tar.gz</span><br></pre></td></tr></table></figure></p><h4 id="3、解压压缩包"><a href="#3、解压压缩包" class="headerlink" title="3、解压压缩包"></a>3、解压压缩包</h4><p><code>tar -zxvf v2.22.0.tar.gz</code></p><h4 id="4、安装依赖"><a href="#4、安装依赖" class="headerlink" title="4、安装依赖"></a>4、安装依赖</h4><p>安装编译码所需依赖，出现提示输入 Y 剩下只需等待即可<br><code>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker</code>  </p><h4 id="5、执行安装"><a href="#5、执行安装" class="headerlink" title="5、执行安装"></a>5、执行安装</h4><p>进入解压的文件夹，执行安装命令  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cd git-2.22.0</span><br><span class="line"></span><br><span class="line"># 执行编译，命令为</span><br><span class="line">make prefix=/usr/local/git all</span><br><span class="line"># 执行安装，命令为，安装到/usr/local/git</span><br><span class="line">make prefix=/usr/local/git install</span><br><span class="line"></span><br><span class="line">### 建议使用下面这组命令，上面的命令有可能会报错</span><br><span class="line"># 执行编译，命令为</span><br><span class="line">make CFLAGS=-liconv prefix=/usr/local/git all</span><br><span class="line"># 执行安装，命令为，安装到/usr/local/git</span><br><span class="line">make CFLAGS=-liconv prefix=/usr/local/git install</span><br></pre></td></tr></table></figure><p>如果执行的是 make prefix=/usr/local/git all，有可能出现以下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/usr/src/git-2.22.0/utf8.c:492：对‘libiconv’未定义的引用</span><br><span class="line">libgit.a(utf8.o)：在函数‘reencode_string_len’中：</span><br><span class="line">/usr/src/git-2.22.0/utf8.c:587：对‘libiconv_open’未定义的引用</span><br><span class="line">/usr/src/git-2.22.0/utf8.c:597：对‘libiconv_close’未定义的引用</span><br><span class="line">/usr/src/git-2.22.0/utf8.c:592：对‘libiconv_open’未定义的引用</span><br><span class="line">collect2: 错误：ld 返回 1</span><br><span class="line">make: *** [git-credential-store] 错误 1</span><br></pre></td></tr></table></figure><h4 id="6、建立软连接"><a href="#6、建立软连接" class="headerlink" title="6、建立软连接"></a>6、建立软连接</h4><p>以上正确安装后，查看 Git 版本 git –version 会报 -bash: git: 未找到命令 错误，原因是我们把git安装到了 /usr/local/git 目录下，git –version默认找的是 /usr/bin/git命令，刚才我们已经卸载了，可通过软连来操作  </p><pre><code># 先删除 /usr/bin/gitrm -rf /usr/bin/git# 创建ln -s /usr/local/git/bin/git /usr/bin/git</code></pre><p>再查看git –version即可<br>同时更新一下nss yum update -y nss curl libcurl<br>至此操作成功！！！</p><p>参考网址：<br><a href="http://www.baiyongj.com/news/493.html" target="_blank" rel="noopener">http://www.baiyongj.com/news/493.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux-下安装和升级Git-系统版本为CentOS7&quot;&gt;&lt;a href=&quot;#Linux-下安装和升级Git-系统版本为CentOS7&quot; class=&quot;headerlink&quot; title=&quot;Linux 下安装和升级Git 系统版本为CentOS7&quot;&gt;&lt;/a&gt;Li
      
    
    </summary>
    
      <category term="Git" scheme="http://macintosh-c.coding.me/categories/Git/"/>
    
    
      <category term="Git基础" scheme="http://macintosh-c.coding.me/tags/Git%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Mysql清空表(truncate)与删除表中数据(delete)的区别</title>
    <link href="http://macintosh-c.coding.me/2019/12/06/Databases/mysql/mysql%E6%B8%85%E7%A9%BA%E8%A1%A8/"/>
    <id>http://macintosh-c.coding.me/2019/12/06/Databases/mysql/mysql清空表/</id>
    <published>2019-12-06T04:49:36.000Z</published>
    <updated>2019-12-13T08:47:15.078Z</updated>
    
    <content type="html"><![CDATA[<p>以下是两种清空表中数据的方法：<br><code>truncate table wp_comments;</code><br><code>delete * from wp_comments;</code></p><p>其中truncate操作中的table可以省略，delete操作中的*可以省略。这两者都是将wp_comments表中数据清空，不过也是有区别的，如下：</p><ol><li>truncate是整体删除（速度较快）， delete是逐条删除（速度较慢）。</li><li>truncate不写服务器log，delete写服务器log，也就是truncate效率比delete高的原因。</li><li>truncate不激活trigger(触发器)，但是会重置Identity（标识列、自增字段），相当于自增列会被置为初始值，又重新从1开始记录，而不是接着原来的ID数。而delete删除以后，Identity依旧是接着被删除的最近的那一条记录ID加1后进行记录。</li><li>如果只需删除表中的部分记录，只能使用DELETE语句配合where条件。 DELETE FROM wp_comments WHERE……</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下是两种清空表中数据的方法：&lt;br&gt;&lt;code&gt;truncate table wp_comments;&lt;/code&gt;&lt;br&gt;&lt;code&gt;delete * from wp_comments;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中truncate操作中的table可以省略，del
      
    
    </summary>
    
      <category term="Mysql" scheme="http://macintosh-c.coding.me/categories/Mysql/"/>
    
    
      <category term="sql语句基础" scheme="http://macintosh-c.coding.me/tags/sql%E8%AF%AD%E5%8F%A5%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>mvn dependency:tree 使用详解</title>
    <link href="http://macintosh-c.coding.me/2019/12/06/Maven/%E8%BE%93%E5%87%BA%E5%B7%A5%E7%A8%8B%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/"/>
    <id>http://macintosh-c.coding.me/2019/12/06/Maven/输出工程依赖关系/</id>
    <published>2019-12-06T02:55:56.000Z</published>
    <updated>2019-12-12T08:41:11.081Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mvn-dependency-tree-使用详解"><a href="#mvn-dependency-tree-使用详解" class="headerlink" title="mvn dependency:tree 使用详解"></a>mvn dependency:tree 使用详解</h3><p>在实际开发过程中，会经常碰到maven依赖冲突的问题，导致编译的时候报一些异常，这里提供一个查询包结构间的依赖关系的方法，来解决问题</p><p>指令：mvn dependency:tree -Dverbose&gt;temp/tree.txt</p><p>该命令是打印详细的maven tree 并放入当前目录下的temp目录下的tree.txt (需要自己新建temp目录)，打印到txt中更加方便排查。</p><p>生成的txt文件中<br>最后写着compile的就是编译成功的<br>最后写着omitted for duplicate的就是有JAR包被重复依赖了，但是JAR包的版本是一样的<br>最后写着omitted for conflict with xx的，说明和别的JAR包版本冲突了，该行的JAR包不会被引入<br>通过在txt文件中检索上传关键字conflict可以找到冲突的jar包所在，从而去除掉。</p><p>去除方法：<exclusions>标签<br>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;exclusions&gt;</span><br><span class="line">     &lt;exclusion&gt;</span><br><span class="line">          &lt;groupId&gt;net.minidev&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;json-smart&lt;/artifactId&gt;</span><br><span class="line">      &lt;/exclusion&gt;</span><br><span class="line">&lt;/exclusions&gt;</span><br></pre></td></tr></table></figure></exclusions></p><p>去除掉这个依赖就ok啦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mvn-dependency-tree-使用详解&quot;&gt;&lt;a href=&quot;#mvn-dependency-tree-使用详解&quot; class=&quot;headerlink&quot; title=&quot;mvn dependency:tree 使用详解&quot;&gt;&lt;/a&gt;mvn dependency
      
    
    </summary>
    
      <category term="Maven" scheme="http://macintosh-c.coding.me/categories/Maven/"/>
    
    
      <category term="Maven" scheme="http://macintosh-c.coding.me/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>jenkins用户权限管理</title>
    <link href="http://macintosh-c.coding.me/2019/10/09/Jenkins/jenkins%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    <id>http://macintosh-c.coding.me/2019/10/09/Jenkins/jenkins用户管理/</id>
    <published>2019-10-09T08:50:56.000Z</published>
    <updated>2019-10-09T05:57:34.107Z</updated>
    
    <content type="html"><![CDATA[<p>jenkins默认的权限管理并没有用户组的概念，所以我们需要第三方插件的支持来解决问题</p><h3 id="1-插件安装"><a href="#1-插件安装" class="headerlink" title="1.插件安装"></a>1.插件安装</h3><p>插件：Role-based Authorization Strategy<br>版本：2.3.2</p><h3 id="2-全局安全配置"><a href="#2-全局安全配置" class="headerlink" title="2.全局安全配置"></a>2.全局安全配置</h3><p>进入Jenkins后点击系统管理进入全局安全配置,当插件安装好的时候，授权策略会多出一个Role-Based Strategy选项，选择该项并保存<br><img src="/img/Jenkins/jenkins1.png" alt="jenkins1"></p><h3 id="3-管理和分配角色"><a href="#3-管理和分配角色" class="headerlink" title="3.管理和分配角色"></a>3.管理和分配角色</h3><p>在系统管理页面进入 Manage and Assign Roles</p><ol><li>管理角色<br>点击manage roles<br>1)设置全局角色（全局角色可以对jenkins系统进行设置与项目的操作）<br>admin:对整个jenkins都可以进行操作<br>ops:可以对所有的job进行管理<br>other:只有读的权限<br><img src="/img/Jenkins/jenkins2.png" alt="jenkins2"><br>2)设置项目角色（项目角色只能对项目进行操作)<br>假设目前jenkins工作中有一个simple-java-maven-app的项目，设置如下roles。<br>jenkins_test_manage:simple-java-maven-app的管理人员<br>jenkins_test_user:simple-java-maven-app的普通用户<br><img src="/img/Jenkins/jenkins3.png" alt="jenkins3"></li><li>创建用户<br>系统管理页面的管理用户,分别创建几个用户,我这边除了之前的admin用户，另外新增了test,test2,test3三个用户，用于测试。</li><li>分配角色<br>系统管理页面进入Manage and Assign Roles,点击assign roles<br>1) 分配全局角色<br><img src="/img/Jenkins/jenkins4.png" alt="jenkins4"><br>2) 分配项目角色<br><img src="/img/Jenkins/jenkins5.png" alt="jenkins5"></li></ol><h3 id="4-查看分配结果"><a href="#4-查看分配结果" class="headerlink" title="4.查看分配结果"></a>4.查看分配结果</h3><ol><li>admin用户进入系统可以看到所有的系统管理权限和所有的项目</li><li>test2和test3没有系统管理权限但是可以管理项目</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;jenkins默认的权限管理并没有用户组的概念，所以我们需要第三方插件的支持来解决问题&lt;/p&gt;
&lt;h3 id=&quot;1-插件安装&quot;&gt;&lt;a href=&quot;#1-插件安装&quot; class=&quot;headerlink&quot; title=&quot;1.插件安装&quot;&gt;&lt;/a&gt;1.插件安装&lt;/h3&gt;&lt;p&gt;插件：
      
    
    </summary>
    
      <category term="jenkins" scheme="http://macintosh-c.coding.me/categories/jenkins/"/>
    
    
      <category term="jenkins用户权限管理" scheme="http://macintosh-c.coding.me/tags/jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>docker安装jenkins</title>
    <link href="http://macintosh-c.coding.me/2019/10/09/Jenkins/docker%E5%AE%89%E8%A3%85jenkins/"/>
    <id>http://macintosh-c.coding.me/2019/10/09/Jenkins/docker安装jenkins/</id>
    <published>2019-10-09T08:45:56.000Z</published>
    <updated>2019-10-09T05:01:20.803Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-系统要求"><a href="#1-系统要求" class="headerlink" title="1.系统要求"></a>1.系统要求</h3><ul><li>最低推荐配置:<br>256MB可用内存<br>1GB可用磁盘空间(作为一个Docker容器运行jenkins的话推荐10GB)</li><li>为小团队推荐的硬件配置:<br>1GB+可用内存<br>50 GB+ 可用磁盘空间</li><li>软件配置:<br>Java 8—​无论是Java运行时环境（JRE）还是Java开发工具包（JDK）都可以。<br>注意: 如果将Jenkins作为Docker 容器运行，这不是必需的</li></ul><h3 id="2-安装docker"><a href="#2-安装docker" class="headerlink" title="2.安装docker"></a>2.安装docker</h3><p><a href="http://macintosh-c.coding.me/2019/09/24/Docker/docker安装/">安装docker</a></p><h3 id="3-在Docker中下载并运行Jenkins"><a href="#3-在Docker中下载并运行Jenkins" class="headerlink" title="3.在Docker中下载并运行Jenkins"></a>3.在Docker中下载并运行Jenkins</h3><p>建议使用的Docker映像是jenkinsci/blueocean image(来自 the Docker Hub repository)。 该镜像包含当前的长期支持 (LTS) 的Jenkins版本 （可以投入使用） ，捆绑了所有Blue Ocean插件和功能。这意味着你不需要单独安装Blue Ocean插件。<br>下载 jenkinsci/blueocean 镜像并使用以下docker run 命令将其作为Docker中的容器运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -u root -d -v /home/barry.cao/jenkins_home:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -e JAVA_OPTS=&apos;-Duser.timezone=Asia/Shanghai&apos; -p 8080:8080 -p 50000:50000 jenkinsci/blueocean</span><br></pre></td></tr></table></figure></p><p>注意以下几点：</p><ol><li>映射在容器中的<code>/var/jenkins_home</code> 目录到具有名字 jenkins-data 的volume。 如果这个卷不存在，那么这个 docker run 命令会自动为你创建卷。 如果您希望每次重新启动Jenkins（通过此 docker run … 命令）时保持Jenkins状态，则此选项是必需的 。 如果你没有指定这个选项，那么在每次重新启动后，Jenkins将有效地重置为新的实例。</li><li>/var/run/docker.sock 表示Docker守护程序通过其监听的基于Unix的套接字。 该映射允许 jenkinsci/blueocean 容器与Docker守护进程通信， 如果 jenkinsci/blueocean 容器需要实例化其他Docker容器，则该守护进程是必需的。 如果运行声明式管道，其语法包含agent部分用 docker<br>例如， agent { docker { … } } 此选项是必需的</li><li>jenkinsci/blueocean Docker镜像本身。如果此镜像尚未下载，则此 docker run 命令 将自动为您下载镜像。此外，如果自上次运行此命令后发布了此镜像的任何更新， 则再次运行此命令将自动为您下载这些已发布的镜像更新。 注意：这个Docker镜像也可以使用以下 docker pull命令独立下载（或更新） ： docker pull jenkinsci/blueocean</li><li>Duser.timezone=Asia/Shanghai为校准时区</li></ol><h3 id="4-安装后设置向导"><a href="#4-安装后设置向导" class="headerlink" title="4.安装后设置向导"></a>4.安装后设置向导</h3><ol><li>解锁 Jenkins<br>当您第一次访问新的Jenkins实例时，系统会要求您使用自动生成的密码对其进行解锁。浏览到 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> （或安装时为Jenkins配置的任何端口），并等待 解锁 Jenkins 页面出现。<br>可以从提示的路径文件中方便的找到解锁密钥。</li><li>自定义jenkins插件<br>解锁 Jenkins之后，在 Customize Jenkins 页面内， 您可以安装任何数量的有用插件作为您初始步骤的一部分。两个选项可以设置:<br>安装建议的插件 - 安装推荐的一组插件，这些插件基于最常见的用例.<br>选择要安装的插件 - 选择安装的插件集。当你第一次访问插件选择页面时，默认选择建议的插件。</li><li>创建第一个管理员用户<br>最后，在customizing Jenkins with plugins之后，Jenkins要求您创建第一个管理员用户。出现“ 创建第一个管理员用户 ”页面时， 请在各个字段中指定管理员用户的详细信息，然后单击 保存完成 。 当 Jenkins准备好了 出现时，单击<em>开始使用 Jenkins</em>。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-系统要求&quot;&gt;&lt;a href=&quot;#1-系统要求&quot; class=&quot;headerlink&quot; title=&quot;1.系统要求&quot;&gt;&lt;/a&gt;1.系统要求&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;最低推荐配置:&lt;br&gt;256MB可用内存&lt;br&gt;1GB可用磁盘空间(作为一个Docker容器运行
      
    
    </summary>
    
      <category term="jenkins" scheme="http://macintosh-c.coding.me/categories/jenkins/"/>
    
    
      <category term="jenkins" scheme="http://macintosh-c.coding.me/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot使用单元测试</title>
    <link href="http://macintosh-c.coding.me/2019/10/06/spring/Springboot/springboot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://macintosh-c.coding.me/2019/10/06/spring/Springboot/springboot单元测试/</id>
    <published>2019-10-05T17:29:05.000Z</published>
    <updated>2019-12-06T09:39:50.302Z</updated>
    
    <content type="html"><![CDATA[<p>这次来介绍下Spring Boot中对单元测试的整合使用，本篇会通过以下4点来介绍，基本满足日常需求</p><ul><li>Service层单元测试</li><li>Controller层单元测试</li><li>新断言assertThat使用</li><li>单元测试的回滚</li></ul><p>Spring Boot中引入单元测试很简单，依赖如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h4 id="Service单元测试"><a href="#Service单元测试" class="headerlink" title="Service单元测试"></a>Service单元测试</h4><p>Spring Boot中单元测试类写在在src/test/java目录下，你可以手动创建具体测试类，如果是IDEA，则可以通过IDEA自动创建测试类,点击Navigate=&gt;Test，然后再编写创建好的测试类，具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.dudu.service;</span><br><span class="line">import com.dudu.domain.LearnResource;</span><br><span class="line">import org.junit.Assert;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line">import static org.hamcrest.CoreMatchers.*;</span><br><span class="line"></span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class LearnServiceTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private LearnService learnService;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void getLearn()&#123;</span><br><span class="line">        LearnResource learnResource=learnService.selectByKey(1001L);</span><br><span class="line">        Assert.assertThat(learnResource.getAuthor(),is(&quot;嘟嘟MD独立博客&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面就是最简单的单元测试写法，顶部只要@RunWith(SpringRunner.class)和SpringBootTest即可，想要执行的时候，鼠标放在对应的方法，右键选择run该方法即可。测试用例中我使用了assertThat断言，下文中会介绍，也推荐大家使用该断言。</p><h4 id="Controller单元测试"><a href="#Controller单元测试" class="headerlink" title="Controller单元测试"></a>Controller单元测试</h4><p>上面只是针对Service层做测试，但是有时候需要对Controller层（API）做测试，这时候就得用到MockMvc了，你可以不必启动工程就能测试这些接口。</p><p>MockMvc实现了对Http请求的模拟，能够直接使用网络的形式，转换到Controller的调用，这样可以使得测试速度快、不依赖网络环境，而且提供了一套验证的工具，这样可以使得请求的验证统一而且很方便。</p><p>Controller类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">package com.dudu.controller;</span><br><span class="line"></span><br><span class="line">/** 教程页面</span><br><span class="line"> * Created by tengj on 2017/3/13.</span><br><span class="line"> */</span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/learn&quot;)</span><br><span class="line">public class LearnController  extends AbstractController&#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private LearnService learnService;</span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(this.getClass());</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&quot;)</span><br><span class="line">    public String learn(Model model)&#123;</span><br><span class="line">        model.addAttribute(&quot;ctx&quot;, getContextPath()+&quot;/&quot;);</span><br><span class="line">        return &quot;learn-resource&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询教程列表</span><br><span class="line">     * @param page</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value = &quot;/queryLeanList&quot;,method = RequestMethod.POST)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public AjaxObject queryLearnList(Page&lt;LeanQueryLeanListReq&gt; page)&#123;</span><br><span class="line">        List&lt;LearnResource&gt; learnList=learnService.queryLearnResouceList(page);</span><br><span class="line">        PageInfo&lt;LearnResource&gt; pageInfo =new PageInfo&lt;LearnResource&gt;(learnList);</span><br><span class="line">        return AjaxObject.ok().put(&quot;page&quot;, pageInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 新添教程</span><br><span class="line">     * @param learn</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value = &quot;/add&quot;,method = RequestMethod.POST)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public AjaxObject addLearn(@RequestBody LearnResource learn)&#123;</span><br><span class="line">        learnService.save(learn);</span><br><span class="line">        return AjaxObject.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 修改教程</span><br><span class="line">     * @param learn</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value = &quot;/update&quot;,method = RequestMethod.POST)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public AjaxObject updateLearn(@RequestBody LearnResource learn)&#123;</span><br><span class="line">        learnService.updateNotNull(learn);</span><br><span class="line">        return AjaxObject.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除教程</span><br><span class="line">     * @param ids</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value=&quot;/delete&quot;,method = RequestMethod.POST)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public AjaxObject deleteLearn(@RequestBody Long[] ids)&#123;</span><br><span class="line">        learnService.deleteBatch(ids);</span><br><span class="line">        return AjaxObject.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取教程</span><br><span class="line">     * @param id</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value=&quot;/resource/&#123;id&#125;&quot;,method = RequestMethod.GET)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public LearnResource qryLearn(@PathVariable(value = &quot;id&quot;) Long id)&#123;</span><br><span class="line">       LearnResource lean= learnService.selectByKey(id);</span><br><span class="line">        return lean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里我们也自动创建一个Controller的测试类，具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">package com.dudu.controller;</span><br><span class="line"></span><br><span class="line">import com.dudu.domain.User;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.http.MediaType;</span><br><span class="line">import org.springframework.mock.web.MockHttpSession;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line">import org.springframework.test.web.servlet.MockMvc;</span><br><span class="line">import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class="line">import org.springframework.test.web.servlet.result.MockMvcResultHandlers;</span><br><span class="line">import org.springframework.test.web.servlet.result.MockMvcResultMatchers;</span><br><span class="line">import org.springframework.test.web.servlet.setup.MockMvcBuilders;</span><br><span class="line">import org.springframework.web.context.WebApplicationContext;</span><br><span class="line"></span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line"></span><br><span class="line">public class LearnControllerTest &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private WebApplicationContext wac;</span><br><span class="line"></span><br><span class="line">    private MockMvc mvc;</span><br><span class="line">    private MockHttpSession session;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void setupMockMvc()&#123;</span><br><span class="line">        mvc = MockMvcBuilders.webAppContextSetup(wac).build(); //初始化MockMvc对象</span><br><span class="line">        session = new MockHttpSession();</span><br><span class="line">        User user =new User(&quot;root&quot;,&quot;root&quot;);</span><br><span class="line">        session.setAttribute(&quot;user&quot;,user); //拦截器那边会判断用户是否登录，所以这里注入一个用户</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 新增教程测试用例</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void addLearn() throws Exception&#123;</span><br><span class="line">        String json=&quot;&#123;\&quot;author\&quot;:\&quot;HAHAHAA\&quot;,\&quot;title\&quot;:\&quot;Spring\&quot;,\&quot;url\&quot;:\&quot;http://tengj.top/\&quot;&#125;&quot;;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.post(&quot;/learn/add&quot;)</span><br><span class="line">                    .accept(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                    .content(json.getBytes()) //传json参数</span><br><span class="line">                    .session(session)</span><br><span class="line">            )</span><br><span class="line">           .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">           .andDo(MockMvcResultHandlers.print());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取教程测试用例</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void qryLearn() throws Exception &#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(&quot;/learn/resource/1001&quot;)</span><br><span class="line">                    .contentType(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                    .accept(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                    .session(session)</span><br><span class="line">            )</span><br><span class="line">           .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">           .andExpect(MockMvcResultMatchers.jsonPath(&quot;$.author&quot;).value(&quot;嘟嘟MD独立博客&quot;))</span><br><span class="line">           .andExpect(MockMvcResultMatchers.jsonPath(&quot;$.title&quot;).value(&quot;Spring Boot干货系列&quot;))</span><br><span class="line">           .andDo(MockMvcResultHandlers.print());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 修改教程测试用例</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void updateLearn() throws Exception&#123;</span><br><span class="line">        String json=&quot;&#123;\&quot;author\&quot;:\&quot;测试修改\&quot;,\&quot;id\&quot;:1031,\&quot;title\&quot;:\&quot;Spring Boot干货系列\&quot;,\&quot;url\&quot;:\&quot;http://tengj.top/\&quot;&#125;&quot;;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.post(&quot;/learn/update&quot;)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                .content(json.getBytes())//传json参数</span><br><span class="line">                .session(session)</span><br><span class="line">        )</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andDo(MockMvcResultHandlers.print());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除教程测试用例</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void deleteLearn() throws Exception&#123;</span><br><span class="line">        String json=&quot;[1031]&quot;;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.post(&quot;/learn/delete&quot;)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                .content(json.getBytes())//传json参数</span><br><span class="line">                .session(session)</span><br><span class="line">        )</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andDo(MockMvcResultHandlers.print());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面实现了基本的增删改查的测试用例，使用MockMvc的时候需要先用MockMvcBuilders使用构建MockMvc对象，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Before</span><br><span class="line">public void setupMockMvc()&#123;</span><br><span class="line">    mvc = MockMvcBuilders.webAppContextSetup(wac).build(); //初始化MockMvc对象</span><br><span class="line">    session = new MockHttpSession();</span><br><span class="line">    User user =new User(&quot;root&quot;,&quot;root&quot;);</span><br><span class="line">    session.setAttribute(&quot;user&quot;,user); //拦截器那边会判断用户是否登录，所以这里注入一个用户</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为拦截器那边会判断是否登录，所以这里我注入了一个用户，你也可以直接修改拦截器取消验证用户登录，先测试完再开启。</p><p>这里拿一个例子来介绍一下MockMvc简单的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取教程测试用例</span><br><span class="line"> * @throws Exception</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void qryLearn() throws Exception &#123;</span><br><span class="line">    mvc.perform(MockMvcRequestBuilders.get(&quot;/learn/resource/1001&quot;)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                .session(session)</span><br><span class="line">        )</span><br><span class="line">       .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">       .andExpect(MockMvcResultMatchers.jsonPath(&quot;$.author&quot;).value(&quot;嘟嘟MD独立博客&quot;))</span><br><span class="line">       .andExpect(MockMvcResultMatchers.jsonPath(&quot;$.title&quot;).value(&quot;Spring Boot干货系列&quot;))</span><br><span class="line">       .andDo(MockMvcResultHandlers.print());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>mockMvc.perform执行一个请求</li><li>MockMvcRequestBuilders.get(“/user/1”)构造一个请求，Post请求就用.post方法</li><li>contentType(MediaType.APPLICATION_JSON_UTF8)代表发送端发送的数据格式是application/json;charset=UTF-8</li><li>accept(MediaType.APPLICATION_JSON_UTF8)代表客户端希望接受的数据类型为application/json;charset=UTF-8</li><li>session(session)注入一个session，这样拦截器才可以通过</li><li>ResultActions.andExpect添加执行完成后的断言</li><li>ResultActions.andExpect(MockMvcResultMatchers.status().isOk())方法看请求的状态响应码是否为200如果不是则抛异常，测试不通过</li><li>andExpect(MockMvcResultMatchers.jsonPath(“$.author”).value(“嘟嘟MD独立博客”))这里jsonPath用来获取author字段比对是否为嘟嘟MD独立博客,不是就测试不通过</li><li>ResultActions.andDo添加一个结果处理器，表示要对结果做点什么事情，比如此处使用MockMvcResultHandlers.print()输出整个响应结果信息</li></ol><h4 id="新断言assertThat使用"><a href="#新断言assertThat使用" class="headerlink" title="新断言assertThat使用"></a>新断言assertThat使用</h4><p>JUnit 4.4 结合 Hamcrest 提供了一个全新的断言语法——assertThat。程序员可以只使用 assertThat 一个断言语句，结合 Hamcrest 提供的匹配符，就可以表达全部的测试思想，我们引入的版本是Junit4.12所以支持assertThat。</p><h5 id="assertThat-的基本语法如下："><a href="#assertThat-的基本语法如下：" class="headerlink" title="assertThat 的基本语法如下："></a>assertThat 的基本语法如下：</h5><p><code>assertThat( [value], [matcher statement] );</code></p><ul><li>value 是接下来想要测试的变量值；</li><li>matcher statement 是使用 Hamcrest 匹配符来表达的对前面变量所期望的值的声明，如果 value 值与 matcher statement 所表达的期望值相符，则测试成功，否则测试失败。</li></ul><h5 id="assertThat-的优点"><a href="#assertThat-的优点" class="headerlink" title="assertThat 的优点"></a>assertThat 的优点</h5><ul><li>优点 1：以前 JUnit 提供了很多的 assertion 语句，如：assertEquals，assertNotSame，assertFalse，assertTrue，assertNotNull，assertNull 等，现在有了 JUnit 4.4，一条 assertThat 即可以替代所有的 assertion 语句，这样可以在所有的单元测试中只使用一个断言方法，使得编写测试用例变得简单，代码风格变得统一，测试代码也更容易维护。</li><li><p>优点 2：assertThat 使用了 Hamcrest 的 Matcher 匹配符，用户可以使用匹配符规定的匹配准则精确的指定一些想设定满足的条件，具有很强的易读性，而且使用起来更加灵活。如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 想判断某个字符串 s 是否含有子字符串 &quot;developer&quot; 或 &quot;Works&quot; 中间的一个</span><br><span class="line">// JUnit 4.4 以前的版本：assertTrue(s.indexOf(&quot;developer&quot;)&gt;-1||s.indexOf(&quot;Works&quot;)&gt;-1 );</span><br><span class="line">// JUnit 4.4：</span><br><span class="line">assertThat(s, anyOf(containsString(&quot;developer&quot;), containsString(&quot;Works&quot;))); </span><br><span class="line">// 匹配符 anyOf 表示任何一个条件满足则成立，类似于逻辑或 &quot;||&quot;， 匹配符 containsString 表示是否含有参数子 </span><br><span class="line">// 字符串，文章接下来会对匹配符进行具体介绍</span><br></pre></td></tr></table></figure></li><li><p>优点 3：assertThat 不再像 assertEquals 那样，使用比较难懂的“谓宾主”语法模式（如：assertEquals(3, x);），相反，assertThat 使用了类似于“主谓宾”的易读语法模式（如：assertThat(x,is(3));），使得代码更加直观、易读。</p></li><li>优点 4：可以将这些 Matcher 匹配符联合起来灵活使用，达到更多目的。如下所示： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">字符相关匹配符</span><br><span class="line">/**equalTo匹配符断言被测的testedValue等于expectedValue，</span><br><span class="line">* equalTo可以断言数值之间，字符串之间和对象之间是否相等，相当于Object的equals方法</span><br><span class="line">*/</span><br><span class="line">assertThat(testedValue, equalTo(expectedValue));</span><br><span class="line">/**equalToIgnoringCase匹配符断言被测的字符串testedString</span><br><span class="line">*在忽略大小写的情况下等于expectedString</span><br><span class="line">*/</span><br><span class="line">assertThat(testedString, equalToIgnoringCase(expectedString));</span><br><span class="line">/**equalToIgnoringWhiteSpace匹配符断言被测的字符串testedString</span><br><span class="line">*在忽略头尾的任意个空格的情况下等于expectedString，</span><br><span class="line">*注意：字符串中的空格不能被忽略</span><br><span class="line">*/</span><br><span class="line">assertThat(testedString, equalToIgnoringWhiteSpace(expectedString);</span><br><span class="line">/**containsString匹配符断言被测的字符串testedString包含子字符串subString**/</span><br><span class="line">assertThat(testedString, containsString(subString) );</span><br><span class="line">/**endsWith匹配符断言被测的字符串testedString以子字符串suffix结尾*/</span><br><span class="line">assertThat(testedString, endsWith(suffix));</span><br><span class="line">/**startsWith匹配符断言被测的字符串testedString以子字符串prefix开始*/</span><br><span class="line">assertThat(testedString, startsWith(prefix));</span><br><span class="line">一般匹配符</span><br><span class="line">/**nullValue()匹配符断言被测object的值为null*/</span><br><span class="line">assertThat(object,nullValue());</span><br><span class="line">/**notNullValue()匹配符断言被测object的值不为null*/</span><br><span class="line">assertThat(object,notNullValue());</span><br><span class="line">/**is匹配符断言被测的object等于后面给出匹配表达式*/</span><br><span class="line">assertThat(testedString, is(equalTo(expectedValue)));</span><br><span class="line">/**is匹配符简写应用之一，is(equalTo(x))的简写，断言testedValue等于expectedValue*/</span><br><span class="line">assertThat(testedValue, is(expectedValue));</span><br><span class="line">/**is匹配符简写应用之二，is(instanceOf(SomeClass.class))的简写，</span><br><span class="line">*断言testedObject为Cheddar的实例</span><br><span class="line">*/</span><br><span class="line">assertThat(testedObject, is(Cheddar.class));</span><br><span class="line">/**not匹配符和is匹配符正好相反，断言被测的object不等于后面给出的object*/</span><br><span class="line">assertThat(testedString, not(expectedString));</span><br><span class="line">/**allOf匹配符断言符合所有条件，相当于“与”（&amp;&amp;）*/</span><br><span class="line">assertThat(testedNumber, allOf( greaterThan(8), lessThan(16) ) );</span><br><span class="line">/**anyOf匹配符断言符合条件之一，相当于“或”（||）*/</span><br><span class="line">assertThat(testedNumber, anyOf( greaterThan(16), lessThan(8) ) );</span><br><span class="line">数值相关匹配符</span><br><span class="line">/**closeTo匹配符断言被测的浮点型数testedDouble在20.0¡À0.5范围之内*/</span><br><span class="line">assertThat(testedDouble, closeTo( 20.0, 0.5 ));</span><br><span class="line">/**greaterThan匹配符断言被测的数值testedNumber大于16.0*/</span><br><span class="line">assertThat(testedNumber, greaterThan(16.0));</span><br><span class="line">/** lessThan匹配符断言被测的数值testedNumber小于16.0*/</span><br><span class="line">assertThat(testedNumber, lessThan (16.0));</span><br><span class="line">/** greaterThanOrEqualTo匹配符断言被测的数值testedNumber大于等于16.0*/</span><br><span class="line">assertThat(testedNumber, greaterThanOrEqualTo (16.0));</span><br><span class="line">/** lessThanOrEqualTo匹配符断言被测的testedNumber小于等于16.0*/</span><br><span class="line">assertThat(testedNumber, lessThanOrEqualTo (16.0));</span><br><span class="line">集合相关匹配符</span><br><span class="line">/**hasEntry匹配符断言被测的Map对象mapObject含有一个键值为&quot;key&quot;对应元素值为&quot;value&quot;的Entry项*/</span><br><span class="line">assertThat(mapObject, hasEntry(&quot;key&quot;, &quot;value&quot; ) );</span><br><span class="line">/**hasItem匹配符表明被测的迭代对象iterableObject含有元素element项则测试通过*/</span><br><span class="line">assertThat(iterableObject, hasItem (element));</span><br><span class="line">/** hasKey匹配符断言被测的Map对象mapObject含有键值“key”*/</span><br><span class="line">assertThat(mapObject, hasKey (&quot;key&quot;));</span><br><span class="line">/** hasValue匹配符断言被测的Map对象mapObject含有元素值value*/</span><br><span class="line">assertThat(mapObject, hasValue(value));</span><br></pre></td></tr></table></figure></li></ul><h4 id="单元测试回滚"><a href="#单元测试回滚" class="headerlink" title="单元测试回滚"></a>单元测试回滚</h4><p>单元个测试的时候如果不想造成垃圾数据，可以开启事物功能，记在方法或者类头部添加@Transactional注解即可,如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">@Transactional</span><br><span class="line">public void add()&#123;</span><br><span class="line">    LearnResource bean = new LearnResource();</span><br><span class="line">    bean.setAuthor(&quot;测试回滚&quot;);</span><br><span class="line">    bean.setTitle(&quot;回滚用例&quot;);</span><br><span class="line">    bean.setUrl(&quot;http://tengj.top&quot;);</span><br><span class="line">    learnService.save(bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样测试完数据就会回滚了，不会造成垃圾数据。如果你想关闭回滚，只要加上@Rollback(false)注解即可。@Rollback表示事务执行完回滚，支持传入一个参数value，默认true即回滚，false不回滚。如果你使用的数据库是Mysql，有时候会发现加了注解@Transactional 也不会回滚，那么你就要查看一下你的默认引擎是不是InnoDB，如果不是就要改成InnoDB。</p><p>附：MyISAM与InnoDB是mysql目前比较常用的两个数据库存储引擎，MyISAM与InnoDB的主要的不同点在于性能和事务控制上。这里简单的介绍一下两者间的区别和转换方法：</p><p>MyISAM：MyISAM是MySQL5.5之前版本默认的数据库存储引擎。MYISAM提供高速存储和检索，以及全文搜索能力，适合数据仓库等查询频繁的应用。但不支持事务、也不支持外键。MyISAM格式的一个重要缺陷就是不能在表损坏后恢复数据。<br>InnoDB：InnoDB是MySQL5.5版本的默认数据库存储引擎，不过InnoDB已被Oracle收购，MySQL自行开发的新存储引擎Falcon将在MySQL6.0版本引进。InnoDB具有提交、回滚和崩溃恢复能力的事务安全。但是比起MyISAM存储引擎，InnoDB写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引。尽管如此，但是InnoDB包括了对事务处理和外来键的支持，这两点都是MyISAM引擎所没有的。<br>MyISAM适合：(1)做很多count 的计算；(2)插入不频繁，查询非常频繁；(3)没有事务。<br>InnoDB适合：(1)可靠性要求比较高，或者要求事务；(2)表更新和查询都相当的频繁，并且表锁定的机会比较大的情况。(4)性能较好的服务器，比如单独的数据库服务器，像阿里云的关系型数据库RDS就推荐使用InnoDB引擎。<br>修改默认引擎的步骤<br>查看MySQL当前默认的存储引擎:<br> <code>mysql&gt; show variables like &#39;%storage_engine%&#39;;</code><br> 你要看user表用了什么引擎(在显示结果里参数engine后面的就表示该表当前用的存储引擎):<br> <code>mysql&gt; show create table user;</code><br> 将user表修为InnoDB存储引擎(也可以此命令将InnoDB换为MyISAM)：<br> <code>mysql&gt; ALTER TABLE user ENGINE=INNODB;</code><br> 如果要更改整个数据库表的存储引擎，一般要一个表一个表的修改，比较繁琐，可以采用先把数据库导出，得到SQL，把MyISAM全部替换为INNODB，再导入数据库的方式。<br> 转换完毕后重启mysql<br> <code>service mysqld restart</code></p><p> 参考网址：<br> <a href="https://blog.csdn.net/sz85850597/article/details/80427408" target="_blank" rel="noopener">https://blog.csdn.net/sz85850597/article/details/80427408</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这次来介绍下Spring Boot中对单元测试的整合使用，本篇会通过以下4点来介绍，基本满足日常需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service层单元测试&lt;/li&gt;
&lt;li&gt;Controller层单元测试&lt;/li&gt;
&lt;li&gt;新断言assertThat使用&lt;/li&gt;
&lt;li&gt;单
      
    
    </summary>
    
      <category term="Springboot" scheme="http://macintosh-c.coding.me/categories/Springboot/"/>
    
    
      <category term="Springboot test" scheme="http://macintosh-c.coding.me/tags/Springboot-test/"/>
    
  </entry>
  
  <entry>
    <title>docker安装sonar</title>
    <link href="http://macintosh-c.coding.me/2019/09/30/test/Sonar/docker%E5%AE%89%E8%A3%85sonar/"/>
    <id>http://macintosh-c.coding.me/2019/09/30/test/Sonar/docker安装sonar/</id>
    <published>2019-09-30T08:45:56.000Z</published>
    <updated>2019-09-30T09:39:05.270Z</updated>
    
    <content type="html"><![CDATA[<p>今天用docker在服务器上部署了个sonar，并push代码进行检测，各种指数相当低，先不谈代码优化，记录下在部署过程中碰到的个坑</p><h3 id="1-安装docker，docker-compose"><a href="#1-安装docker，docker-compose" class="headerlink" title="1.安装docker，docker-compose"></a>1.安装docker，docker-compose</h3><p><a href="http://macintosh-c.coding.me/2019/09/24/Docker/docker安装/">安装docker</a><br><a href="http://macintosh-c.coding.me/2019/09/25/Docker/DockerCompose/">安装docker-compose</a></p><h3 id="2-部署sonar"><a href="#2-部署sonar" class="headerlink" title="2.部署sonar"></a>2.部署sonar</h3><p>docker部署sonar很简单，一句命令就行了，如下：<br><code>docker run -d --name sonarqube -p 9000:9000 sonarqube</code><br>之后便可以访问指定服务器的9000端口访问sonar，默认账户密码：admin/admin</p><p>此时会发现用的是内嵌的数据库，内嵌数据库无法扩展，也无法升级到新版本的SonarQube，并且不能支持将你的数据迁移至其他数据库引擎，内嵌数据库只能用于测试场景，于是使用链接数据库的方式重新部署，这里采用postgre。</p><p>docker stop，docker rm，一顿乱操作删除了之前创建的sonar，再调研一番如何链接postgre数据库，看上去也很简单，一种是docker启动的时候配置关于database参数。第二个也是大多数blog写的使用docker-compose同时部署了sonar和postgre两个docker容器，之间关联，一个docker-compose.yaml文件搞定。<br>讲真，第二种我试了，访问sonar貌似并没有链接数据库，可能脚本方面还存在什么问题，由于目前已经有了postgre服务，所以第二种没有去深究，想采用第一种方式，只增加部署一个sonar，试了，踩了个大坑如下：</p><h3 id="3-部署sonar关联postgre数据库"><a href="#3-部署sonar关联postgre数据库" class="headerlink" title="3.部署sonar关联postgre数据库"></a>3.部署sonar关联postgre数据库</h3><p>部署命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name sonarqube -e SONARQUBE_JDBC_URL=jdbc:postgresql://*****:5432/sonar -e</span><br><span class="line"> POSTGRES_USER=sonar -e POSTGRES_PASSWORD=123456  -p 9000:9000 -d sonarqube</span><br></pre></td></tr></table></figure></p><p>（其中sonar服务的地址，账户，密码根据自己实际的参数）<br>容器启动后总是莫名stop掉，通过docker logs查看日记发现有这么一句报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: [1] bootstrap checks failed</span><br><span class="line">max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br></pre></td></tr></table></figure><p>一脸懵，貌似跟Elasticsearch启动有啥关系，试了网上的很多种方法都不管用，翻译下面那句报错为：elasticsearch用户拥有的内存权限太小，至少需要262144，继续百度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">解决：</span><br><span class="line">切换到root用户</span><br><span class="line">执行命令：</span><br><span class="line">sysctl -w vm.max_map_count=262144</span><br><span class="line">查看结果：</span><br><span class="line">sysctl -a|grep vm.max_map_count</span><br><span class="line">显示：</span><br><span class="line">vm.max_map_count = 262144</span><br><span class="line"></span><br><span class="line">上述方法修改之后，如果重启虚拟机将失效，所以：</span><br><span class="line">解决办法：</span><br><span class="line">在   /etc/sysctl.conf文件最后添加一行</span><br><span class="line">vm.max_map_count=262144</span><br><span class="line">即可永久修改</span><br></pre></td></tr></table></figure></p><p>再次启动，ok，打开sonar，界面最下面关于内嵌数据库的提醒没了，查看postgre，发现有数据，即生效。</p><h3 id="4-汉化"><a href="#4-汉化" class="headerlink" title="4.汉化"></a>4.汉化</h3><p>追加一个中文插件的安装过程，administration-&gt;marketplace-&gt;search chinese-&gt;Chinese Pack install-&gt;restart sonarService即变为中文的了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天用docker在服务器上部署了个sonar，并push代码进行检测，各种指数相当低，先不谈代码优化，记录下在部署过程中碰到的个坑&lt;/p&gt;
&lt;h3 id=&quot;1-安装docker，docker-compose&quot;&gt;&lt;a href=&quot;#1-安装docker，docker-com
      
    
    </summary>
    
      <category term="SonarQube" scheme="http://macintosh-c.coding.me/categories/SonarQube/"/>
    
    
      <category term="SonarQube" scheme="http://macintosh-c.coding.me/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title>centos7下k8s安装</title>
    <link href="http://macintosh-c.coding.me/2019/09/27/kubernetes/k8s%E5%AE%89%E8%A3%85/"/>
    <id>http://macintosh-c.coding.me/2019/09/27/kubernetes/k8s安装/</id>
    <published>2019-09-27T07:08:56.000Z</published>
    <updated>2019-12-06T07:19:00.514Z</updated>
    
    <content type="html"><![CDATA[<p>由于条件所限，俺们只能在虚拟机上来搭建k8s,关于使用虚拟机创建服务器的过程之前已经讲过：<a href="http://macintosh-c.coding.me/2019/09/26/VirtualBox/Mac下安装VirtualBox/">这里</a>，此处我们准备了4台服务器用来搭建，如下：</p><table><thead><tr><th>Service name</th><th>IP</th><th>OS</th><th>Master/Node</th><th>service</th></tr></thead><tbody><tr><td>K8s-master1</td><td>192.168.56.113</td><td>Centos7</td><td>master</td><td>kube-apiserver,kube-controller-manager,kube-scheduler,etcd</td></tr><tr><td>K8s-master2</td><td>192.168.56.116</td><td>Centos7</td><td>master</td><td>kube-apiserver,kube-controller-manager,kube-scheduler</td></tr><tr><td>K8s-node1</td><td>192.168.56.114</td><td>Centos7</td><td>node</td><td>kubelet,kube-proxy,docker,flannel,etcd</td></tr><tr><td>K8s-node2</td><td>192.168.56.115</td><td>Centos7</td><td>node</td><td>kubelet,kube-proxy,docker,flannel,etcd</td></tr></tbody></table><p>1.关闭防火墙，并设置开机关闭<br>systemctl stop firewalld.service<br>systemctl disable firewalld.service</p><p>hostnamectl set-hostname *</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于条件所限，俺们只能在虚拟机上来搭建k8s,关于使用虚拟机创建服务器的过程之前已经讲过：&lt;a href=&quot;http://macintosh-c.coding.me/2019/09/26/VirtualBox/Mac下安装VirtualBox/&quot;&gt;这里&lt;/a&gt;，此处我们准备
      
    
    </summary>
    
      <category term="Kubernetes" scheme="http://macintosh-c.coding.me/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes安装" scheme="http://macintosh-c.coding.me/tags/Kubernetes%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Mac下VirtualBox安装</title>
    <link href="http://macintosh-c.coding.me/2019/09/26/VirtualBox/Mac%E4%B8%8B%E5%AE%89%E8%A3%85VirtualBox/"/>
    <id>http://macintosh-c.coding.me/2019/09/26/VirtualBox/Mac下安装VirtualBox/</id>
    <published>2019-09-26T03:08:56.000Z</published>
    <updated>2019-09-26T15:02:45.613Z</updated>
    
    <content type="html"><![CDATA[<p>Mac下VirtualBox的安装过程很简单，整理如下，有些坑需要注意</p><h3 id="1-下载及安装"><a href="#1-下载及安装" class="headerlink" title="1.下载及安装"></a>1.下载及安装</h3><p>1). VirtualBox官方下载地址：<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">https://www.virtualbox.org/wiki/Downloads</a><br>点击“OS X hosts”下载对应的mac版本。<br>下载完了直接点击安装就行。此处有个坑，virtualbox在安装的时候需要安装内核扩展（Kernel extenstion），而macOS 10.13 High Sierra的新安全特性会阻止外部内核扩展的安装，所以安装总是会被系统拦截，安装最后一步总是提示失败。<br>解决办法：<br>进入Preferences &gt; Security &amp; Privacy &gt; General: 然后手动允许<br>或者<br>在终端手动禁用此安全特性sudo spctl –master-disable</p><p>2). 创建centos7虚拟机需要其镜像文件，官方下载地址：<a href="http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso，约4G多大小" target="_blank" rel="noopener">http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso，约4G多大小</a> 也可以选择其他相应的版本。</p><p>3). 启动桌面VirtualBox程序，如果语言不对，可以到偏好设置中修改为简体中文。</p><h3 id="2-创建centos7虚拟机"><a href="#2-创建centos7虚拟机" class="headerlink" title="2.创建centos7虚拟机"></a>2.创建centos7虚拟机</h3><p>在启动的VirtualBox界面上点击新建，接下来的配置是我在本地创建centos7的配置，可参考或修改，视个人宿主电脑配置或者需要而定，个别会详解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">名称：自己起</span><br><span class="line">文件夹：默认或者修改</span><br><span class="line">类型：Linux</span><br><span class="line">版本：Red Hat(64-bit)</span><br><span class="line">内存大小：1024</span><br><span class="line">虚拟硬盘：现在创建虚拟硬盘</span><br><span class="line">硬盘文件类型：VDI</span><br><span class="line">存储在物理硬盘上：动态分配</span><br><span class="line">文件位置和大小：位置默认，大小默认8G</span><br></pre></td></tr></table></figure></p><p>点击创建ok<br>除此之外还需要做一些额外的配置，重中之中时网络的配置，我们最终要达到的效果是：<br>1.所有的虚拟机可以互ping通。<br>2.宿主机与所有的虚拟机可以互ping通。<br>3.所有的虚拟机可以利用宿主机的网络ping通外网地址。比如百度。<br>4.宿主机切换网络，不影响到虚拟机的ip变更，且各方之间互ping不受影响。</p><p><strong>这里补充一点知识，关于VirtualBox的四种网络连接方式：解决宿主机与虚拟机互ping不通</strong><br><img src="/img/VirtualBox/virtualbox.png" alt="VirtualBox的四种网络连接方式"><br>将网络-连接方式改为桥接网卡讲道理是可以满足前3条，但是当宿主切换网络后，虚拟机与宿主机ping不通，重启虚拟机后的ip也会变动，这样让后续使用虚拟机带来很多不便，所以采用NAT+Host-Only方式。具体配置如下：<br>1.在 virtualbox 偏好设置里设置添加 NAT网络<br><img src="/img/VirtualBox/virtualbox2.jpg" alt="NAT网络"><br>2.在virtualbox工具栏找到网络，添加Host-Only<br><img src="/img/VirtualBox/virtualbox1.jpg" alt="only-host"></p><p>紧接着右击新建的虚拟机，设置-网络<br>1）网卡1-启用网络连接，连接方式：NAT网络<br>2）网卡2-启用网络连接，连接方式：仅主机（Host-Only）网络</p><p>除此之外还有一点其他配置如下<br>3)系统-启动顺序，把光驱移到最上。<br>4)显示-显卡控制器，选择VBoxVGA。</p><p>最后点击启动，弹框中选择刚刚下载的4G多的镜像文件，启动，如果启动的窗口太小，可以通过状态栏视图-自动缩放模式，也可以通过设备下的安装增强功能开启无缝模式和其他一些功能。</p><h3 id="3-centos7系统安装"><a href="#3-centos7系统安装" class="headerlink" title="3.centos7系统安装"></a>3.centos7系统安装</h3><p>接下来就是启动后的虚拟机中centos系统的安装<br>1）选择Install Centos 7<br>2）language选择中文-简体中文<br>3）日记和时间，键盘，语言支持全部默认<br>4）软件选择GNOME桌面，附加全部选上，当然也可以选择其他类型<br>5）安装位置：自动配置分区<br>6）网络和主机名：由于之前我们设置了两个网络连接方式，这里会有两个以太网(enpOs3和enpOs8),分别右上角打开，前者为NAT网络，使虚拟机可以访问wifi网络，后者可以固定ip，使主机以及虚拟机之间互通ok。enpOs8显示的ip地址即为此虚拟机的固定ip，后续可以通过在centos中执行ifconfig命令查看。</p><p>点击开始安装后用户设置，分别设置<br>7）root密码和新建一个账户，同时设置为管理员，等待安装。安装完毕后提示重启，重启后<br>8）接收许可证，<br>9）再次设置下网络和主机名后，<br>完成配置，即可正常进入系统，有交互桌面，可以通过终端互ping验证一下。<br>到这里还有最后一步设置，<br>10）cd到/etc/sysconfig/network-scripts可以看到ifcfg-enpOs3和ifcfg-enpOs8两个文件，确认里面的ONBOOT参数是否设为yes，没有的话改下，保存后，重启网络：命令service network restart。这样的话即使重启虚拟机，ip也会一直固定存在。</p><p><strong>关于上述操作过程中虚拟机与宿主机间的鼠标切换问题，可以通过安装增强功能使其可以自由切换，也可通过左command键来切换。</strong></p><p>到此虚拟机创建完毕，可以多建几个，供后续学习集群等使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mac下VirtualBox的安装过程很简单，整理如下，有些坑需要注意&lt;/p&gt;
&lt;h3 id=&quot;1-下载及安装&quot;&gt;&lt;a href=&quot;#1-下载及安装&quot; class=&quot;headerlink&quot; title=&quot;1.下载及安装&quot;&gt;&lt;/a&gt;1.下载及安装&lt;/h3&gt;&lt;p&gt;1). Vir
      
    
    </summary>
    
      <category term="VirtualBox" scheme="http://macintosh-c.coding.me/categories/VirtualBox/"/>
    
    
      <category term="VirtualBox安装" scheme="http://macintosh-c.coding.me/tags/VirtualBox%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装jdk</title>
    <link href="http://macintosh-c.coding.me/2019/09/25/java/basic/centos7%E5%AE%89%E8%A3%85jdk/"/>
    <id>http://macintosh-c.coding.me/2019/09/25/java/basic/centos7安装jdk/</id>
    <published>2019-09-25T09:39:56.000Z</published>
    <updated>2019-09-25T09:50:06.422Z</updated>
    
    <content type="html"><![CDATA[<p>Centos7自带OpenJDK的环境，强烈不建议使用，卸载重新安装oracle jdk 1.8</p><h3 id="1-进入root帐号-，删除系统自带的openjdk"><a href="#1-进入root帐号-，删除系统自带的openjdk" class="headerlink" title="1. 进入root帐号 ，删除系统自带的openjdk"></a>1. 进入root帐号 ，删除系统自带的openjdk</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line">yum -y remove java*</span><br></pre></td></tr></table></figure><h3 id="2-下载最新的jdk"><a href="#2-下载最新的jdk" class="headerlink" title="2.下载最新的jdk"></a>2.下载最新的jdk</h3><p>地址可以从oracle的网站(<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html）对应版本的rpm地址保存替换：" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html）对应版本的rpm地址保存替换：</a><br><code>wget --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; https://download.oracle.com/otn-pub/java/jdk/8u201-b09/42970487e3af4f5aa5bca3f542482c60/jdk-8u201-linux-x64.rpm</code></p><h3 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h3><p>yum localinstall jdk-8u201-linux-x64.rpm</p><h3 id="4-找java的安装路径"><a href="#4-找java的安装路径" class="headerlink" title="4. 找java的安装路径"></a>4. 找java的安装路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">which java</span><br><span class="line">ls -lrt /usr/bin/java</span><br><span class="line">ls -lrt /etc/alternatives/java</span><br></pre></td></tr></table></figure><p>注：echo $JAVA_HOME 方法是在已经配置了/etc/profile 文件的前提下查询的，如果该文件$JAVA_HOME配置错误，输出结果也是错误的。which java查询到的是java的执行路径，不是安装路径！</p><h3 id="5-vi编辑-etc-profile，配置环境变量"><a href="#5-vi编辑-etc-profile，配置环境变量" class="headerlink" title="5.vi编辑/etc/profile，配置环境变量"></a>5.vi编辑/etc/profile，配置环境变量</h3><p>1)sudo vim /etc/profile<br>2)按下 i 进入编辑，此时在窗体最底部会出现 – 插入 –<br>3)使用键盘输入编辑文字,文件末尾需要添加的配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_201-amd64</span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p><p>4)输入完毕后，完成输入，退出输入，按 ESC ,这个时候会发现底部的 – 插入 –没有了<br>5) 保存编辑的文件，并且退出vim编辑 输入 :wq 命令，按回车键<br>6)使用vim命令打开/etc/profile文件查看文件内容<br>7)没有进行修改，不需要保存直接退出 ，输入 :q 命令<br>8)source /etc/profile 使之立即生效<br>可分别用以下命令查看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo $JAVA_HOME</span><br><span class="line">echo $PATH</span><br><span class="line">echo $CLASSPATH</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Centos7自带OpenJDK的环境，强烈不建议使用，卸载重新安装oracle jdk 1.8&lt;/p&gt;
&lt;h3 id=&quot;1-进入root帐号-，删除系统自带的openjdk&quot;&gt;&lt;a href=&quot;#1-进入root帐号-，删除系统自带的openjdk&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="java基础" scheme="http://macintosh-c.coding.me/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="jdk安装" scheme="http://macintosh-c.coding.me/tags/jdk%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Docker，Docker Compose，Docker Swarm，Kubernetes之间的区别</title>
    <link href="http://macintosh-c.coding.me/2019/09/25/Docker/docker%E7%90%86%E8%A7%A3%E7%AF%87/"/>
    <id>http://macintosh-c.coding.me/2019/09/25/Docker/docker理解篇/</id>
    <published>2019-09-25T07:04:56.000Z</published>
    <updated>2019-09-25T07:18:00.922Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习Docker容器，了解到一些相关的技术，像是Kubernetes，Docker-compose，Docker Swarm，分不清这些东西之间的区别，特意去研究了一下，分享一下，适合刚入门学习容器的同学了解。</p><h2 id="Dcoker"><a href="#Dcoker" class="headerlink" title="Dcoker"></a>Dcoker</h2><p>Docker 这个东西所扮演的角色，容易理解，它是一个容器引擎，也就是说实际上我们的容器最终是由Docker创建，运行在Docker中，其他相关的容器技术都是以Docker为基础，它是我们使用其他容器技术的核心。</p><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p>Docker-Compose 是用来管理你的容器的，有点像一个容器的管家，想象一下当你的Docker中有成百上千的容器需要启动，如果一个一个的启动那得多费时间。有了Docker-Compose你只需要编写一个文件，在这个文件里面声明好要启动的容器，配置一些参数，执行一下这个文件，Docker就会按照你声明的配置去把所有的容器启动起来，但是Docker-Compose只能管理当前主机上的Docker，也就是说不能去启动其他主机上的Docker容器</p><h2 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h2><p>Docker Swarm 是一款用来管理多主机上的Docker容器的工具，可以负责帮你启动容器，监控容器状态，如果容器的状态不正常它会帮你重新帮你启动一个新的容器，来提供服务，同时也提供服务之间的负载均衡，而这些东西Docker-Compose 是做不到的</p><h2 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h2><p>Kubernetes它本身的角色定位是和Docker Swarm 是一样的，也就是说他们负责的工作在容器领域来说是相同的部分，当然也有自己一些不一样的特点。这个就像是Eclipse和IDEA一样，也是一个跨主机的容器管理平台。它是谷歌公司根据自身的多年的运维经验研发的一款容器管理平台。而Docker Swarm则是由Docker 公司研发的。</p><p>既然这两个东西是一样的，那就面临选择的问题，应该学习哪一个技术呢?实际上这两年Kubernetes已经成为了很多大公司的默认使用的容器管理技术，而Docker Swarm已经在这场与Kubernetes竞争中已经逐渐失势，如今容器管理领域已经开始已经逐渐被Kubernetes一统天下了。所以建议大家学习的时候，应该多考虑一下这门技术在行业里面是不是有很多人在使用。</p><p>需要注意的是，虽然Docker Swarm在与Kubernetes的竞争中败下阵来，但是这个跟Docker这个容器引擎没有太大关系，它还是整个容器领域技术的基石，Kubernetes离开他什么也不是。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Docker是容器技术的核心、基础，Docker Compose是一个基于Docker的单主机容器编排工具，功能并不像Docker Swarm和Kubernetes是基于Dcoker的跨主机的容器管理平台那么丰富。</p><p>转载自：<a href="https://blog.csdn.net/notsaltedfish/article/details/80959913" target="_blank" rel="noopener">Docker，Docker Compose，Docker Swarm，Kubernetes之间的区别</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在学习Docker容器，了解到一些相关的技术，像是Kubernetes，Docker-compose，Docker Swarm，分不清这些东西之间的区别，特意去研究了一下，分享一下，适合刚入门学习容器的同学了解。&lt;/p&gt;
&lt;h2 id=&quot;Dcoker&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Docker" scheme="http://macintosh-c.coding.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://macintosh-c.coding.me/tags/Docker/"/>
    
  </entry>
  
</feed>
